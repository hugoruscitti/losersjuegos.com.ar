
====== Rect ======

/*
pygame object for storing rectangular coordinates
*/

Objeto de pygame que se utiliza para almacenar coordenadas rectangulares.

<box 90%>
  * [[#Rect]]
  * [[#move]]
  * [[#move_ip]]
  * [[#inflate]]
  * [[#inflate_ip]]
  * [[#clamp]]
  * [[#clamp_ip]]
  * [[#clip]]
  * [[#union]]
  * [[#union_ip]]
  * [[#unionall]]
  * [[#unionall_ip]]
  * [[#fit]]
  * [[#normalize]]
  * [[#contains]]
  * [[#collidepoint]]
  * [[#colliderect]]
  * [[#collidelist]]
  * [[#collidelistall]]
  * [[#collidedict]]
  * [[#collidedictall]]
</box>


===== Rect =====


<code>
pygame.Rect(left, top, width, height): return Rect
pygame.Rect((left, top), (width, height)): return Rect
pygame.Rect(object): return Rect
</code>

/*
Pygame uses Rect objects to store and manipulate rectangular areas. A Rect
can be created from a combination of left, top, width, and height values.
Rects can also be created from python objects that are already a Rect or
have an attribute named "rect".
*/

Pygame utiliza objetos Rect para almacenar y manipular areas rectangulares. Un
objeto Rect se puede crear a partir de una combinación de valores ''izquierda'', 
''arriba'', ''ancho'' y ''alto''. También se pueden crear desde objetos
python que ya sean un objeto Rect o tengan un atributo de nombre ''rect''.

/*
Any Pygame function that requires a Rect argument also accepts any of
these values to construct a Rect. This makes it easier to create Rects
on the fly as arguments to functions.
*/

Cualquier función de pygame que requiera un argumento Rect también acepta
cualquiera de eso valores para construir un rectángulo. Esto hace mas sencillo
crear objetos Rect en el aire como argumentos a funciones.


/*
The Rect functions that change the position or size of a Rect return
a new copy of the Rect with the affected changes. The original Rect
is not modified. Some methods have an alternate "in-place" version that
returns None but effects the original Rect. These "in-place" methods
are denoted with the "ip" suffix.
*/

Los métodos de Rect que cambian la posición o el tamaño del rectángulo
retornan una nueva copia del objeto con los cambios realizados. El
rectángulo original no se modifica. Algunos métodos tiene una versión
alternativa de estas funcionalidades pero que actúan sobre el objeto
mismo y retornan None. Estos métodos alternativos se denotan con el
sufijo "ip".

/*
The Rect object has several virtual attributes which can be used to move
and align the Rect:
*/

El objeto Rect tiene varios atributos virtuales que se pueden usar para
mover o alinear un rectángulo.

/*

    top, left, bottom, right
    topleft, bottomleft, topright, bottomright
    midtop, midleft, midbottom, midright
    center, centerx, centery
    size, width, height
    w,h
*/

  * top, left, bottom, right
  * topleft, bottomleft, topright, bottomright
  * midtop, midleft, midbottom, midright
  * center, centerx, centery
  * size, width, height
  * w,h


/*
All of these attributes can be assigned to:
*/

Todos estos atributos se pueden asignar así:

/*
    rect1.right = 10
    rect2.center = (20,30)
*/

<code python>
rect1.right = 10
rect2.center = (20,30)
</code>

/*
Assigning to size, width or height changes the dimensions of the
rectangle; all other assignments move the rectangle without
resizing it. Notice that some attributes are integers and
others are pairs of integers.
*/

Asignar un valor a ''size'', ''width'' o ''height'' cambia las dimensiones
del rectángulo, todas las otras asignaciones mueven el rectángulo pero
sin alterar el tamaño. Note que algunos atributos son números enteros
y otros son pares de números enteros.

/*
If a Rect has a nonzero width or height, it will return True for a
nonzero test. Some methods return a Rect with 0 size to represent an
invalid rectangle.
*/

Si un rectángulo tiene atributos ''width'' o ''height'' distintos
de cero, entonces retornarán True por una consulta distinta de cero. Algunos
métodos retornan un rectángulo con tamaño 0 para representar un
rectángulo inválido.


/*
The coordinates for Rect objects are all integers. The size values
can be programmed to have negative values, but these are considered
illegal Rects for most operations.
*/

Las coordenadas para objetos Rect siempre son números enteros. Los
valores de tamaño se pueden programar para tener valores negativos, pero
estos se consideran no válidos para la mayoría de las operaciones.

/*
There are several collision tests between other rectangles. Most
python containers can be searched for collisions against a single Rect.
*/

Existen varios métodos para consultar colisiones con otros rectángulos. La
mayoría de los contenedores de python se pueden utilizar para buscar
colisiones entre varios rectángulos contra uno.


/*
The area covered by a Rect does not include the right- and bottom-most
edge of pixels. If one Rect's bottom border is another Rect's top border
(i.e., rect1.bottom=rect2.top), the two meet exactly on the screen
but do not overlap, and rect1.colliderect(rect2) returns false.
*/

El área cubierta por un rectángulo no incluye los //pixeles// que se
encuentran en el límite inferior y derecho. Si el borde inferior de un
rectángulo es igual al borde superior de otro rectángulo (por ejemplo 
''rect1.bottom = rect2.top''), los dos ocupan la misma linea en pantalla pero no se superponen, y la consulta a ''rect1.colliderect(rect2)'' retornará
''False''.


===== move =====

/*
moves the rectangle
*/

Mueve el rectángulo.

<code>
Rect.move(x, y): return Rect
</code>

/*
Returns a new rectangle that is moved by the given offset. The x and y
arguments can be any integer value, positive or negative.
*/

Retorna un nuevo rectángulo que está desplazado en la cantidad indicada. Los
argumento ''x'' e ''y'' pueden ser cualquier valor entero, positivo o negativo.

  * [[pythonexample>pygame.Rect.move|buscar código donde se use esta función.]]


===== move_ip =====

/*
moves the rectangle, in place
*/

Mueve el rectángulo afectando al objeto receptor.

<code>
Rect.move_ip(x, y): return None
</code>


/*
Same as the Rect.move() method, but operates in place.
*/

Similar al método [[#move]], pero opera afectando al objeto receptor.

  * [[pythonexample>pygame.Rect.move_ip|buscar código donde se use esta función.]]

===== inflate =====

/*
grow or shrink the rectangle size
*/

Aumenta o disminuye el tamaño del rectángulo.

<code>
Rect.inflate(x, y): return Rect
</code>

/*
Returns a new rectangle with the size changed by the given offset. The
rectangle remains centered around its current center. Negative values
will shrink the rectangle.
*/

Retorna un nuevo rectángulo con el tamaño alterado en la cantidad indicada. El
rectángulo se mantiene centrado en el mismo punto. Los valores negativos
reducen el tamaño del rectángulo.

  * [[pythonexample>pygame.Rect.inflate|buscar código donde se use esta función.]]

===== inflate_ip =====

/*
grow or shrink the rectangle size, in place
*/

Aumenta o disminuye el tamaño del rectángulo afectando al objeto receptor.

<code>
Rect.inflate_ip(x, y): return None
</code>

/*
Same as the Rect.inflate() method, but operates in place.
*/

Similar al método [[#inflate]], pero modifica al objeto receptor.

  * [[pythonexample>pygame.Rect.inflate_ip|buscar código donde se use esta función.]]


===== clamp =====

/*
moves the rectangle inside another
*/

Mueve el rectángulo dentro e otro.

<code>
Rect.clamp(Rect): return Rect
</code>

/*
Returns a new rectangle that is moved to be completely inside the argument
Rect. If the rectangle is too large to fit inside, it is centered inside
the argument Rect, but its size is not changed.
*/

Retorna una nuevo rectángulo desplazado para estar completamente dentro de
otro rectángulo dado como parámetro. Si el rectángulo es demasiado grande
para caber dentro del otro rectángulo, se posicionará en el mismo centro
que el rectángulo del argumento, pero su tamaño no se cambiará.


  * [[pythonexample>pygame.Rect.clamp|buscar código donde se use esta función.]]


===== clamp_ip =====

/*
moves the rectangle inside another, in place
*/

Mueve el rectángulo dentro e otro.

<code>
Rect.clamp_ip(Rect): return None
</code>

/*
Same as the Rect.clamp() method, but operates in place.
*/

Similar al método [[#clamp]], pero afecta al objeto receptor.

  * [[pythonexample>pygame.Rect.clamp_ip|buscar código donde se use esta función.]]


===== clip =====

/*
crops a rectangle inside another
*/

Recorta un rectángulo dentro de otro.

<code>
Rect.clip(Rect): return Rect
</code>

/*
Returns a new rectangle that is cropped to be completely inside the
argument Rect. If the two rectangles do not overlap to begin with, a
Rect with 0 size is returned.
*/

Retorna un nuevo rectángulo que se recorta para estar completamente
dentro de otro indicado por parámetro. Si los dos rectángulos no están
en colisión, se retornará un rectángulo de tamaño 0.

  * [[pythonexample>pygame.Rect.clip|buscar código donde se use esta función.]]

===== union =====

/*
joins two rectangles into one
*/

Une dos rectángulo para convertirse en uno.

<code>
Rect.union(Rect): return Rect
</code>

/*
Returns a new rectangle that completely covers the area of the two
provided rectangles. There may be area inside the new Rect that is
not covered by the originals.
*/

Retorna un nuevo rectángulo que cubre completamente el área de otros
dos rectángulos dados como parámetro. Pueden haber áreas dentro del
nuevo rectángulo que no estén en el área de los originales.

  * [[pythonexample>pygame.Rect.union|buscar código donde se use esta función.]]

===== union_ip =====

/*
joins two rectangles into one, in place
*/

Une dos rectángulo para convertirse en uno, afectando al objeto receptor.

<code>
Rect.union_ip(Rect): return None
</code>

/*
Same as the Rect.union() method, but operates in place.
*/

Similar al método [[#union]], pero que afecta al rectángulo receptor.

  * [[pythonexample>pygame.Rect.union_ip|buscar código donde se use esta función.]]

===== unionall =====

/*
the union of many rectangles
*/

La unión de varios rectángulos.

<code>
Rect.unionall(Rect_sequence): return Rect
</code>

/*
Returns the union of one rectangle with a sequence of many rectangles.
*/

Retorna la unión de un rectángulo con una secuencia de varios rectángulos.


  * [[pythonexample>pygame.Rect.unionall|buscar código donde se use esta función.]]

===== unionall_ip =====

/*
the union of many rectangles, in place
*/

La unión de varios rectángulos, afectando al objeto receptor.

<code>
Rect.unionall_ip(Rect_sequence): return None
</code>

/*
The same as the Rect.unionall() method, but operates in place.
*/

Similar al método [[#unionall]], pero afectando al objeto receptor.


  * [[pythonexample>pygame.Rect.unionall_ip|buscar código donde se use esta función.]]


===== fit =====

/*
resize and move a rectangle with aspect ratio
*/

Cambia el tamaño o mueve el rectángulo pero respetando su aspecto.

<code>
Rect.fit(Rect): return Rect
</code>

/*
Returns a new rectangle that is moved and resized to fit another. The
aspect ratio of the original Rect is preserved, so the new rectangle may
be smaller than the target in either width or height.
*/

Retorna un nuevo rectángulo desplazado y redimensionado para caber dentro
de otro. Se preserva la proporción de aspecto del rectángulo original, por
lo tanto el nuevo rectángulo puede ser mas pequeño que el ancho o alto
del rectángulo final.


  * [[pythonexample>pygame.Rect.fit|buscar código donde se use esta función.]]


===== normalize =====

/*
correct negative sizes
*/

Corrige los tamaños negativos.

<code>
Rect.normalize(): return None
</code>

/*
This will flip the width or height of a rectangle if it has a negative
size. The rectangle will remain in the same place, with only the sides
swapped.
*/

Invertirá el ancho o alto de un rectángulo si tiene algún tamaño negativo. El
rectángulo conservará la misma posición, pero con los lados alternados.


  * [[pythonexample>pygame.Rect.normalize|buscar código donde se use esta función.]]


===== contains =====

/*
test if one rectangle is inside another
*/

Consulta si un rectángulo está dentro de otro.

<code>
Rect.contains(Rect): return bool
</code>

/*
Returns true when the argument is completely inside the Rect.
*/

Retorna ''True'' cuando el argumento está completamente dentro del objeto
receptor.


  * [[pythonexample>pygame.Rect.contains|buscar código donde se use esta función.]]


===== collidepoint =====

/*
test if a point is inside a rectangle
*/

Consulta si un punto está dentro de un rectángulo.

<code>
Rect.collidepoint(x, y): return bool
Rect.collidepoint( (x,y) ): return bool
</code>

/*
Returns true if the given point is inside the rectangle. A point along
the right or bottom edge is not considered to be inside the rectangle.
*/

Retorna ''True'' si el punto dado está dentro del rectángulo. Un punto
sobre el costado derecho o inferior del rectángulo no se considera
que está dentro del rectángulo.

  * [[pythonexample>pygame.Rect.collidepoint|buscar código donde se use esta función.]]


===== colliderect =====

/*
test if two rectangles overlap
*/

Consulta si dos rectángulos están en contacto

<code>
Rect.colliderect(Rect): return bool
</code>

/*
Returns true if any portion of either rectangle overlap (except
the top+bottom or left+right edges).
*/

Retorna ''True'' si cualquier parte de alguno de los rectángulos están en
contacto (excepto los bordes superior+inferior o derecha+izquierda)

  * [[pythonexample>pygame.Rect.colliderect|buscar código donde se use esta función.]]


===== collidelist =====

/*
test if one rectangle in a list intersects
*/

Consulta si un rectángulo entra en contacto con una lista.

<code>
Rect.collidelist(list): return index
</code>

/*
Test whether the rectangle collides with any in a sequence of rectangles.
The index of the first collision found is returned. If no collisions are
found an index of -1 is returned.
*/

Consulta si el rectángulo colisiona con otro de una secuencia de rectángulos. Se
retorna el índice de la primer colisión que se encuentra. Se retorna
el índice -1 si no se encuentran colisiones.


  * [[pythonexample>pygame.Rect.collidelist|buscar código donde se use esta función.]]

===== collidelistall =====

/*
test if all rectangles in a list intersect
*/

Consulta si todos los rectángulos en una lista entran en contacto.

<code>
Rect.collidelistall(list): return indices
</code>


/*
Returns a list of all the indices that contain rectangles that collide
with the Rect. If no intersecting rectangles are found, an empty list
is returned.
*/

Retorna una lista de todos los índices que contienen rectángulos que
colisionan con el rectángulo. Se retorna una lista vacía si no se
encuentran rectángulos en colisión.

  * [[pythonexample>pygame.Rect.collidelistall|buscar código donde se use esta función.]]



===== collidedict =====

/*
test if one rectangle in a dictionary intersects
*/

Consulta si un rectángulo en un diccionario entra en contacto con el rectángulo.

<code>
Rect.collidedict(dict): return (key, value)
</code>

/*
Returns the key and value of the first dictionary value that collides
with the Rect. If no collisions are found, None is returned.
*/

Retorna la clave y el valor del primer elemento de diccionario que colisiona
con el rectángulo. Se retorna ''None'' si no se encuentran colisiones.

/*
Rect objects are not hashable and cannot be used as keys in a dictionary,
only as values.
*/

Los objetos Rect no se pueden usar como clave en los diccionarios, solamente
se pueden utilizar como valores.


  * [[pythonexample>pygame.Rect.collidedict|buscar código donde se use esta función.]]


===== collidedictall =====

/*
test if all rectangles in a dictionary intersect
*/

Consulta si todos los rectángulos en un diccionario entran en contacto.

<code>
Rect.collidedictall(dict): return [(key, value), ...]
</code>

/*
Returns a list of all the key and value pairs that intersect with the
Rect. If no collisions are found an empty dictionary is returned.
*/

Retorna una lista de todos los parece de clave y valor que colisionan
con un rectángulo. Se retorna un diccionario vacío si no se encuentran
colisiones.

/*
Rect objects are not hashable and cannot be used as keys in a dictionary,
only as values.
*/

Los objetos Rect no se pueden usar como clave en los diccionarios, solamente
se pueden utilizar como valores.

  * [[pythonexample>pygame.Rect.collidedictall|buscar código donde se use esta función.]]


