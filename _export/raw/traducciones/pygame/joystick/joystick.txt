====== Joystick ======

/* create a new Joystick object */

Genera un nuevo objeto Joystick.

<box 90%>
  * [[#Joystick]]
  * [[#init]]
  * [[#quit]]
  * [[#get_init]]
  * [[#get_id]]
  * [[#get_name]]
  * [[#get_numaxes]]
  * [[#get_axis]]
  * [[#get_numballs]]
  * [[#get_ball]]
  * [[#get_numbuttons]]
  * [[#get_button]]
  * [[#get_numhats]]
  * [[#get_hat]]
</box>



===== Joystick =====

/*
create a new Joystick object
*/

Genera un nuevo objeto Joystick.

<code python>
pygame.joystick.Joystick(id): return Joystick
</code>

/*
Create a new joystick to access a physical device. The id argument must
be a value from 0 to ''pygame.joystick.get_count() -1''.
*/

Genera un nuevo objeto Joystick para acceder al dispositivo físico. El
argumento ''id'' debe ser un valor de 0 a ''pygame.joystick.get_count() -1''.


/*
To access most of the Joystick methods, you'll need to [[#init|init]]() 
the Joystick. This is separate from making sure the joystick module is
initialized. When multiple Joysticks objects are created for the
same physical joystick device (i.e., they have the same ID number),
the state and values for those Joystick objects
will be shared.
*/

Necesita llamar al método [[#init|init()]] del Joystick para acceder
a la mayoría de los métodos del Joystick. Este método está separado
de ello para asegurarse que se inicializa el módulo joystick. El estado y
valores para los objetos Joystick se puede compartir cuando se generan
múltiples objetos Joystick a partir del mismo dispositivo (por ejemplo, si
tienen el mismo identificador ''ID'').

/*
The Joystick object allows you to get information about the types of
controls on a joystick device. Once the device is initialized the Pygame
event queue will start receiving events about its input.
*/

El objeto Joystick le permite obtener información acerca de los
controles en el dispositivo de Joystick. La cola de eventos
comenzará a recibir eventos de esta entrada una vez que el
dispositivo esté inicializado.


/*
You can call the [[#get_name|Joystick.get_name]]() and
[[#get_id|Joystick.get_id]]() functions without initializing the Joystick object.
*/

Puede llamar a las funciones ''Joystick.get_name()'' y ''Joystick.get_id()''
sin inicializar el objeto Joystick.




===== init =====

/*
initialize the Joystick
*/

Inicializa el Joystick.

<code python>
Joystick.init(): return None
</code>

/*
The Joystick must be initialized to get most of the information about
the controls. While the Joystick is initialized the Pygame event queue will
receive events from the Joystick input.
*/

El Joystick se debe inicializar para obtener la mayor información
acerca de los controles. Cuando el Joystick se inicializa la cola
de eventos de pygame recibirá la entrada de comandos del Joystick.

/*
It is safe to call this more than once.
*/

Es seguro llamar a este método mas de una vez.


  * [[pythonexample>pygame.joystick.Joystick.init|buscar código donde se use esta función.]]


===== quit =====

/*
uninitialize the Joystick
*/

Deshabilita el Joystick.

<code python>
Joystick.quit(): return None
</code>

/*
This will unitialize a Joystick. After this the Pygame event queue will
no longer receive events from the device.
*/

Este método deshabilita el Joystick. Después de esto, la cola de eventos
de pygame no recibirá mas eventos del dispositivo.

/*
It is safe to call this more than once.
*/

Es seguro llamar a esta función mas de una vez.



  * [[pythonexample>pygame.joystick.Joystick.quit|buscar código donde se use esta función.]]

===== get_init =====

/*
check if the Joystick is initialized
*/

Consulta si el Joystick está incializado.

<code python>
Joystick.get_init(): return bool
</code>

/*
Returns True if the [[#init|init]]() method has already been called
on this Joystick object.
*/

Retorna ''True'' si ya se ha llamado al método [[#init|init()]] en
este objeto.



  * [[pythonexample>pygame.joystick.Joystick.get_init|buscar código donde se use esta función.]]


===== get_id =====

/*
get the Joystick ID
*/

Obtiene el identificador del Joystick.

<code python>
Joystick.get_id(): return int
</code>

/*
Returns the integer ID that represents this device. This is the same value
that was passed to the Joystick() constructor. This method can safely
be called while the Joystick is not initialized.
*/

Retorna en número identificador que representa este dispositivo. Este
valor es el mismo que se ha indicado al constructor del Joystick(). Este
método se puede llamar de forma segura mientras el Joystick no esté
inicializado.


  * [[pythonexample>pygame.joystick.Joystick.get_id|buscar código donde se use esta función.]]

===== get_name =====

/*
get the Joystick system name
*/

Obtiene el nombre de sistema del Joystick.


<code python>
Joystick.get_name(): return string
</code>

/*
Returns the system name for this joystick device. It is unknown what name
the system will give to the Joystick, but it should be a unique name that
identifies the device. This method can safely be called while the Joystick
is not initialized.
*/

Retorna el nombre de sistema para este dispositivo de Joystick. Se 
desconoce que nombre dará el sistema al Joystick, aunque debería ser
un nombre único que identifica al dispositivo. Este método se puede
llamar con seguridad mientras el Joystick no esté inicializado.



  * [[pythonexample>pygame.joystick.Joystick.get_name|buscar código donde se use esta función.]]

===== get_numaxes =====

/*
get the number of axes on a Joystick
*/

Retorna el número de mandos de posición de un joystick.

<code python>
Joystick.get_numaxes(): return int
</code>

/*
Returns the number of input axes are on a Joystick. There will usually be
two for the position. Controls like rudders and throttles are treated as
additional axes.
*/

Retorna el número de mandos de posición de un Joystick. Generalmente
será de mandos para la posición (horizontal y vertical). Controles
como aletas de avión o frenos se manejan como mandos de posición adicionales.



/*
The pygame.JOYAXISMOTION events will be in the range from -1.0 to 1.0. A value
of 0.0 means the axis is centered. Gamepad devices will usually be -1, 0, or 1
with no values in between. Older analog joystick axes will not always use the
full -1 to 1 range, and the centered value will be some area around 0. 
Analog joysticks usually have a bit of noise in their axis, which will generate
a lot of rapid small motion events.
*/

Los eventos pygame.JOYAXISMOTION irán en el rango de -1.0 a 1.0. Un
valor como 0.0 significa que el eje está centrado. Los joysticks tradicionales
generalmente informan -1, 0 o 1 pero sin valores intermedios. Y los joysticks
analógicos antiguos no siempre utilizan el rango de -1 a 1 completo, y el
centro es un valor cercano a 0. Estos joysticks antiguos también suelen
tener un poco de ruido en los ejes, lo que generará un montón de eventos
de movimiento rápidos.


  * [[pythonexample>pygame.joystick.Joystick.get_numaxes|buscar código donde se use esta función.]]



===== get_axis =====

/*
get the current position of an axis
*/

Obtiene la posición actual de un eje.

<code>
Joystick.get_axis(axis_number): return float
</code>

/*
Returns the current position of a joystick axis. The value will range from
-1 to 1 with a value of 0 being centered. You may want to take into account
some tolerance to handle jitter, and joystick drift may keep the joystick
from centering at 0 or using the full range of position values.
*/

Retorna la posición actual de un eje del joystick. El valor estará
en el rango que va de -1 a 1 con un valor de 0 como centro. Tal vez
deba tener en cuenta cierta toleracia a las imperfecciones de estos
valores.


/*
The axis number must be an integer from zero to ''get_numaxes() -1''.
*/

El número de eje debe ser un entero de cero a ''get_numaxes() -1''.


  * [[pythonexample>pygame.joystick.Joystick.get_axis|buscar código donde se use esta función.]]

===== get_numballs =====

/*
get the number of trackballs on a Joystick
*/

Obtiene el número de ejes en un joystick.

<code>
Joystick.get_numballs(): return int
</code>


-----------------------

Returns the number of trackball devices on a Joystick. These devices work
similar to a mouse but they have no absolute position; they only have relative
amounts of movement.

The pygame.JOYBALLMOTION event will be sent when the trackball is rolled.
It will report the amount of movement on the trackball.

  * [[pythonexample>pygame.joystick.Joystick.get_numballs|buscar código donde se use esta función.]]

===== get_ball =====

get the relative position of a trackball

<code>
Joystick.get_ball(ball_number): return x, y
</code>

Returns the relative movement of a joystick button. The value is a x, y pair
holding the relative movement since the last call to get_ball.

The ball number must be an integer from zero to ''get_numballs() -1''.


  * [[pythonexample>pygame.joystick.Joystick.get_ball|buscar código donde se use esta función.]]


===== get_numbuttons =====

get the number of buttons on a Joystick

<code>
Joystick.get_numbuttons(): return int
</code>

Returns the number of pushable buttons on the joystick. These buttons have
a boolean (on or off) state.

Buttons generate a pygame.JOYBUTTONDOWN and pygame.JOYBUTTONUP event when
they are pressed and released.


  * [[pythonexample>pygame.joystick.Joystick.get_numbuttons|buscar código donde se use esta función.]]


===== get_button =====

get the current button state

<code>
Joystick.get_button(button): return bool
</code>

Returns the current state of a joystick button.


  * [[pythonexample>pygame.joystick.Joystick.get_button|buscar código donde se use esta función.]]


===== get_numhats =====

get the number of hat controls on a Joystick

<code>
Joystick.get_numhats(): return int
</code>

Returns the number of joystick hats on a Joystick. Hat devices are like
miniature digital joysticks on a joystick. Each hat has two axes of input.

The pygame.JOYHATMOTION event is generated when the hat changes position.
The position attribute for the event contains a pair of values that are
either -1, 0, or 1. A position of (0, 0) means the hat is centered.


  * [[pythonexample>pygame.joystick.Joystick.get_numhats|buscar código donde se use esta función.]]

===== get_hat =====

get the position of a joystick hat

<code>
Joystick.get_hat(hat_number): return x, y
</code>

Returns the current position of a position hat. The position is given as two
values representing the X and Y position for the hat. (0, 0) means centered.
A value of -1 means left/down and a value of 1 means right/up: so (-1, 0)
means left; (1, 0) means right; (0, 1) means up; (1, 1) means upper-right; etc.

/* error, digital no es la palabra para referirse a estos valores, en todo
caso se podría decir entero */
This value is digital, i.e., each coordinate can be -1, 0 or 1 but never
in-between.

The hat number must be between 0 and ''get_numhats() -1''.

  * [[pythonexample>pygame.joystick.Joystick.get_hat|buscar código donde se use esta función.]]
