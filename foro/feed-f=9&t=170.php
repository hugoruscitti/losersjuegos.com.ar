<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="es">
<link rel="self" type="application/atom+xml" href="http://losersjuegos.com.ar/foro/feed.php?f=9&amp;t=170" />

<title>LosersJuegos</title>
<subtitle>Desarrollando videojuegos libres</subtitle>
<link href="http://losersjuegos.com.ar/foro/index.php" />
<updated>2007-10-08T14:32:46+00:00</updated>

<author><name><![CDATA[LosersJuegos]]></name></author>
<id>http://losersjuegos.com.ar/foro/feed.php?f=9&amp;t=170</id>
<entry>
<author><name><![CDATA[hugoruscitti]]></name></author>
<updated>2007-10-08T14:32:46+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=170&amp;p=590#p590</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=170&amp;p=590#p590"/>
<title type="html"><![CDATA[Empezando un juego]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=170&amp;p=590#p590"><![CDATA[
Hola, buen día. Tu mensaje me parece muy interesante, y está superbien<br />que sea amplio. No soy un experto en estos asuntos de diseño, pero creo que<br />puedo ayudar en algunas cosas.<br /><br /><blockquote><div><cite>kkmrmd escribió:</cite><br />...<br />conocéis algún recurso (léase manual,<br />libro, ejemplo comentado, tutorialweb...) que te explique como modular y<br />dividir un programa, y si está enfocado a los videojuegos mejor. Porque vamos,<br />la teoría creo que la tengo asimilada, aislar tipos de datos, crear una<br />interficie para poder comunicarte con ellos y bla bla, pero a la hora de hacer<br />el esqueleto y definir las funciones, sus parámetros para luego poder ser<br />expandidos me acaba saliendo mal. Tengo la impresión de que si pudiera definir<br />bien la estructura, lo que ha de hacer cada función ect luego implementarlo<br />sería bastante fácil.<br /></div></blockquote><br /><br />Sí, existe documentación donde se analizan muchas buenas soluciones de diseño<br />en la construcción de software. A grandes rasgos, en el diseño de programas<br />existen soluciones que han tenido mucho éxito y que resuelven requisitos que<br />se repiten constantemente. Esto a motivado a diversos analistas y<br />programadores a construir soluciones a estos problemas, y mejorarlas de modo<br />tal que se puedan utilizar una y otra vez en otros programas.<br /><br />Este concepto es muy útil, y recibe el nombre de &quot;patrones de diseño&quot;:<br /><br />    <!-- m --><a class="postlink" href="http://es.wikipedia.org/wiki/Patr%C3%B3n_de_dise%C3%B1o">http://es.wikipedia.org/wiki/Patr%C3%B3n_de_dise%C3%B1o</a><!-- m --><br /><br />Seguramente muchas de las cosas que te detienen en el desarrollo se pueden resolver <br />estudiando alguno de estos patrones. En la práctica, conociendo algo de patrones de <br />diseño te encuentras ante un problema y dices &quot;ah, aquí puedo usar el patrón de <br />nombre X&quot;... así, por lo menos tienes alguna estrategia para empezar... es algo. <br /><br />Observando tu mensaje completo creo que puedo dar un ejemplo de patrón de diseño<br />mas adelante...<br /><br />En lo personal, creo muchas veces la dificultad que los desarrolladores no<br />está en construir el programa sino en querer hacerlo lo 'mas' extensible y<br />configurable que se pueda. No creo que sea un buena idea, es interesante, pero<br />no conduce a muy buenos resultados:<br />    <br />    <!-- m --><a class="postlink" href="http://www.javahispano.org/contenidos/es/el_peligro_de_los_patrones/">http://www.javahispano.org/contenidos/e ... _patrones/</a><!-- m --><br /><br />Hay una idea muy interesante en el desarrollo de programas y recive el nombre<br />KISS (Keep It Short and Simple - aunque tiene otras traducciones...). La idea<br />es mantener tu desarrollo tan simple como sea posible, después de todo: tu<br />juego debería hacer lo que quieres, no el doble.<br /><br /><blockquote><div><cite>kkmrmd escribió:</cite><br />Así que acabo utilizando structs con<br />punteros a funciones para simular objetos con métodos.  Si no lo hago así, qué<br />maneras habría de poder tratar, por ejemplo, todos los disparos iguales,<br />teniendo en cuenta que el movimiento de cada disparo está definido por una<br />función? Y poner un enum que identifique el tipo de disparo para luego en la<br />función mover_disparos() { for(...) swhitch(disparo.tipo) { case...}} no creo<br />que vaya muy ligado con la idea de ser modular y poder definir nuevos disparos<br />de manera fácil.<br /></div></blockquote><br /><br />Es interesante, muchos aprendimos a utilizar C antes que C++, y en algún momento<br />nos sentimos mas cómodos con C. El punto es que si utilizas punteros a funciones<br />estas mucho mas familiarizado con C, y eso te de más confianza para elegirlo en<br />lugar de C++. Creo que ayudaría mucho a simplificar tu programa utilizar<br />directamente C++.<br /><br />Con respecto al ejemplo de los disparos, en la programación orientada a objetos<br />existe un concepto llamado &quot;Polimorfismo&quot; que te puede servir; la idea es simple, <br />consiste en definir una interfaz común entre muchos objetos, de forma que sea fácil<br />intercambiarlos.<br /><br />Por ejemplo, en tu juego puedes decir &quot;todos los personajes son objetos, y todos<br />los personajes tendrán un método llamado 'update'&quot;.<br /><br />Entonces, en el bucle principal del juego no debes preocuparte por que tipo de <br />objeto es cada cosa, simplemente llamas al método 'update' y te despreocupas por<br />como debe funcionar internamente. Cada objeto sabe, internamente, cual es su<br />comportamiento.<br /><br />Veamos un caso, ¿como funciona el asunto de los disparos?. Bien, tienes que crear <br />una clase para cada tipo de disparo, te propongo un ejemplo en código fuente<br />utilizando python, dado que me resulta mas sencillo de escribir...<br /><br /><dl class="codebox"><dt>Code: </dt><dd><code>class Disparo:<br /><br />    def __init__&#40;self, x, y&#41;:<br />        self.x, self.y = x, y          # define la posicion inicial<br />        self.image = load_image&#40;'disparo.png'&#41;<br /><br />    def update&#40;self&#41;:<br />        print &quot;Soy un disparo y avanzo siempre hacia la derecha&quot;<br />        self.x += 1<br /><br /><br />class Misil&#40;Disparo&#41;:                  # el misil 'hereda' del disparo<br /><br />    def __init__&#40;self, x, y, objetivo&#41;:<br />        Disparo.__init__&#40;self, x, y&#41;<br />        self.objetivo = objetivo<br /><br />    def update&#40;self&#41;:<br />        print &quot;Soy un misil y busco a mi objetivo&quot;<br />        angulo = self.obtener_angulo_hacia&#40;self.objetivo&#41;<br />        self.x += cos&#40;self.angulo&#41; * 5<br />        self.y += sin&#40;self.angulo&#41; * 5<br /><br />    def obtener_angulo_hacia&#40;self, objetivo&#41;:<br />        # algún cálculo para saber el ángulo hacia un enemigo<br />        # ...<br />        pass<br /></code></dd></dl><br /><br />Entonces, tenemos dos tipos de Objetos para un videojuego de disparos: Un<br />'misil' que busca a su enemigo y un 'disparo' muy simple, que avanza en todo<br />momento en linea recta.<br /><br />Luego, puedes crear objetos a partir de cada una de estas clases. Cada objeto<br />se comportará tal y como hemos definido en los métodos de su clase.<br /><br /><dl class="codebox"><dt>Code: </dt><dd><code>&gt;&gt; a = Disparo&#40;20, 30&#41;<br />&gt;&gt; a.update&#40;&#41;<br />&quot;Soy un disparo y avanzo siempre hacia la derecha&quot;<br /><br />&gt;&gt; b = Misil&#40;20, 30, base_enemiga&#41;<br />&gt;&gt; b.update&#40;&#41;<br />&quot;Soy un misil y busco a mi objetivo&quot;<br /></code></dd></dl><br /><br />Es decir, el &quot;Disparo&quot; se comporta diferente al &quot;Misil&quot;; aunque esto no lo<br />hace mas complicado, desde &quot;afuera&quot; ambos tienen un método &quot;update&quot; y se<br />pueden tratar de la misma manera:<br /><br /><dl class="codebox"><dt>Code: </dt><dd><code># creamos los disparos<br /><br />ataque = &#91;Disparo&#40;40, 40&#41;, Misil&#40;30, 40, base_enemigo&#41;, Disparo&#40;20, 40&#41;&#93;<br /><br />while True:<br />    for a in ataque:             # recorremos la lista actualizando todo<br />        a.update&#40;&#41;<br /><br />    print &quot;--&quot;<br /></code></dd></dl><br /><br />hacemos una lista y colocamos varios 'disparos' y un 'misil', luego podemos<br />despreocuparnos por que es cada cosa. El anterior programa imprime lo<br />siguiente en pantalla:<br /><br /><dl class="codebox"><dt>Code: </dt><dd><code>Soy un disparo y avanzo siempre hacia la derecha<br />Soy un misil y busco a mi objetivo<br />Soy un disparo y avanzo siempre hacia la derecha<br />--<br />Soy un disparo y avanzo siempre hacia la derecha<br />Soy un misil y busco a mi objetivo<br />Soy un disparo y avanzo siempre hacia la derecha<br />--<br />Soy un disparo y avanzo siempre hacia la derecha<br />...<br /></code></dd></dl><br /><br />Para resumir, si los elementos de tu juego se deben comportar diferente, debes<br />crear clases distintas para representarlos. Cuando invocas a un método de un<br />objeto será el lenguaje quien se encarga de 'encontrar' el código a ejecutar;<br />esto ayuda mucho...<br /><br /><blockquote><div><cite>kkmrmd escribió:</cite><br />No queda muy elegante eso de hacer struct con métodos,<br />sobretodo porque los métodos y atributos estáticos no me quedan transparentes<br />(usando macros podría, pero no me acaba de gusta ésta solucion)....<br /></div></blockquote><br /><br />Es comprensible que sientas mas &quot;comodidad&quot; utilizando C que C++, le ocurre a<br />muchos programadores. El punto es que C tiene reglas de funcionamiento mas <br />simples que C++, quiero decir, tiene menos palabras reservadas y una sintaxis<br />con menos 'excepciones a la regla'.<br /><br />Por lo tanto si conoces punteros, punteros a funciones y <br />comprendes como funcionan los tipos de datos. Es probable que puedas resolver<br />casi todo con C.<br /><br />Personalmente considero que no existe un lenguaje mejor a otro, en todo caso<br />debemos observar el tipo de proyecto que tenemos en mente y elegir el<br />lenguaje que consideramos mas &quot;conveniente&quot;.<br /><br />Si aceptas una recomendación de mi parte, yo elegiría 'python'. Y en raras<br />ocasiones C++ o C (generalmente si el programa es muy intensivo y requiere<br />muchas velocidad).<br /><br /><blockquote><div><cite>kkmrmd escribió:</cite><br />Ya que he escrito bastante hago aún dos preguntillas más, en todos los juegos<br />que he visto en el loopgame pueden llamar tanto a métodos del juego, como del<br />menu ect dependiendo de el estado del juego, realmente no hay alguna otra<br />manera de separar realmente menus de antes del juego, la configuración, con el<br />juego propiamente dicho?<br /></div></blockquote><br /><br />Sí, a veces, cuando el juego es algo complejo y se requiere algo de flexibilidad<br />se puede utilizar el concepto de &quot;Escena&quot;:<br /><br />Cada estado del juego queda representado por un objeto &quot;Escena&quot;: el menú, la <br />pantalla de opciones, el juego. etc.<br /><br />Siguiendo esta estrategia se deben construir las escenas de modo tal que<br />puedan se intercambiadas con facilidad. Veamos como se observa desde afuera:<br /><br /><dl class="codebox"><dt>Code: </dt><dd><code>escena = Menu&#40;&#41;<br /><br />while True:<br />    escena.update&#40;&#41;<br />    escena.draw&#40;screen&#41;<br />    clock.tick&#40;30&#41;<br /></code></dd></dl><br /><br />la primer parte del código genera un objeto &quot;Menu&quot; junto a una referencia.<br />Unas lineas mas abajo está el bucle de juego, aquí no nos importa como<br />funciona el objeto apuntado por la variable &quot;escena&quot;, solo nos interesa que<br />tenga los métodos &quot;update&quot; y &quot;draw&quot;.<br /><br />Ahora, si queremos pasar de la escena &quot;menu&quot; a la selección de jugadores<br />hacemos esto (en cualquier otra parte del programa):<br /><br /><dl class="codebox"><dt>Code: </dt><dd><code>escena = PlayerSelect&#40;&#41;<br /></code></dd></dl><br /><br />el bucle principal seguirá funcionado sin problemas, aunque se comportará un<br />poquito diferente. Ya que 'escena.update()' ahora significa otra cosa.<br /><br />Aquí tienes un dibujo de las clases hecho con el programa <br />&quot;gaphor&quot;:<br /><br /><img src="http://www.losersjuegos.com.ar/incoming/descargas/20071008/escenas.png" alt="Imagen" /><br /><br /><br />Esta solución se denomina 'patrón estategía', y suelo utilizarla para<br />controlar los estados de los personajes en un juego y las escenas:<br /><br />    <!-- m --><a class="postlink" href="http://www.javahispano.org/contenidos/es/el_patrn_estrategia/">http://www.javahispano.org/contenidos/e ... strategia/</a><!-- m --><br /><br />Generalmente existe un objeto encargado de contener el bucle principal del<br />juego. Es aconsejable que cada escena a su vez conozca a este objeto, así puede <br />ordenarle cambiar de escenas. Por ejemplo, el 'menú' puede cambiar a la escena <br />'jugar' y 'jugar' a la escena 'gameover' y 'gameover' a 'menú'. Después de todo <br />es solo una asignación (o mejor un método)...<br /><br />Hacer todo esto con C++, en lugar de Python, es un poco mas<br />complicado: todas las escenas deben heredar de una misma<br />clase (digamos &quot;escena&quot;, abstracta, y con métodos virtuales). Y <br />el puntero que señala a la escena actual debe ser de tipo &quot;puntero<br />a escena&quot;. Luego, con este puntero puedes señalar a cualquier<br />objeto que hereda de escena: &quot;Menu&quot;, &quot;Opciones&quot; etc.<br /><br /><blockquote><div><cite>kkmrmd escribió:</cite><br />Bueno, no molesto más, si alguien me lee ya le estaré agradecido, y si responde aún más.<br /></div></blockquote><br /><br />No es molestia, por favor, he disfrutado mucho leyendo tu mensaje y tratando de<br />encontrar la manera de explicar mi punto de vista. Aunque no se si lo he<br />logrado...<br /><br />Mucha suerte.<br /><br />PD 1: ¡ Los mensajes extensos son mis favoritos !<br />PD 2: ¿tienes algunos mini-juegos realizados?, casualmente losersjuegos necesita mas <br />      programillas para la sección 'ejemplos' <img src="http://losersjuegos.com.ar/foro/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=3">hugoruscitti</a> — Lun Oct 08, 2007 2:32 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[carleto]]></name></author>
<updated>2007-10-07T22:36:12+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=170&amp;p=588#p588</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=170&amp;p=588#p588"/>
<title type="html"><![CDATA[Empezando un juego]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=170&amp;p=588#p588"><![CDATA[
Hola<br /><br />Yo también soy novato en esto de los juegos, y como tú, siempre ha sido C mi lenguaje preferido. Pero me parece que C++ es muy adecuado para hacer juegos, así que también me he puesto manos a la obra a aprender C++.<br /><br />Ahora mismo tengo casi terminado un pequeño juego (de marcianitos) y lo estoy haciendo en C++, vale que me está costando bastante esfuerzo pero creo que al final merecerá la pena aprender C++.<br /><br />Yo te animaría a que le eches un vistazo a C++.<br /><br />En cuanto a lo de las variables globales, supongo que cada uno tiene sus costumbres, a mi no me gustan mucho y es muy raro que las use, en el juego que estoy haciendo no tengo ninguna variable global.<br /><br />Saludos<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=1805">carleto</a> — Dom Oct 07, 2007 10:36 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[josepil]]></name></author>
<updated>2007-10-07T21:16:24+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=170&amp;p=587#p587</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=170&amp;p=587#p587"/>
<title type="html"><![CDATA[respondienote]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=170&amp;p=587#p587"><![CDATA[
bueno pues yo tengo poca experiencia en esto pero mira lo que tu quieres hacer se realiza facilmente en c++ y no importa se no estas familiarizado puesto que la mayoria de los compiladores soportan a c y solo tendrias que usar muy pocas cosas de c++ por ejemplo sobrecarga funciones virtuales y yap con eso se termina todo el problema con eso tu programa queda como una plastilina averigua un poco sobre esto y ya esta sino prueba con las listas y aunqeu no son tan variables te pueden servir para tu objetivo espero te haya ayudado en algo<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=1819">josepil</a> — Dom Oct 07, 2007 9:16 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[julen26]]></name></author>
<updated>2007-10-04T09:26:16+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=170&amp;p=586#p586</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=170&amp;p=586#p586"/>
<title type="html"><![CDATA[Empezando un juego]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=170&amp;p=586#p586"><![CDATA[
Bueno, me e leido todo, y tardado algo en hacerlo jej.<br /><br />Seré breve, yo a este mundo llegue despues de estar un tiempo metido en el GameMaker, con el cual e logrado tener experiencia en la creacion de juegos, en general. <br /><br />Y por eso me gustaría recomendarte un articulo que escribió el creador de este programa, y en realidad a sido útil para todo tipo de programadores de un juego, no importa el mètodo, lenguaje o demas.<br /><br />Se llama &quot;Que es un buen juego&quot; y comenta los aspectos de un juego, comparandolos con otros. Te ayudará y es interesante. Te lo e subido aquí, esta traducido:<br /><br /><!-- m --><a class="postlink" href="http://www.savefile.com/files/1099481">http://www.savefile.com/files/1099481</a><!-- m --><br /><br />Ademas de esto también me gustaria que entraras en <!-- m --><a class="postlink" href="http://www.gamedev.net/reference/">http://www.gamedev.net/reference/</a><!-- m --> y miraras todos los articulos que hay, muchos estan en diferentes idiomas y son muy úiles, sino habrá que darle uso al ingles.<br /><br />Si vas mirando por el final veras uno que es el desarrollo de juegos en general! navega un poco.<br /><br />saludos<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=1416">julen26</a> — Jue Oct 04, 2007 9:26 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Juan Carlos]]></name></author>
<updated>2007-10-03T23:28:40+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=170&amp;p=585#p585</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=170&amp;p=585#p585"/>
<title type="html"><![CDATA[Empezando un juego]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=170&amp;p=585#p585"><![CDATA[
Puff, mucho texto.<br /><br />En fin, con respecto a la programacion estructurada, la idea es dado un problema dificil de resolver (un juego), dividir el problema en varios problemas mas faciles de resolver (crear un enemigo, mover al enemigo, crear un disparo, etc). Estos problemas se pueden dividir a su vez en problemas mas chicos, una y otra vez, creando asi  funciones especificas. <br />Lo util de este metodo es que puedes armarte pequeños programas e ir probando esta funciones. Te suguiero que antes de juntar todas las funciones y armar el juego, pruebes por separado cada funcion. <br /><br />Con respecto a la POO, te sugiero que uses C++ ya que tiene una sintaxis practicamente igual a la de C. <br /><br />En el tema de variables globales, solo usalas si son usadas por el 99.99% de tus funciones. La superficie principal (screen) de SDL suele ser el unico caso en que es valido usar una variable global. Para otros casos usa variables locales.<br /><br />Saludos<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=1787">Juan Carlos</a> — Mié Oct 03, 2007 11:28 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kkmrmd]]></name></author>
<updated>2007-10-03T17:44:23+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=170&amp;p=584#p584</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=170&amp;p=584#p584"/>
<title type="html"><![CDATA[Empezando un juego]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=170&amp;p=584#p584"><![CDATA[
Hola, nunca antes había posteado, pero la página si la había visitado. Dicho esto entro en materia.<br /><br />Después de hacer mis minijuegos de rigor: un pang, un pilla-pilla, un juego de navecillas cutres y algunas cositas de poca importancia, y ya familiarizado con las SDL, almenos lo más básico, quiero hacer algo de más peso.<br />El problema es que no paso de la etapa de &quot;diseño&quot;, me explico: cuando hago los ejemplos o leo los tutoriales siempre se hacen juegos muy limitados, no pensados para ser ampliados, configurados ect. Cuando tengo en mente un juego intento hacer la estructura en módulos, que tipos de datos usaré y tal y cual, intentando que sean lo más genéricos posibles para poderse cambiar o ampliarse con archivos de configuración y no tocando el código. Pero llegados a este punto siempre me acabo desbordando debido a cosas que no están bien, vuelvo a empezar de 0 intentado corregir los errores, pero acabo irremediablemente por una cosa u otra en el mismo sitio.<br />No sé muy bien cómo explicarlo, mirando los foros y tal normalmente se preguntan cosas concretas y específicas, por resumirlo de una manera: conocéis algún <span style="font-style: italic">recurso</span> (léase manual, libro, ejemplo comentado, tutorialweb...) que te explique como modular y dividir un programa, y si está enfocado a los videojuegos mejor. Porque vamos, la teoría creo que la tengo asimilada, aislar tipos de datos, crear una interficie para poder comunicarte con ellos y bla bla, pero a la hora de hacer el esqueleto y definir las funciones, sus parámetros para luego poder ser expandidos me acaba saliendo mal. Tengo la impresión de que si pudiera definir bien la estructura, lo que ha de hacer cada función ect luego implementarlo sería bastante fácil.<br /><br /><br />La verdad es que después de haber intentado hacer algunas cosas sin mucho éxito tengo bastantes dudas, pero me limitaré a poner las que tienen un poco relación con el tema.<br />Aunque el problema de modular un programa es genérico y no depende mucho del lenguaje de programación tengo algunas dudillas sobre la mejor manera de utilizar C y si es conveniente en depende de que casos utilizarlo. Aunque en los juegos está claro que la OOP ayuda mucho, no me atrevo a meterme con C++, todo y tener un nivel más básico; conozco la STL bastante, definir clases, trabajar con objetos, iteradores y toda la pesca, me siento más cómodo en C y me gusta más. Así que acabo utilizando structs con punteros a funciones para simular objetos con métodos.<br />Si no lo hago así, qué maneras habría de poder tratar, por ejemplo, todos los disparos iguales, teniendo en cuenta que el movimiento de cada disparo está definido por una función? Y poner un enum que identifique el tipo de disparo para luego en la función mover_disparos() { for(...) swhitch(disparo.tipo) { case...}} no creo que vaya muy ligado con la idea de ser modular y poder definir nuevos disparos de manera fácil.<br />No queda muy elegante eso de hacer struct con métodos, sobretodo porque los métodos y atributos estáticos no me quedan transparentes (usando macros podría, pero no me acaba de gusta ésta solucion). Y cómo no soy un entendido en OOP (principal razón para no usar C++) no hago cosas raras en tiempo de ejecucción y tal, así que para heréncias me basta y sobra los structs. Pero quizás me vendría mejor usar C++? Me gustaría saber opiniones de alguien que esté un poco más metido en el tema y con experiencia.<br /><br /><br />Ya que he escrito bastante hago aún dos preguntillas más, en todos los juegos que he visto en el loopgame pueden llamar tanto a métodos del juego, como del menu ect dependiendo de el estado del juego, realmente no hay alguna otra manera de separar realmente menus de antes del juego, la configuración, con el juego propiamente dicho? Y para acabar, viendo códigos también ajenos, veo que usan bastantes variables globales, supongo que para el estado del juego, el screen ect. es normal, pero hasta que punto se puede llegar? Por ejemplo, en un juego de navecitas, sería bueno tener el conjunto de disparos, naves en variables globales? No acaba siendo contraproducente? Para un juego sencillo vale, pero si luego cambias algo afectará bastante.<br /><br />Bueno, no molesto más, si alguien me lee ya le estaré agradecido, y si responde aún más.<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=1824">kkmrmd</a> — Mié Oct 03, 2007 5:44 pm</p><hr />
]]></content>
</entry>
</feed>