<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="es">
<link rel="self" type="application/atom+xml" href="http://losersjuegos.com.ar/foro/feed.php?f=4&amp;t=1133" />

<title>LosersJuegos</title>
<subtitle>Desarrollando videojuegos libres</subtitle>
<link href="http://losersjuegos.com.ar/foro/index.php" />
<updated>2011-05-02T16:52:18+00:00</updated>

<author><name><![CDATA[LosersJuegos]]></name></author>
<id>http://losersjuegos.com.ar/foro/feed.php?f=4&amp;t=1133</id>
<entry>
<author><name><![CDATA[luisalbert]]></name></author>
<updated>2011-05-02T16:52:18+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=1133&amp;p=5477#p5477</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=1133&amp;p=5477#p5477"/>
<title type="html"><![CDATA[atrapame si puedes]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=1133&amp;p=5477#p5477"><![CDATA[
buen dia a todos los fanaticos de la programacion, hoy quiero despues de mucho pasear por loosersjuegos.com.ar dejar algo de lo que me han dado, he aprendido desde la instalacion de SDL hasta el trabajo con graficos moviendo imagenes y algunas cosillas mas, he creado un videojuego para una materia, la cosa es que sirve teniendo como jugadores solo a la cpu vs la CPU, es decir el usuario solo puede colocar el dedo en la flecha arriba para ejecutar el siguiente comando, se que les sera de ayuda a aquellos que estan empezando, aun no lo termino, pues me han colocado de tarea cambiar alguna cosilla por una lista enlazada, cosa que me ha resultado un poco complicada, mas sin embargo les dejare algo acerca de como funciona el video juego, las imagenes y el codigo fuente, ademas si alguien me explica como puedo hacer la lista enlazada ó lista encadenada les agradeceré.<br /> imagenes:<a href="http://www.facebook.com/media/set/fbx/?set=a.1354381197591.40718.1773298651&amp;l=ad16da3fba" class="postlink">http://www.facebook.com/media/set/fbx/?set=a.1354381197591.40718.1773298651&amp;l=ad16da3fba</a><br /><br />pido excusas por aquello de la privacidad, pero he creado una cuanta para colocar imagenes en facebook, de este mdo mis imagenes estan ahi y de alli las descargo.<br /><br />el juego se trata de una liebre que quiere atravezar un bosque y 4 lobos no desean quedarce sin almuerzo, el bosque es un tablero de ajedrez y cada animal puede moverce solo por los cuadros blancos uno en diagonal a la vez, la liebre no es tonta así que no se puede lanzar al lobo, los lobos no saben donde esta la liebre asi que avanzan aleatoriamente un cuadro hacia arriba mientras la liebre lo hace hacia abajo, cada vez que un lobo juega se imprime en pantalla quien jugó y el orden de los siguientes lobos, es decir si juega el lobo3 la lista es así 3 4 1 2, pero si juega el lobo4 la lista es 4 1 2 3 y debe ser así siempre, tambien se muesttra que la liebre jugó, otra cosa es  que cuando alguien gana se muestra quien ganó, me falta colocar en cuantos turnos, ademas tengo que colocar el cuadro donde alguno de ellos pasó pero aun no lo he hecho.<br /><br />tengo que hacer varias modificaciones pero ya lo hare antes de terminar este mes (si no no aprovaré la materia jejejeje) bueno aqui les dejó el codigo desde colombia y un fuerte abrazo a aquellos que brindan de su consejo y ayuda a los que estamos aprendiendo.<br /><br />dejo un link en youtube.com de como se ve el video juego.<br /><a href="http://www.youtube.com/watch?v=hq_ethJ0Dxc" class="postlink">http://www.youtube.com/watch?v=hq_ethJ0Dxc</a><br /><br />un poco de codigo: y para la seleccion de imagenes fijense en colocar las que mas os guste, claro viendo los nombres, ya sean los que coloque o los que le tengan a sus imagenes.<br /><br />el audio esta comentado porque no encuentro una pista acorde para hacerlo funcionar.<br /><br /><pre class="prettyprint">#include &lt;stdio.h&gt;<br />#include &lt;stdlib.h&gt;<br />#include &lt;SDL/SDL.h&gt;<br />#include &lt;SDL/SDL_image.h&gt;<br />#include &lt;iostream&gt;<br />#include &lt;string&gt;<br />#include &lt;time.h&gt;<br />/*#include &lt;SDL/SDL_mixer.h&gt;*/<br /><br /><br />using namespace::std;<br /><br />int main&#40;int  argc, char *argv[]&#41;<br />{<br /><br />  <br />void limpiar &#40;SDL_Surface *screen&#41;;<br />void imprimir&#40;SDL_Surface *vector_lobo1,SDL_Surface *vector_lobo2,SDL_Surface *vector_lobo3,SDL_Surface *vector_lobo4,int vector1,SDL_Surface *turno,SDL_Surface *screen, SDL_Surface *ima, SDL_Surface *liebre, SDL_Surface *lobo1, SDL_Surface *lobo2, SDL_Surface *lobo3,  SDL_Surface *lobo4, int *nivel_liebre, int *pos_liebre, int x, int y, int *pos_lobo1, int *nivel_lobo1, int *pos_lobo2, int *nivel_lobo2, int *pos_lobo3, int *nivel_lobo3, int *pos_lobo4, int *nivel_lobo4&#41;;<br />int fun_liebre&#40;SDL_Surface *liebre,int f,int *nivel_liebre, int *pos_liebre&#41;;<br />int fun_lobo1&#40; int *nivel_lobo1, int *pos_lobo1&#41;;<br />int fun_lobo2&#40; int *nivel_lobo2, int *pos_lobo2&#41;;<br />int fun_lobo3&#40; int *nivel_lobo3, int *pos_lobo3&#41;;<br />int fun_lobo4&#40; int *nivel_lobo4, int *pos_lobo4&#41;;<br />int turnoliebre&#40;SDL_Surface *screen,SDL_Surface *liebre,int f,  int vector1, int *nivel_liebre, int *pos_liebre,int *pos_lobo1 ,int *pos_lobo2 ,int *pos_lobo3 ,int *pos_lobo4, int *nivel_lobo1, int *nivel_lobo2, int *nivel_lobo3, int *nivel_lobo4&#41;;<br />int turnolobo&#40;int f,int x, int y,SDL_Surface *lobo1,SDL_Surface *lobo2,SDL_Surface *lobo3,SDL_Surface *lobo4,SDL_Surface *screen,SDL_Surface *vector_lobo1,SDL_Surface *vector_lobo2,SDL_Surface *vector_lobo3,SDL_Surface *vector_lobo4,   int vector1, int *nivel_lobo1, int *pos_lobo1, int *nivel_lobo2, int *pos_lobo2,int *nivel_lobo3, int *pos_lobo3,int *nivel_lobo4, int *pos_lobo4, int *vector&#41;;<br />int ganador&#40;int salir,int *loboganador,SDL_Surface *screen,int f,  int vector1, int *nivel_liebre, int *pos_liebre,int *pos_lobo1, int *pos_lobo2 ,int *pos_lobo3 ,int *pos_lobo4 ,int *nivel_lobo1,int *nivel_lobo2,int *nivel_lobo3,int *nivel_lobo4&#41;;<br /><br />  <br />  srand&#40;time&#40;0&#41;&#41;;<br />SDL_Surface *screen;<br />SDL_Surface *ima;<br />SDL_Surface *liebre;<br />SDL_Surface *lobo1;<br />SDL_Surface *lobo2;<br />SDL_Surface *lobo3;<br />SDL_Surface *lobo4;<br />  SDL_Surface *vector_lobo1;<br />  SDL_Surface *vector_lobo2;<br />  SDL_Surface *vector_lobo3;<br />  SDL_Surface *vector_lobo4;<br />  SDL_Surface *gana_lobo;<br />  SDL_Surface *gana_liebre;<br />  SDL_Surface *turno;<br />//  SDL_Surface **vector;<br />  <br />  int dado=rand&#40;&#41;%1000;  <br />  cout&lt;&lt;&quot;dado=&quot;&lt;&lt;dado&lt;&lt;endl;  //decide quien comienza la partida<br />  int vector1;<br />  int *g;<br />  int *vector;<br />  int *nivel_liebre;<br />  int *pos_liebre;<br />  int *pos_lobo1;<br />  int *nivel_lobo1;<br />  int *pos_lobo2;<br />  int *nivel_lobo2;<br />  int *pos_lobo3;<br />  int *nivel_lobo3;<br />  int *pos_lobo4;<br />  int *nivel_lobo4;<br />  int *loboganador;<br />  <br />//****************************************************************************************************************************************  <br />  struct coordenadas_lobo<br />  {<br />  int nivellobo;<br />  int poslobo;<br />  struct coordenadas_lobo *siguiente;<br />  } *clobo1, *clobo2, *clobo3, *clobo4;<br />  <br />  clobo1=new struct coordenadas_lobo;<br />  clobo2=new struct coordenadas_lobo;<br />  clobo3=new struct coordenadas_lobo;<br />  clobo4=new struct coordenadas_lobo;<br />  <br />  &#40;*clobo1&#41;.nivellobo=7;<br />  &#40;*clobo1&#41;.poslobo=0;<br />  &#40;*clobo2&#41;.nivellobo=7; <br />  &#40;*clobo2&#41;.poslobo=2;<br />  &#40;*clobo3&#41;.nivellobo=7; <br />  &#40;*clobo3&#41;.poslobo=4;<br />  &#40;*clobo4&#41;.nivellobo=7; <br />  &#40;*clobo4&#41;.poslobo=6;<br />  <br />  pos_lobo1=   &amp;&#40;*clobo1&#41;.poslobo;<br />  nivel_lobo1= &amp;&#40;*clobo1&#41;.nivellobo;<br />  pos_lobo2=   &amp;&#40;*clobo2&#41;.poslobo;<br />  nivel_lobo2= &amp;&#40;*clobo2&#41;.nivellobo;<br />  pos_lobo3=   &amp;&#40;*clobo3&#41;.poslobo;<br />  nivel_lobo3= &amp;&#40;*clobo3&#41;.nivellobo;<br />  pos_lobo4=   &amp;&#40;*clobo4&#41;.poslobo;<br />  nivel_lobo4= &amp;&#40;*clobo4&#41;.nivellobo;<br />  <br />  loboganador=&amp;vector1;<br /> //**********************************************************************************************************************************************************************  <br />  struct coordenadas_liebre <br />  {<br />  int nivelliebre;  //coordenada y<br />  int posliebre;  // coordenada x<br />  struct coordenadas_liebre *siguiente;<br />  }*cliebre;<br />  <br />  cliebre=new struct coordenadas_liebre;<br />  <br />   &#40;*cliebre&#41;.posliebre=rand&#40;&#41;%8;  // coordenada x<br />   &#40;*cliebre&#41;.nivelliebre=rand&#40;&#41;%6 ;  //coordenada y <br /> <br />  pos_liebre=&amp;&#40;*cliebre&#41;.posliebre;  //inicializar los apuntadores que tendran la posicion de las imagenes<br />  nivel_liebre=&amp;&#40;*cliebre&#41;.nivelliebre;<br /> //**********************************************************************************************************************************************************************************************************************************************************  <br />  <br />/*Mix_Music *cancion; */<br />SDL_Event event;<br />/*eventos*/<br /><br />int salir = 0;<br />int x = 0;<br />int y = 0;<br />int i = 0;<br />int j = 0;<br />int f=0;<br />  int a=0;<br />  <br />  SDL_Rect rect;<br /><br />//********************************************************************************************************************************************************************************************************************************************************** <br />//arreglos dinamicos<br />int *posliebre1;<br />posliebre1=new int[8];<br />  if&#40;posliebre1==NULL&#41;{cout&lt;&lt;&quot;no hay espacio Disponible&quot;;}  <br />  for &#40;i=0; i&lt;8; i++, posliebre1++ &#41; {<br />  *posliebre1 = i*53+5;<br />  cout&lt;&lt;*posliebre1&lt;&lt;endl;<br />  }<br />//********************************************************************************************************************************************************************************************************************************************************** <br />  if&#40;*pos_liebre==7&#41;<br />     {*pos_liebre-=1;}<br />  int e= *pos_liebre + *nivel_liebre;<br />  cout&lt;&lt;&quot;e=&quot;&lt;&lt;e&lt;&lt;&quot; *pos_liebre=&quot;&lt;&lt;*pos_liebre&lt;&lt;&quot; *nivel_liebre=&quot;&lt;&lt;*nivel_liebre&lt;&lt;endl;<br />if&#40;e%2==0&#41;{<br />  cout&lt;&lt;&quot;e=&quot;&lt;&lt;e&lt;&lt;&quot; *pos_liebre=&quot;&lt;&lt;*pos_liebre&lt;&lt;&quot; *nivel_liebre=&quot;&lt;&lt;*nivel_liebre&lt;&lt;&quot; en el if&quot;&lt;&lt;endl;<br />  *pos_liebre+=1;  //verificando que no caiga la liebre en un cuadro que no le corresponde &#40;negro&#41;<br />  cout&lt;&lt;&quot;e=&quot;&lt;&lt;e&lt;&lt;&quot; *pos_liebre=&quot;&lt;&lt;*pos_liebre&lt;&lt;&quot; *nivel_liebre=&quot;&lt;&lt;*nivel_liebre&lt;&lt;&quot; saliendo del if&quot;&lt;&lt;endl;<br />  }<br />  <br />//********************************************************************************************************************************************************************************************************************************************************** <br />if &#40;dado%2==0&#41; //random hasta 2 cae casi siempre en 0, por tanto así se evita el minimo en valores<br />{dado=0;}<br />else<br />{dado=1;};<br />//********************************************************************************************************************************************************************************************************************************************************** <br />if &#40;SDL_Init&#40;SDL_INIT_VIDEO&#41;&#41;  /*| SDL_INIT_AUDIO&#41; == -1&#41;*/<br />{<br />printf&#40;&quot;Error: %s\n&quot;, SDL_GetError&#40;&#41;&#41;;<br />return 1;<br />}<br /><br />if &#40;screen == NULL&#41; <br />{<br />printf&#40;&quot;Error: %s\n&quot;, SDL_GetError&#40;&#41;&#41;;<br />return 1;<br />}<br />//**********************************************************************************************************************************************************************************************************************************************************<br />/*if &#40;Mix_OpenAudio&#40;44100, MIX_DEFAULT_FORMAT, 2, 1024&#41; == -1&#41;<br />{<br />printf&#40;&quot;Error en Mix_OpenAudio: %s\n&quot;, Mix_GetError&#40;&#41;&#41;;<br />return 1;<br />}*/<br /> //**********************************************************************************************************************************************************************************************************************************************************<br />SDL_WM_SetCaption&#40;&quot;Atrapame si puedes&quot;, NULL&#41;;<br />// /**********************************************************************************************************************************************************************************************************************************************************<br />ima = IMG_Load&#40;&quot;imagenes/ajedrez.bmp&quot;&#41;;<br /><br />if &#40;ima == NULL&#41;<br />{<br />printf&#40;&quot;Error en IMG_Load= %s\n&quot;, SDL_GetError&#40;&#41;&#41;;<br />return 1;<br />}<br /> //**********************************************************************************************************************************************************************************************************************************************************<br />liebre = IMG_Load&#40;&quot;imagenes/liebre.png&quot;&#41;;<br /><br />if &#40;liebre == NULL&#41;<br />{<br />printf&#40;&quot;Error en IMG_Load= %s\n&quot;, SDL_GetError&#40;&#41;&#41;;<br />return 1;<br />}<br /> //**********************************************************************************************************************************************************************************************************************************************************<br />lobo1 = IMG_Load&#40;&quot;imagenes/lobo.png&quot;&#41;;<br /><br />if &#40;lobo1 == NULL&#41;<br />{<br />printf&#40;&quot;Error en IMG_Load= %s\n&quot;, SDL_GetError&#40;&#41;&#41;;<br />return 1;<br />}<br /> //**********************************************************************************************************************************************************************************************************************************************************  <br />lobo2 = IMG_Load&#40;&quot;imagenes/lobo2.png&quot;&#41;;<br /><br />if &#40;lobo2 == NULL&#41;<br />{<br />printf&#40;&quot;Error en IMG_Load= %s\n&quot;, SDL_GetError&#40;&#41;&#41;;<br />return 1;<br />}<br /> //**********************************************************************************************************************************************************************************************************************************************************  <br />  lobo3 = IMG_Load&#40;&quot;imagenes/lobo3.png&quot;&#41;;<br /><br />if &#40;lobo3 == NULL&#41;<br />{<br />printf&#40;&quot;Error en IMG_Load= %s\n&quot;, SDL_GetError&#40;&#41;&#41;;<br />return 1;<br />}<br /> //**********************************************************************************************************************************************************************************************************************************************************  <br /> <br /> lobo4 = IMG_Load&#40;&quot;imagenes/lobo4.png&quot;&#41;;<br /><br />if &#40;lobo4 == NULL&#41;<br />{<br />printf&#40;&quot;Error en IMG_Load= %s\n&quot;, SDL_GetError&#40;&#41;&#41;;<br />return 1;<br />}<br /><br /> //**********************************************************************************************************************************************************************************************************************************************************<br />vector_lobo1 = IMG_Load&#40;&quot;imagenes/v1.bmp&quot;&#41;;<br /><br />if &#40;vector_lobo1 == NULL&#41;<br />{<br />printf&#40;&quot;Error en IMG_Load= %s\n&quot;, SDL_GetError&#40;&#41;&#41;;<br />return 1;<br />}<br /> //**********************************************************************************************************************************************************************************************************************************************************<br />vector_lobo2 = IMG_Load&#40;&quot;imagenes/v2.bmp&quot;&#41;;<br /><br />if &#40;vector_lobo2 == NULL&#41;<br />{<br />printf&#40;&quot;Error en IMG_Load= %s\n&quot;, SDL_GetError&#40;&#41;&#41;;<br />return 1;<br />}<br /> //**********************************************************************************************************************************************************************************************************************************************************<br />vector_lobo3 = IMG_Load&#40;&quot;imagenes/v3.bmp&quot;&#41;;<br /><br />if &#40;vector_lobo3 == NULL&#41;<br />{<br />printf&#40;&quot;Error en IMG_Load= %s\n&quot;, SDL_GetError&#40;&#41;&#41;;<br />return 1;<br />}<br /> //**********************************************************************************************************************************************************************************************************************************************************<br />vector_lobo4 = IMG_Load&#40;&quot;imagenes/v4.bmp&quot;&#41;;<br /><br />if &#40;vector_lobo4 == NULL&#41;<br />{<br />printf&#40;&quot;Error en IMG_Load= %s\n&quot;, SDL_GetError&#40;&#41;&#41;;<br />return 1;<br />}<br /> <br /> //**********************************************************************************************************************************************************************************************************************************************************<br />turno = IMG_Load&#40;&quot;imagenes/turno.bmp&quot;&#41;;<br /><br />if &#40;turno == NULL&#41;<br />{<br />printf&#40;&quot;Error en IMG_Load= %s\n&quot;, SDL_GetError&#40;&#41;&#41;;<br />return 1;<br />}<br /> <br /> //**********************************************************************************************************************************************************************************************************************************************************<br /><br />  screen = SDL_SetVideoMode&#40; 530, 487, 16, SDL_HWSURFACE | SDL_DOUBLEBUF&#41;;<br />  if&#40;screen == NULL&#41; {<br />  printf&#40; &quot;Error al entrar a modo grafico: %s\n&quot;, SDL_GetError&#40;&#41; &#41;;<br />  SDL_Quit&#40;&#41;;<br />  return -1;<br />  }<br />//**********************************************************************************************************************************************************************************************************************************************************  <br />/*cancion = Mix_LoadMUS&#40;&quot;sonido/cancion.xm&quot;&#41;;<br /><br />if &#40;!cancion&#41;<br />printf&#40;&quot;Error en Mix_LoadMUS: %s\n&quot;, Mix_GetError&#40;&#41;&#41;;<br /><br />if &#40;cancion&#41;<br />{<br />if &#40;Mix_PlayMusic&#40;cancion, -1&#41; == -1&#41;<br />printf&#40;&quot;Error en Mix_PlayMusic: %s\n&quot;, Mix_GetError&#40;&#41;&#41;;<br />}*/<br /> //**********************************************************************************************************************************************************************************************************************************************************<br /><br />while &#40;salir==0&#41;<br />{<br />SDL_PollEvent&#40;&amp;event&#41;;<br /><br />if &#40;event.type == SDL_QUIT&#41;<br />{salir = 1;}<br />  /* ajustar la teclaflecha arriba para ser la unica en funcionar */<br /><br />  // Cerrar la ventana<br />  if &#40;event.type == SDL_QUIT&#41; {<br />  // código que se ejecuta al cerrar la ventana<br />  }<br />  // Pulsando una tecla<br />  if &#40;event.type == SDL_KEYDOWN&#41; {<br />  <br />  // Comprobamos la tecla pulsada<br />  if &#40;event.key.keysym.sym==SDLK_UP&#41; {<br />  // código que se ejecuta al pulsar una tecla<br />  //  cout&lt;&lt;&quot;registra el teclado como evento&quot;; <br /><br />//**********************************************************************************************************************************************************************************************************************************************************  <br />  cout&lt;&lt;&quot;entra al switch con dado : &quot;&lt;&lt;dado&lt;&lt;endl;<br />  switch&#40;dado&#41;<br />  {<br />  case 0: <br />  dado=1;<br />  cout&lt;&lt;&quot;dado en el caso 0, juega el lobo primero&quot;&lt;&lt;endl; <br />  turnolobo&#40;f,x,y,lobo1,lobo2,lobo3,lobo4,screen,vector_lobo1, vector_lobo2, vector_lobo3, vector_lobo4, vector1, nivel_lobo1, pos_lobo1, nivel_lobo2,pos_lobo2,nivel_lobo3,pos_lobo3,nivel_lobo4, pos_lobo4, vector&#41;;<br />  ganador&#40;salir,loboganador,screen,f,  vector1, nivel_liebre, pos_liebre,pos_lobo1, pos_lobo2, pos_lobo3, pos_lobo4,nivel_lobo1,nivel_lobo2,nivel_lobo3,nivel_lobo4&#41;;<br />  <br />  break;<br />  case 1: <br />  dado=0;<br />  cout&lt;&lt;&quot;dado en el caso 1, juega la liebre primero&quot;&lt;&lt;endl;<br />  turnoliebre&#40;screen,liebre,f,  vector1, nivel_liebre, pos_liebre,pos_lobo1 ,pos_lobo2 ,pos_lobo3 ,pos_lobo4,nivel_lobo1,nivel_lobo2,nivel_lobo3,nivel_lobo4&#41;;<br />  ganador&#40;salir,loboganador,screen,f,  vector1, nivel_liebre, pos_liebre,pos_lobo1, pos_lobo2 ,pos_lobo3 ,pos_lobo4,nivel_lobo1,nivel_lobo2,nivel_lobo3,nivel_lobo4&#41;;<br />  <br />  break;<br />  } <br />      SDL_Flip&#40;screen&#41;;<br />  SDL_Delay&#40;100&#41;;  <br />      delete&#40;posliebre1&#41;;}}<br />SDL_Flip&#40;screen&#41;;<br />SDL_Delay&#40;100&#41;;<br />//*************************************************************************************************************************************************************************************************  <br />imprimir&#40;vector_lobo1, vector_lobo2,vector_lobo3, vector_lobo4,vector1,turno,screen, ima, liebre, lobo1, lobo2, lobo3, lobo4, nivel_liebre, pos_liebre,  x, y, pos_lobo1, nivel_lobo1, pos_lobo2, nivel_lobo2, pos_lobo3, nivel_lobo3, pos_lobo4, nivel_lobo4&#41;;<br />}  <br />  cout&lt;&lt;&quot;sale del switch&#40;dado&#41;&quot;&lt;&lt;endl;//sale del juego<br />//  salir=ganador&#40;screen,f,  vector1, nivel_liebre, pos_liebre,pos_lobo1, pos_lobo2 ,pos_lobo3 ,pos_lobo4 ,nivel_lobo1,nivel_lobo2,nivel_lobo3,nivel_lobo4&#41;;<br />//**********************************************************************************************************************************************************************************************************************************************************  <br />limpiar&#40;screen&#41;;<br />  //**********************************************************************************************************************************************************************************************************************************************************  <br />/*if &#40;cancion&#41;<br />{<br />Mix_HaltMusic&#40;&#41;;<br />Mix_FreeMusic&#40;cancion&#41;;<br />}<br /><br />Mix_CloseAudio&#40;&#41;;*/<br />SDL_Quit&#40;&#41;;<br />return 0;<br />//**********************************************************************************************************************************************************************************************************************************************************<br /><br />  freopen &#40;&quot;CON&quot;, &quot;w&quot;, stdout &#41;; /*para no ocultar los errores de compilacion*/<br />  freopen &#40;&quot;CON&quot;, &quot;w&quot;, stderr &#41;; <br /><br />}<br /> //**********************************************************************************************************************************************************************************************************************************************************<br />void limpiar &#40;SDL_Surface *screen&#41;<br />{<br />  Uint32 a = SDL_MapRGB&#40;screen-&gt;format, 120, 120, 120&#41;;<br />  SDL_FillRect&#40;screen, NULL, a&#41;;<br />}<br /> //**********************************************************************************************************************************************************************************************************************************************************<br />void imprimir&#40;SDL_Surface *vector_lobo1,SDL_Surface *vector_lobo2,SDL_Surface *vector_lobo3,SDL_Surface *vector_lobo4,int vector1,SDL_Surface *turno, SDL_Surface *screen, SDL_Surface *ima, SDL_Surface *liebre, SDL_Surface *lobo1, SDL_Surface *lobo2, SDL_Surface *lobo3, SDL_Surface *lobo4, int *nivel_liebre, int *pos_liebre, int x, int y,int *pos_lobo1,  int *nivel_lobo1,  int *pos_lobo2,  int *nivel_lobo2,  int *pos_lobo3,  int *nivel_lobo3,  int *pos_lobo4,  int *nivel_lobo4/*, SDL_Surface *vector*/&#41;<br />{<br />  <br />  SDL_Rect rect = {x, y, 0, 0};<br />  SDL_BlitSurface&#40;ima, NULL, screen, &amp;rect&#41;;<br />  <br />  /* Dibujamos los protagonistas */<br />  rect.x = &#40;*pos_liebre * 53&#41;+5; /*coordenadas de donde aparecera en pantalla la imagen del lobo# o la liebre*/<br />  rect.y = &#40;*nivel_liebre * 53&#41;+5;<br />  SDL_BlitSurface&#40;liebre, NULL, screen, &amp;rect&#41;;<br /><br />  rect.x = &#40;*pos_lobo1 * 53&#41;+5; <br />  rect.y = &#40;*nivel_lobo1 * 53&#41;+5;<br />  SDL_BlitSurface&#40;lobo1, NULL, screen, &amp;rect&#41;;<br /><br />  rect.x = &#40;*pos_lobo2 * 53&#41;+5; <br />  rect.y = &#40;*nivel_lobo2 * 53&#41;+5;<br />  SDL_BlitSurface&#40;lobo2, NULL, screen, &amp;rect&#41;;<br />  <br />  rect.x = &#40;*pos_lobo3 * 53&#41;+5; <br />  rect.y = &#40;*nivel_lobo3 * 53&#41;+5;<br />  SDL_BlitSurface&#40;lobo3, NULL, screen, &amp;rect&#41;;<br />  <br />  rect.x = &#40;*pos_lobo4 * 53&#41;+5; <br />  rect.y = &#40;*nivel_lobo4 * 53&#41;+5;<br />  SDL_BlitSurface&#40;lobo4, NULL, screen, &amp;rect&#41;;<br />  /*<br />  rect.x = 435;<br />  rect.y = 0;<br />  SDL_BlitSurface&#40;turno, NULL, screen, &amp;rect&#41;;<br />  */<br />  <br />  <br />  SDL_Flip&#40;screen&#41;;<br />SDL_Delay&#40;10&#41;;<br />//cout&lt;&lt;&quot;impresion correcta&quot;; //hasta aqui esta llegando sin problemas<br />}<br /> //**********************************************************************************************************************************************************************************************************************************************************<br /> int fun_liebre&#40; int f, int *nivel_liebre, int *pos_liebre&#41;<br />{ cout&lt;&lt;&quot;juega liebre&quot;;<br />  f=rand&#40;&#41;%1000; <br />  if &#40;f%2==0&#41; //random hasta 2 cae casi siempre en 0, por tanto así se evita el minimo en valores<br />{f=0;}<br />else<br />{f=1;};<br />  cout&lt;&lt;&quot; f=&quot;&lt;&lt;f&lt;&lt;endl;<br />  cout&lt;&lt;&quot;nivel_liebre=&quot;&lt;&lt;*nivel_liebre&lt;&lt;endl;<br />  *nivel_liebre+=1; // una vez se cree el escalon no se salga de los laterales<br />  cout&lt;&lt;&quot; nivel_liebre=&quot;&lt;&lt;*nivel_liebre&lt;&lt;endl;<br />  <br />  if&#40;f==1&#41; //*segun el random que escogimos 1 es incrementar<br />  {cout&lt;&lt;&quot; pos_liebre=&quot;&lt;&lt;*pos_liebre&lt;&lt;endl;<br />  if&#40;*pos_liebre==7&#41; //si *pos_lobo=7 no lo puede incrementar mas<br />  {cout&lt;&lt;&quot; pos_liebre=&quot;&lt;&lt;*pos_liebre&lt;&lt;&quot;, antes&quot;&lt;&lt;endl;<br />  *pos_liebre-=1;<br />  cout&lt;&lt;&quot; pos_liebre=&quot;&lt;&lt;*pos_liebre&lt;&lt;&quot;, despues&quot;&lt;&lt;endl;}<br />  else<br />  {*pos_liebre+=1;};<br />  <br />  }<br />  else  <br />  {<br />  cout&lt;&lt;&quot; *pos_liebre=&quot;&lt;&lt;*pos_liebre&lt;&lt;endl;<br />  if&#40;*pos_liebre==0&#41;<br />  {*pos_liebre+=1;}<br />  else<br />  {*pos_liebre-=1;};<br />  <br />  };<br />  <br />}<br />//**********************************************************************************************************************************************************************************************************************************************************<br />int fun_lobo1&#40; int *nivel_lobo1, int *pos_lobo1&#41;<br />{<br />  cout&lt;&lt;&quot;juega lobo1&quot;;<br />  <br />  int  f=rand&#40;&#41;%1000; <br />  if &#40;f%2==0&#41; //random hasta 2 cae casi siempre en 0, por tanto así se evita el minimo en valores<br />{f=0;}<br />else<br />{f=1;};<br />  cout&lt;&lt;&quot; f=&quot;&lt;&lt;f&lt;&lt;endl;<br />  cout&lt;&lt;&quot;nivel_lobo=&quot;&lt;&lt;*nivel_lobo1&lt;&lt;endl;<br />  *nivel_lobo1-=1; // una vez se cree el escalon no se salga de los laterales<br />  cout&lt;&lt;&quot; nivel_lobo=&quot;&lt;&lt;*nivel_lobo1&lt;&lt;endl;<br />  <br />  if&#40;f==1&#41; //*segun el random que escogimos 1 es incrementar<br />  {cout&lt;&lt;&quot; pos_lobo=&quot;&lt;&lt;*pos_lobo1&lt;&lt;endl;<br />  if&#40;*pos_lobo1==7&#41; //si *pos_lobo=7 no lo puede incrementar mas<br />  {cout&lt;&lt;&quot; pos_lobo=&quot;&lt;&lt;*pos_lobo1&lt;&lt;&quot;, antes&quot;&lt;&lt;endl;<br />  *pos_lobo1-=1;<br />  cout&lt;&lt;&quot; pos_lobo=&quot;&lt;&lt;*pos_lobo1&lt;&lt;&quot;, despues&quot;&lt;&lt;endl;}<br />  else<br />  {*pos_lobo1+=1;};<br />  <br />  }<br />  else  <br />  {<br />  cout&lt;&lt;&quot; *pos_lobo=&quot;&lt;&lt;*pos_lobo1&lt;&lt;endl;<br />  if&#40;*pos_lobo1==0&#41;<br />  {*pos_lobo1+=1;}<br />  else<br />  {*pos_lobo1-=1;};<br />  <br />  };<br />   <br /><br />}<br />//**********************************************************************************************************************************************************************************************************************************************************<br />int fun_lobo2&#40; int *nivel_lobo2, int *pos_lobo2&#41;<br />{cout&lt;&lt;&quot;juega lobo2&quot;;<br />  int  f=rand&#40;&#41;%1000; <br />  if &#40;f%2==0&#41; //random hasta 2 cae casi siempre en 0, por tanto así se evita el minimo en valores<br />{f=0;}<br />else<br />{f=1;};<br />  cout&lt;&lt;&quot; f=&quot;&lt;&lt;f&lt;&lt;endl;<br />  cout&lt;&lt;&quot;nivel_lobo=&quot;&lt;&lt;*nivel_lobo2&lt;&lt;endl;<br />  *nivel_lobo2-=1; // una vez se cree el escalon no se salga de los laterales<br />  cout&lt;&lt;&quot; nivel_lobo=&quot;&lt;&lt;*nivel_lobo2&lt;&lt;endl;<br />  <br />  if&#40;f==1&#41; //*segun el random que escogimos 1 es incrementar<br />  {cout&lt;&lt;&quot; *pos_lobo=&quot;&lt;&lt;*pos_lobo2&lt;&lt;endl;<br />  if&#40;*pos_lobo2==7&#41; //si *pos_lobo=7 no lo puede incrementar mas<br />  {cout&lt;&lt;&quot; pos_lobo=&quot;&lt;&lt;*pos_lobo2&lt;&lt;&quot;, antes&quot;&lt;&lt;endl;<br />  *pos_lobo2-=1;<br />  cout&lt;&lt;&quot; pos_lobo=&quot;&lt;&lt;*pos_lobo2&lt;&lt;&quot;, despues&quot;&lt;&lt;endl;}<br />  else<br />  {*pos_lobo2+=1;};<br />  <br />  }<br />  else  <br />  {<br />  cout&lt;&lt;&quot; *pos_lobo=&quot;&lt;&lt;*pos_lobo2&lt;&lt;endl;<br />  if&#40;*pos_lobo2==0&#41;<br />  {*pos_lobo2+=1;}<br />  else<br />  {*pos_lobo2-=1;};<br />  <br />  };<br />    <br />}<br />//**********************************************************************************************************************************************************************************************************************************************************<br />int fun_lobo3&#40;int *nivel_lobo3, int *pos_lobo3&#41;<br />{ cout&lt;&lt;&quot;juega lobo3&quot;;<br />  int  f=rand&#40;&#41;%1000; <br />  if &#40;f%2==0&#41; //random hasta 2 cae casi siempre en 0, por tanto así se evita el minimo en valores<br />{f=0;}<br />else<br />{f=1;};<br />  cout&lt;&lt;&quot; f=&quot;&lt;&lt;f&lt;&lt;endl;<br />  cout&lt;&lt;&quot;nivel_lobo=&quot;&lt;&lt;*nivel_lobo3&lt;&lt;endl;<br />  *nivel_lobo3-=1; // una vez se cree el escalon no se salga de los laterales<br />  cout&lt;&lt;&quot; nivel_lobo=&quot;&lt;&lt;*nivel_lobo3&lt;&lt;endl;<br />  <br />  if&#40;f==1&#41; //*segun el random que escogimos 1 es incrementar<br />  {cout&lt;&lt;&quot; *pos_lobo=&quot;&lt;&lt;*pos_lobo3&lt;&lt;endl;<br />  if&#40;*pos_lobo3==7&#41; //si *pos_lobo=7 no lo puede incrementar mas<br />  {cout&lt;&lt;&quot; pos_lobo=&quot;&lt;&lt;*pos_lobo3&lt;&lt;&quot;, antes&quot;&lt;&lt;endl;<br />  *pos_lobo3-=1;<br />  cout&lt;&lt;&quot; pos_lobo=&quot;&lt;&lt;*pos_lobo3&lt;&lt;&quot;, despues&quot;&lt;&lt;endl;}<br />  else<br />  {*pos_lobo3+=1;};<br />  <br />  }<br />  else  <br />  {<br />  cout&lt;&lt;&quot; *pos_lobo=&quot;&lt;&lt;*pos_lobo3&lt;&lt;endl;<br />  if&#40;*pos_lobo3==0&#41;<br />  {*pos_lobo3+=1;}<br />  else<br />  {*pos_lobo3-=1;};<br />  };<br />  <br />}<br />//**********************************************************************************************************************************************************************************************************************************************************<br />int fun_lobo4&#40; int *nivel_lobo4, int *pos_lobo4&#41;<br />{  cout&lt;&lt;&quot;juega lobo4&quot;;<br />  int  f=rand&#40;&#41;%1000; <br />  if &#40;f%2==0&#41; //random hasta 2 cae casi siempre en 0, por tanto así se evita el minimo en valores<br />{f=0;}<br />else<br />{f=1;};<br />  cout&lt;&lt;&quot; f=&quot;&lt;&lt;f&lt;&lt;endl;<br />  cout&lt;&lt;&quot;nivel_lobo=&quot;&lt;&lt;*nivel_lobo4&lt;&lt;endl;<br />  *nivel_lobo4-=1; // una vez se cree el escalon no se salga de los laterales<br />  cout&lt;&lt;&quot; nivel_lobo=&quot;&lt;&lt;*nivel_lobo4&lt;&lt;endl;<br />  <br />  if&#40;f==1&#41; //*segun el random que escogimos 1 es incrementar<br />  {cout&lt;&lt;&quot; *pos_lobo=&quot;&lt;&lt;*pos_lobo4&lt;&lt;endl;<br />  if&#40;*pos_lobo4==7&#41; //si *pos_lobo=7 no lo puede incrementar mas<br />  {cout&lt;&lt;&quot; pos_lobo=&quot;&lt;&lt;*pos_lobo4&lt;&lt;&quot;, antes&quot;&lt;&lt;endl;<br />  *pos_lobo4-=1;<br />  cout&lt;&lt;&quot; pos_lobo=&quot;&lt;&lt;*pos_lobo4&lt;&lt;&quot; ,despues&quot;&lt;&lt;endl;}<br />  else<br />  {*pos_lobo4+=1;};<br />  <br />  }<br />  else  <br />  {<br />  cout&lt;&lt;&quot; *pos_lobo=&quot;&lt;&lt;*pos_lobo4&lt;&lt;endl;<br />  if&#40;*pos_lobo4==0&#41;<br />  {*pos_lobo4+=1;}<br />  else<br />  {*pos_lobo4-=1;};<br />  <br />  };<br />  }<br />//********************************************************************************************************************************************************************************************************************************************************** <br />int turnolobo&#40;int f,int x, int y,SDL_Surface *lobo1,SDL_Surface *lobo2,SDL_Surface *lobo3,SDL_Surface *lobo4,SDL_Surface *screen,SDL_Surface *vector_lobo1,SDL_Surface *vector_lobo2,SDL_Surface *vector_lobo3,SDL_Surface *vector_lobo4, int vector1, int *nivel_lobo1, int *pos_lobo1, int *nivel_lobo2, int *pos_lobo2,int *nivel_lobo3, int *pos_lobo3,int *nivel_lobo4, int *pos_lobo4,int *vector&#41;<br />{<br /> //imprimir vectores lobo<br />int *nivel_liebre,*pos_liebre;<br /> vector1=rand&#40;&#41;%4;<br /> short cont=0;<br /> cout&lt;&lt;&quot;el lobo que juega es el numero: &quot;&lt;&lt;vector1+1&lt;&lt;&quot;vector=&quot;&lt;&lt;vector1&lt;&lt;endl;<br /> SDL_Rect rect = {x, y, 0, 0};<br /><br />do{<br />    <br />switch&#40;vector1&#41;{<br />  case 0 :  fun_lobo1&#40;nivel_lobo1, pos_lobo1&#41;;<br />            rect.x = 10;<br />            rect.y = 430;    <br />            SDL_BlitSurface&#40;vector_lobo1, NULL, screen, &amp;rect&#41;;<br />            <br />            rect.x = 452;<br />            rect.y = 70;    <br />            SDL_BlitSurface&#40;lobo1, NULL, screen, &amp;rect&#41;; <br />            SDL_Flip&#40;screen&#41;;<br />            SDL_Delay&#40;1000&#41;;<br />  break;<br />  case 1 :  fun_lobo2&#40;nivel_lobo2, pos_lobo2&#41;; // pensar como usar solo una fun lobo para los 4<br />            rect.x = 10;<br />            rect.y = 430;    <br />            SDL_BlitSurface&#40;vector_lobo2, NULL, screen, &amp;rect&#41;;<br />            <br />            rect.x = 452;<br />            rect.y = 70;    <br />            SDL_BlitSurface&#40;lobo2, NULL, screen, &amp;rect&#41;;<br />            SDL_Flip&#40;screen&#41;;<br />            SDL_Delay&#40;1000&#41;;            <br />  break;<br />  case 2 :  fun_lobo3&#40;nivel_lobo3, pos_lobo3&#41;;<br />            rect.x = 10;<br />            rect.y = 430;    <br />            SDL_BlitSurface&#40;vector_lobo3, NULL, screen, &amp;rect&#41;;<br />            <br />            rect.x = 452;<br />            rect.y = 70;    <br />            SDL_BlitSurface&#40;lobo3, NULL, screen, &amp;rect&#41;;<br />            SDL_Flip&#40;screen&#41;;<br />            SDL_Delay&#40;1000&#41;;<br />  break;<br />  case 3 :  fun_lobo4&#40;nivel_lobo4, pos_lobo4&#41;;<br />            rect.x = 10;<br />            rect.y = 430;    <br />            SDL_BlitSurface&#40;vector_lobo4, NULL, screen, &amp;rect&#41;;<br />            <br />            rect.x = 452;<br />            rect.y = 70;    <br />            SDL_BlitSurface&#40;lobo4, NULL, screen, &amp;rect&#41;;<br />            SDL_Flip&#40;screen&#41;;<br />            SDL_Delay&#40;1000&#41;;<br />  break;<br />  <br />  }    <br />        <br />        <br />        <br /> if&#40;&#40;*nivel_lobo1==*nivel_lobo2&#41;&amp;&amp;&#40;*pos_lobo1==*pos_lobo2&#41;&#41;<br />  {<br />  cout&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl&lt;&lt;&quot;no puede mover el lobo &quot;&lt;&lt;vector1+1&lt;&lt;&quot;vector=&quot;&lt;&lt;vector1&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl;<br />if&#40;vector1==0&#41;<br />{<br />*nivel_lobo1+=1;<br /><br />if&#40;f==1&#41;{<br />         *pos_lobo1+=1;<br />         }<br />         else{<br />              *pos_lobo1-=1;<br />              };<br />}<br />if&#40;vector1==1&#41;<br />{<br />*nivel_lobo2+=1;<br /><br />if&#40;f==1&#41;{<br />         *pos_lobo2+=1;<br />         }<br />         else{<br />              *pos_lobo2-=1;<br />              };<br />}<br />vector1++;<br />  <br />  }<br /> if&#40;&#40;*nivel_lobo1==*nivel_lobo3&#41;&amp;&amp;&#40;*pos_lobo1==*pos_lobo3&#41;&#41;<br />  {<br />  cout&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl&lt;&lt;&quot;no puede mover el lobo &quot;&lt;&lt;vector1+1&lt;&lt;&quot;vector=&quot;&lt;&lt;vector1&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl;<br />  if&#40;vector1==0&#41;<br />{<br />*nivel_lobo1+=1;<br /><br />if&#40;f==1&#41;{<br />         *pos_lobo1+=1;<br />         }<br />         else{<br />              *pos_lobo1-=1;<br />              };<br />}<br />if&#40;vector1==2&#41;<br />{<br />*nivel_lobo3+=1;<br /><br />if&#40;f==1&#41;{<br />         *pos_lobo3+=1;<br />         }<br />         else{<br />              *pos_lobo3-=1;<br />              };<br />}<br />vector1++;<br />  <br />  }<br /> if&#40;&#40;*nivel_lobo1==*nivel_lobo4&#41;&amp;&amp;&#40;*pos_lobo1==*pos_lobo4&#41;&#41;<br />  {<br />  cout&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl&lt;&lt;&quot;no puede mover el lobo &quot;&lt;&lt;vector1+1&lt;&lt;&quot;vector=&quot;&lt;&lt;vector1&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl;<br />  if&#40;vector1==0&#41;<br />{<br />*nivel_lobo1+=1;<br /><br />if&#40;f==1&#41;{<br />         *pos_lobo1+=1;<br />         }<br />         else{<br />              *pos_lobo1-=1;<br />              };<br />}<br />if&#40;vector1==3&#41;<br />{<br />*nivel_lobo4+=1;<br /><br />if&#40;f==1&#41;{<br />         *pos_lobo4+=1;<br />         }<br />         else{<br />              *pos_lobo4-=1;<br />              };<br />}<br />  vector1++;<br />  <br />  }<br /> if&#40;&#40;*nivel_lobo2==*nivel_lobo3&#41;&amp;&amp;&#40;*pos_lobo2==*pos_lobo3&#41;&#41;<br />  {<br />  cout&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl&lt;&lt;&quot;no puede mover el lobo &quot;&lt;&lt;vector1+1&lt;&lt;&quot;vector=&quot;&lt;&lt;vector1&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl;<br />  if&#40;vector1==1&#41;<br />{<br />*nivel_lobo2+=1;<br /><br />if&#40;f==1&#41;{<br />         *pos_lobo2+=1;<br />         }<br />         else{<br />              *pos_lobo2-=1;<br />              };<br />}<br />if&#40;vector1==2&#41;<br />{<br />*nivel_lobo3+=1;<br /><br />if&#40;f==1&#41;{<br />         *pos_lobo3+=1;<br />         }<br />         else{<br />              *pos_lobo3-=1;<br />              };<br />}<br />  vector1++;<br />  <br />  }<br />if&#40;&#40;*nivel_lobo2==*nivel_lobo4&#41;&amp;&amp;&#40;*pos_lobo2==*pos_lobo4 &#41;&#41;<br />  {<br />  cout&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl&lt;&lt;&quot;no puede mover el lobo &quot;&lt;&lt;vector1+1&lt;&lt;&quot;vector=&quot;&lt;&lt;vector1&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl;<br />  if&#40;vector1==1&#41;<br />{<br />*nivel_lobo2+=1;<br /><br />if&#40;f==1&#41;{<br />         *pos_lobo2+=1;<br />         }<br />         else{<br />              *pos_lobo2-=1;<br />              };<br />}<br />if&#40;vector1==3&#41;<br />{<br />*nivel_lobo4+=1;<br /><br />if&#40;f==1&#41;{<br />         *pos_lobo4+=1;<br />         }<br />         else{<br />              *pos_lobo4-=1;<br />              };<br />}<br />  vector1++;<br />  <br />  }<br />if&#40;&#40;*nivel_lobo3==*nivel_lobo4&#41;&amp;&amp;&#40;*pos_lobo3==*pos_lobo4&#41;&#41;<br />  {<br />  cout&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl&lt;&lt;&quot;no puede mover el lobo &quot;&lt;&lt;vector1+1&lt;&lt;&quot;vector=&quot;&lt;&lt;vector1&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl;<br />  if&#40;vector1==2&#41;<br />{<br />*nivel_lobo3+=1;<br /><br />if&#40;f==1&#41;{<br />         *pos_lobo3+=1;<br />         }<br />         else{<br />              *pos_lobo3-=1;<br />              };<br />}<br />if&#40;vector1==3&#41;<br />{<br />*nivel_lobo4+=1;<br /><br />if&#40;f==1&#41;{<br />         *pos_lobo4+=1;<br />         }<br />         else{<br />              *pos_lobo4-=1;<br />              };<br />}<br />  vector1++;<br />  <br />  }<br />  <br />  if&#40;vector1==4&#41;<br />  {<br />  vector1=0;<br />  cont++;<br />  if&#40;cont==2&#41;<br />  {return 2; }<br />  }<br />  <br />  }<br /> while&#40;&#40;*nivel_lobo1==*nivel_lobo2 &amp;&amp;*pos_lobo1==*pos_lobo2 &#41; || &#40;*nivel_lobo1==*nivel_lobo3&amp;&amp; *pos_lobo1==*pos_lobo3 &#41;||&#40;*nivel_lobo1==*nivel_lobo4&amp;&amp;*pos_lobo1==*pos_lobo4 &#41;||&#40;*nivel_lobo2==*nivel_lobo3 &amp;&amp; *pos_lobo2==*pos_lobo3&#41;|| &#40;*nivel_lobo2==*nivel_lobo4&amp;&amp;*pos_lobo2==*pos_lobo4 &#41; ||&#40;*nivel_lobo3==*nivel_lobo4&amp;&amp;*pos_lobo3==*pos_lobo4&#41;&#41;;<br />//el While anterior se encarga de verificar que los lobos no esten en la misma casilla<br /><br /><br />}<br />//**********************************************************************************************************************************************************************************************************************************************************<br />int turnoliebre&#40;SDL_Surface *screen,SDL_Surface *liebre,int f,  int vector1, int *nivel_liebre, int *pos_liebre,int *pos_lobo1, int *pos_lobo2 ,int *pos_lobo3 ,int *pos_lobo4 ,  int *nivel_lobo1,  int *nivel_lobo2,  int *nivel_lobo3,  int *nivel_lobo4&#41;<br />{<br />   int x_init, y_init;<br />   x_init=*pos_liebre;<br />   y_init=*nivel_liebre; <br />fun_liebre&#40;f, nivel_liebre,pos_liebre&#41;; <br />int contador=0;<br />contador++;<br />if &#40;contador==7&#41;<br />{<br />return 1;                <br />}<br /><br />if&#40;SDL_MUSTLOCK&#40;liebre&#41;&#41; <br />  SDL_LockSurface&#40;liebre&#41;; <br /><br />SDL_Rect rect;<br />  rect.x = 452;<br />  rect.y = 70;<br />  SDL_BlitSurface&#40;liebre, NULL, screen, &amp;rect&#41;;<br /><br />if&#40;SDL_MUSTLOCK&#40;liebre&#41;&#41; <br />  SDL_UnlockSurface&#40;liebre&#41;;<br /><br />  <br />/*<br />short paso=0;<br />//while&#40;paso&lt;=10&#41;<br />{<br />paso++;<br /><br />cout&lt;&lt;&quot;f=&quot;&lt;&lt;f&lt;&lt;&quot;dentro de turno liebre&quot;&lt;&lt;endl;<br />if&#40;&#40;&#40;*nivel_liebre==*nivel_lobo1 &#41;&amp;&amp;&#40;*pos_liebre==*pos_lobo1&#41;&#41;&#41;<br />{if&#40;f==1&#41;<br />    {<br />    *pos_liebre-=2;<br />    if &#40;*pos_liebre==-1&#41;<br />    {<br />    *pos_liebre+=1;<br />    *nivel_liebre-=1;<br />    }<br />    }<br /> else<br /> {<br />    <br />    *pos_liebre+=2;<br />    if &#40;*pos_liebre==8&#41;<br />    {<br />    *pos_liebre-=1;<br />    *nivel_liebre-=1; <br />    }<br /> };<br />fun_liebre&#40;f, nivel_liebre,pos_liebre&#41;;<br />}<br /><br /><br />if&#40;&#40;&#40;*nivel_liebre==*nivel_lobo2&#41;&amp;&amp;&#40;*pos_liebre==*pos_lobo2&#41;&#41;&#41;<br />{if&#40;f==1&#41;<br />    {<br />    *pos_liebre-=2;<br />    if &#40;*pos_liebre==-1&#41;<br />    {<br />    *pos_liebre+=1;<br />    *nivel_liebre-=1;<br />    }<br />    }<br /> else<br /> {<br />    <br />    *pos_liebre+=2;<br />    if &#40;*pos_liebre==8&#41;<br />    {<br />    *pos_liebre-=1;<br />    *nivel_liebre-=1; <br />    }<br /> };<br />fun_liebre&#40;f, nivel_liebre,pos_liebre&#41;;<br />}<br /><br /><br />if&#40;&#40;*nivel_liebre==*nivel_lobo3&#41;&amp;&amp;&#40;*pos_liebre==*pos_lobo3&#41;&#41;<br />{if&#40;f==1&#41;<br />    {<br />    *pos_liebre-=2;<br />    if &#40;*pos_liebre==-1&#41;<br />    {<br />    *pos_liebre+=1;<br />    *nivel_liebre-=1;<br />    }<br />    }<br /> else<br /> {<br />    *pos_liebre+=2;<br />    if &#40;*pos_liebre==8&#41;<br />    {<br />    *pos_liebre-=1;<br />    *nivel_liebre-=1; <br />    }<br /> };<br />fun_liebre&#40;f, nivel_liebre,pos_liebre&#41;;<br />}<br /><br /><br />if&#40;&#40;*nivel_liebre==*nivel_lobo4&#41;&amp;&amp;&#40;*pos_liebre==*pos_lobo4&#41;&#41;<br />{    if&#40;f==1&#41;<br />     {<br />      *pos_liebre-=2;<br />       if &#40;*pos_liebre==-1&#41;<br />         {<br />         *pos_liebre+=1;<br />         *nivel_liebre-=1;<br />         }<br />     }<br />     else<br />     {<br />       *pos_liebre+=2;<br />          if &#40;*pos_liebre==8&#41;<br />          {<br />           *pos_liebre-=1;<br />           *nivel_liebre-=1; <br />          }<br />     };<br />fun_liebre&#40;f, nivel_liebre,pos_liebre&#41;;<br />}<br />/*}*/<br /><br />SDL_Flip&#40;screen&#41;;<br />SDL_Delay&#40;1000&#41;;<br /><br />}<br />//******************************************************************************************************************************************************************************************************************************************************************************<br /><br />int ganador&#40;int salir,int *loboganador, SDL_Surface *screen,int f,  int vector1, int *nivel_liebre, int *pos_liebre,int *pos_lobo1, int *pos_lobo2 ,int *pos_lobo3 ,int *pos_lobo4 ,  int *nivel_lobo1,  int *nivel_lobo2,  int *nivel_lobo3,  int *nivel_lobo4&#41;<br />{  int gana=2;<br />  <br />   <br />    <br />  if&#40;&#40;&#40;*nivel_liebre==*nivel_lobo1 &amp;&amp;*pos_liebre==*pos_lobo1&#41;|| &#40;*nivel_liebre==*nivel_lobo2&amp;&amp;*pos_liebre==*pos_lobo2 &#41;||&#40;*nivel_liebre==*nivel_lobo3&amp;&amp;*pos_liebre==*pos_lobo3&#41; ||&#40;*nivel_liebre==*nivel_lobo4&amp;&amp;*pos_liebre==*pos_lobo4&#41;&#41;&#41;<br />  {<br />  gana=0;<br />  cout&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl&lt;&lt;&quot;ganó el Lobo &quot;&lt;&lt;*loboganador+1&lt;&lt;&quot;, gana=&quot;&lt;&lt;gana&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl;<br />  }<br />  <br />  if&#40;&#40;*nivel_liebre==7&#41;&amp;&amp;&#40;&#40;&#40;*nivel_liebre==*nivel_lobo1 &#41;&amp;&amp;&#40;*pos_liebre==*pos_lobo1&#41;&#41;|| &#40;&#40;*nivel_liebre==*nivel_lobo2&#41;&amp;&amp;&#40;*pos_liebre==*pos_lobo2&#41;&#41;||&#40;&#40;*nivel_liebre==*nivel_lobo3&#41;&amp;&amp;&#40;*pos_liebre==*pos_lobo3&#41;&#41;||&#40;&#40;*nivel_liebre==*nivel_lobo4&#41;&amp;&amp;&#40;*pos_liebre==*pos_lobo4&#41;&#41;&#41;&#41;<br />  {<br />  //*loboganador+=1;<br />  gana=0;<br />  cout&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl&lt;&lt;&quot;ganó el Lobo &quot;&lt;&lt;*loboganador&lt;&lt;&quot;, gana=&quot;&lt;&lt;gana&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl;<br />  }<br />  <br />  if&#40;&#40;*nivel_liebre==7&#41;&amp;&amp;&#40;&#40;*nivel_liebre!=*nivel_lobo1&#41; &amp;&amp;&#40;*pos_liebre!=*pos_lobo1&#41;&#41;&#41;<br />  {<br />  //*loboganador+=1;<br />  gana=1;<br />  cout&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl&lt;&lt;&quot;ganó la Liebre &quot;&lt;&lt;&quot;, gana=&quot;&lt;&lt;gana&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl;<br />  } <br /><br />if&#40;&#40;*nivel_liebre==7&#41;&amp;&amp;&#40;&#40;*nivel_liebre!=*nivel_lobo2&#41;&amp;&amp;&#40;*pos_liebre!=*pos_lobo2&#41;&#41;&#41;<br />  {<br />  //*loboganador+=1;<br />  gana=1;<br />  cout&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl&lt;&lt;&quot;ganó la Liebre &quot;&lt;&lt;&quot;, gana=&quot;&lt;&lt;gana&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl;<br />  } <br />  <br />  if&#40;&#40;*nivel_liebre==7&#41;&amp;&amp;&#40;&#40;*nivel_liebre!=*nivel_lobo3&#41;&amp;&amp;&#40;*pos_liebre!=*pos_lobo3&#41;&#41;&#41;<br />  {<br />  //*loboganador+=1;<br />  gana=1;<br />  cout&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl&lt;&lt;&quot;ganó la Liebre &quot;&lt;&lt;&quot;, gana=&quot;&lt;&lt;gana&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl;<br />  } <br />  <br />  if&#40;&#40;*nivel_liebre==7&#41;&amp;&amp;&#40;&#40;*nivel_liebre!=*nivel_lobo4&#41;&amp;&amp;&#40;*pos_liebre!=*pos_lobo4&#41;&#41;&#41;<br />  {<br />  //*loboganador+=1;<br />  gana=1;<br />  cout&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl&lt;&lt;&quot;ganó la Liebre &quot;&lt;&lt;&quot;, gana=&quot;&lt;&lt;gana&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl;<br />  } <br /><br />/*  if&#40;turnolobo&#40;  vector1, nivel_lobo1, pos_lobo1, nivel_lobo2,pos_lobo2,nivel_lobo3,pos_lobo3,nivel_lobo4, pos_lobo4, vector&#41;==1&#41;<br />  {<br />  cout&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl&lt;&lt;&quot;ganó el Lobo &quot;&lt;&lt;vector1+1&lt;&lt;&quot;, gana=&quot;&lt;&lt;gana&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl;<br />  gana=0;<br />  }*/<br />  <br />  <br />if&#40;&#40;&#40;*nivel_liebre==*nivel_lobo1 &#41;&amp;&amp;&#40;*pos_liebre==*pos_lobo1&#41;&#41;|| &#40;&#40;*nivel_liebre==*nivel_lobo2&#41;&amp;&amp;&#40;*pos_liebre==*pos_lobo2&#41;&#41;||&#40;&#40;*nivel_liebre==*nivel_lobo3&#41;&amp;&amp;&#40;*pos_liebre==*pos_lobo3&#41;&#41;||&#40;&#40;*nivel_liebre==*nivel_lobo4&#41;&amp;&amp;&#40;*pos_liebre==*pos_lobo4&#41;&#41;&#41;<br />{<br />gana=0;<br />cout&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl&lt;&lt;&quot;ganó el Lobo &quot;&lt;&lt;&#40;*loboganador&#41;+1&lt;&lt;&quot;, gana=&quot;&lt;&lt;gana&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl;<br />}<br /><br />if &#40;*pos_liebre==8&#41;<br />{<br />     *pos_liebre-=1;<br />     *nivel_liebre-=1;<br />     gana=0;<br />}<br />  <br />  SDL_Rect rect;<br />  SDL_Surface *gana_liebre;<br />  SDL_Surface *gana_lobo;<br />  <br />gana_liebre = IMG_Load&#40;&quot;imagenes/gana_liebre.png&quot;&#41;;<br /><br />  if &#40;gana_liebre == NULL&#41;<br />  {<br />  printf&#40;&quot;Error en IMG_Load= %s\n&quot;, SDL_GetError&#40;&#41;&#41;;<br />  return 1;<br />  }  <br /><br />  gana_lobo = IMG_Load&#40;&quot;imagenes/gana_lobo.png&quot;&#41;;<br /><br />  if &#40;gana_lobo == NULL&#41;<br />  {<br />  printf&#40;&quot;Error en IMG_Load= %s\n&quot;, SDL_GetError&#40;&#41;&#41;;<br />  return 1;<br />  }<br />  switch&#40;gana&#41;<br />  {  <br />  case 0:  <br />  rect.x = 10; <br />  rect.y = 120;<br />  SDL_BlitSurface&#40;gana_lobo, NULL, screen, &amp;rect&#41;;<br />  SDL_Flip&#40;screen&#41;;<br />  SDL_Delay&#40;5000&#41;;<br />  return 1;<br />  salir=1;<br />  break;<br />  case 1:<br />  rect.x = 10;<br />  rect.y = 120;<br />  SDL_BlitSurface&#40;gana_liebre, NULL, screen, &amp;rect&#41;;<br />  SDL_Flip&#40;screen&#41;;<br />  SDL_Delay&#40;5000&#41;;<br />  return 1;<br />  salir=1;<br />  break;<br />  case 2: cout&lt;&lt;&quot;no hay ganador&quot;&lt;&lt;endl&lt;&lt;endl;<br />  }<br />  SDL_Flip&#40;screen&#41;;<br />  //SDL_Delay&#40;10&#41;;<br />}<br /><br />//******/ //************************************************************************************************************************************************************************************************************************************************************************</pre><p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=2423">luisalbert</a> — Lun May 02, 2011 4:52 pm</p><hr />
]]></content>
</entry>
</feed>