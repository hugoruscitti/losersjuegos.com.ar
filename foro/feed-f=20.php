<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="es">
<link rel="self" type="application/atom+xml" href="http://losersjuegos.com.ar/foro/feed.php?f=20" />

<title>LosersJuegos</title>
<subtitle>Desarrollando videojuegos libres</subtitle>
<link href="http://losersjuegos.com.ar/foro/index.php" />
<updated>2012-02-15T12:03:16+00:00</updated>

<author><name><![CDATA[LosersJuegos]]></name></author>
<id>http://losersjuegos.com.ar/foro/feed.php?f=20</id>
<entry>
<author><name><![CDATA[quiro9]]></name></author>
<updated>2012-02-15T12:03:16+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=1407&amp;p=6529#p6529</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=1407&amp;p=6529#p6529"/>
<title type="html"><![CDATA[3D • Re: preguntas sobre crystal space]]></title>

<category term="3D" scheme="http://losersjuegos.com.ar/foro/viewforum.php?f=20" label="3D"/>
<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=1407&amp;p=6529#p6529"><![CDATA[
gracias hugoruscitti... ya tenia el -dev me había percatado, pero no encontraba con que referenciarme  <img src="http://losersjuegos.com.ar/foro/images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> ... je bastante claro!, ahí voy a ver si puedo compilar algún ejemplo... seguro voy a poder... de verdad gracias  <img src="http://losersjuegos.com.ar/foro/images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /><p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=2541">quiro9</a> — Mié Feb 15, 2012 12:03 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[hugoruscitti]]></name></author>
<updated>2012-02-14T19:14:56+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=1407&amp;p=6527#p6527</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=1407&amp;p=6527#p6527"/>
<title type="html"><![CDATA[3D • Re: preguntas sobre crystal space]]></title>

<category term="3D" scheme="http://losersjuegos.com.ar/foro/viewforum.php?f=20" label="3D"/>
<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=1407&amp;p=6527#p6527"><![CDATA[
Hola!,<br /><br />Sí, por lo que ví se puede compilar desde gcc o c++. Pero me equivoqué en mi anterior mensaje, el<br />paquete que se tiene que instalar es &quot;libcrystalspace-dev&quot;.<br /><br />Por ejemplo con el siguiente comando:<br /><br /><pre class="prettyprint">apt-get install libcrystalspace-dev</pre><br /><br />Una vez instalado este paquete, vas a contar con un nuevo comando llamado: cs-config (muy similar a sdl-config)<br /><br />Básicamente, el comando &quot;cs-config --cflags&quot; te retorna todos los 'flags' para que puedas compilar programas con<br />crystalspace. Y el comando &quot;cs-config --libs&quot; te da los flags para crear el archivo binario de tu programa.<br /><br />Por ejemplo, si tengo un programa llamado &quot;hola.cc&quot; podría compilarlo con el siguiente comando:<br /><br /><pre class="prettyprint">g++ hola.cc `cs-config --cflags --libs`</pre><br /><br />Por supuesto que si querés poner los flags  a mano también podés (pero es mas sencillo usando el comando de antes):<br /><br /><pre class="prettyprint">g++ hola.cc  -L/usr/lib -lcrystalspace_opengl-1.4 -lcrystalspace-1.4  -lz -lpthread -lGL -lXext -lX11 -lm  -lc -lm -ldl -lnsl -L/usr/local/lib</pre><p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=3">hugoruscitti</a> — Mar Feb 14, 2012 7:14 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[quiro9]]></name></author>
<updated>2012-02-14T18:48:33+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=1407&amp;p=6526#p6526</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=1407&amp;p=6526#p6526"/>
<title type="html"><![CDATA[3D • Re: preguntas sobre crystal space]]></title>

<category term="3D" scheme="http://losersjuegos.com.ar/foro/viewforum.php?f=20" label="3D"/>
<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=1407&amp;p=6526#p6526"><![CDATA[
hola hugoruscitti, perdon por no ser tan claro, me refiero a compilar un juego echo con librerias de crystal space con el compilador GCC o G++ (las librerias y el motor para correr juegos d crystal space las tengo instaladas y andando aparentemente)...<br />no se que libreria &quot;extra&quot; hay que marcar con gcc al momento de compilar:<br /><br />por ejemplo asi como con SDL es -lSDL y en crystal space seria... ¿?<br />soy masomenos claro?...<br /><br />recuendo que estoy interesado en usar esta libreria con C o C++ compilador libre (no se si se puede con otro lenguaje pero estoy interesado en esos ya que son los que se)<br /><br />---------------------------<br />en cuanto a la otra pregunta (la pongo asi para quien quiera leerla):<br /><blockquote class="uncited"><div><br /><blockquote class="uncited"><div>consume mas cantidad de ciclos que blender, masomenos igual, o menos?...<br /></div></blockquote><br />me auto respondo con la info que encontre:<br />aparentemente el motor se dice que es un poco mas &quot;liviano&quot; que el de blender dado que no contiene tantas funciones y aquellas que tiene (como coliciones, sombras, reflejos, etc)  podemos desabilitarlas facilmente con un XML lo cual disminuye un poco el consumo de %CPU, el motor esta bien optimizado y bien orientado a juego con lo cual tambien marca un coste menos al momento de correr algun software.<br /><br />En cuanto al tiempo de ejecución, al poderse compilar, es mas rapido a diferencia que blender, dado que blender funciona con un lenguajes de librerias interpretadas (Python) y disminuye un poco su rendimiento...pero tampoco es que halla tanta diferencia...<br /><br />solo para el que quiere saber crystal space aparentemente si es &quot;un poco mas liviano&quot; que blender...</div></blockquote><br /><br />de ante mano, gracias y SALUDOS...<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=2541">quiro9</a> — Mar Feb 14, 2012 6:48 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[hugoruscitti]]></name></author>
<updated>2012-02-14T15:33:44+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=1407&amp;p=6525#p6525</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=1407&amp;p=6525#p6525"/>
<title type="html"><![CDATA[3D • Re: preguntas sobre crystal space]]></title>

<category term="3D" scheme="http://losersjuegos.com.ar/foro/viewforum.php?f=20" label="3D"/>
<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=1407&amp;p=6525#p6525"><![CDATA[
Hola quiro, me quedó una duda de tu consulta: ¿Te referís a compilar toda la biblioteca o<br />un programa &quot;que use&quot; crystal space?.<br /><br />Por lo que ví, crystal space se puede instalar en ubuntu directamente escribiendo &quot;apt-get install crystalspace&quot;<br />si a eso te referías.<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=3">hugoruscitti</a> — Mar Feb 14, 2012 3:33 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[quiro9]]></name></author>
<updated>2012-02-14T06:45:27+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=1407&amp;p=6523#p6523</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=1407&amp;p=6523#p6523"/>
<title type="html"><![CDATA[3D • preguntas sobre crystal space]]></title>

<category term="3D" scheme="http://losersjuegos.com.ar/foro/viewforum.php?f=20" label="3D"/>
<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=1407&amp;p=6523#p6523"><![CDATA[
Hola gente... ando &quot;enrroscado&quot; (termino argentino de dando vueltas, muy metido, frustrado, etc...) de tratar de averiguar un poco mas de Crystal Space...<br /><br />Su web tiene documentación de &quot;calidad baja&quot; (sin ofender a nadie porfavor) y escasa...<br /><br /><br />quiero saber si cristal space soporta GCC, supongo que si soporta el lenguaje por un source que me baje... pero es vc (visual C++ ASCO!!!!!!, huele a microsoft, denuevo sin ofender a nadie excepto a microsoft)<br />por ende como se compila algun proyecto (si es que encuentro o pruevo hacer con GCC o G++)... <br />alguien ha intentado compilar con GCC CPP o G++ y sabria explicar masomenos?... <br />aca dejo un link que encontre con unos ejemplos poco utiles segun el autor pero para aprender:<br /><br /><a href="http://sabia.tic.udc.es/gc/Contenidos%20adicionales/trabajos/3D/Crystal%20Space%203D/estructura.html" class="postlink">http://sabia.tic.udc.es/gc/Contenidos%20adicionales/trabajos/3D/Crystal%20Space%203D/estructura.html</a><br /><br />la otra pregunta es si el motor en verdad es mas liviano de MB (no en peso sino en consumo de recurso hablando principalmente de %CPU) que blender... bien preguntado: consume mas cantidad de ciclos que blender, masomenos igual, o menos?... <br /><br />espero que alguien pueda dar una referencia porque la verdad me canse de buscar sin encontrar nada... si llegara encontrar algo lo pondre abajo... saludos!<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=2541">quiro9</a> — Mar Feb 14, 2012 6:45 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Barajas]]></name></author>
<updated>2012-01-05T20:48:59+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=1295&amp;p=6365#p6365</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=1295&amp;p=6365#p6365"/>
<title type="html"><![CDATA[3D • Re: ¿Por qué hay que estar registrado para ver el foro 3D?]]></title>

<category term="3D" scheme="http://losersjuegos.com.ar/foro/viewforum.php?f=20" label="3D"/>
<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=1295&amp;p=6365#p6365"><![CDATA[
Nada, pero hasta .. hoy... me decia lo del registro, que bueno que ya esta corregido jeje <img src="http://losersjuegos.com.ar/foro/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br />gracias<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=2345">Barajas</a> — Jue Ene 05, 2012 8:48 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[hugoruscitti]]></name></author>
<updated>2012-01-05T02:07:56+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=1295&amp;p=6356#p6356</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=1295&amp;p=6356#p6356"/>
<title type="html"><![CDATA[3D • Re: ¿Por qué hay que estar registrado para ver el foro 3D?]]></title>

<category term="3D" scheme="http://losersjuegos.com.ar/foro/viewforum.php?f=20" label="3D"/>
<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=1295&amp;p=6356#p6356"><![CDATA[
<blockquote><div><cite>Barajas escribió:</cite><br />¿Para cuando estaria? <img src="http://losersjuegos.com.ar/foro/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /></div></blockquote><br /><br />¿no te deja?, ya lo había corregido... ¿que te dice cuando quieres publicar el mensaje?<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=3">hugoruscitti</a> — Jue Ene 05, 2012 2:07 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Barajas]]></name></author>
<updated>2012-01-04T22:27:16+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=1295&amp;p=6355#p6355</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=1295&amp;p=6355#p6355"/>
<title type="html"><![CDATA[3D • Re: ¿Por qué hay que estar registrado para ver el foro 3D?]]></title>

<category term="3D" scheme="http://losersjuegos.com.ar/foro/viewforum.php?f=20" label="3D"/>
<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=1295&amp;p=6355#p6355"><![CDATA[
¿Para cuando estaria? <img src="http://losersjuegos.com.ar/foro/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=2345">Barajas</a> — Mié Ene 04, 2012 10:27 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Barajas]]></name></author>
<updated>2011-12-27T22:20:17+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=939&amp;p=6322#p6322</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=939&amp;p=6322#p6322"/>
<title type="html"><![CDATA[3D • Re: models para panda3d]]></title>

<category term="3D" scheme="http://losersjuegos.com.ar/foro/viewforum.php?f=20" label="3D"/>
<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=939&amp;p=6322#p6322"><![CDATA[
Eso también me pasaba, hasta que lo traforme a .egg.<br /><br />de hecho, con panda vine incluido un conversor a .egg desde un .x; pero es una lastima que sea desde consola:<br /><br /><pre class="prettyprint">x2egg  nombre_del_archivo.x nombre_con_el_que_quieres_que_salga.egg</pre><br /><br />o, si el archivo de destino existe, escribes:<br /><br /><pre class="prettyprint">x2egg -o  nombre_con_el_que_quieres_que_salga.egg nombre_del_archivo.x</pre><br /><br />De cualquier forma, si ese no es el error, podrías ver si esta la textura aplicada en blender (si presionando F-12 en blender, el modelo sale con la textura)<br /><br />o agregarla al principio del .egg en la etiqueta que dice textura:<br /><br /><pre class="prettyprint">&lt;Texture&gt; tref1 {<br />  nombre_image_textura.png<br />}</pre><p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=2345">Barajas</a> — Mar Dic 27, 2011 10:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Barajas]]></name></author>
<updated>2011-12-27T02:24:30+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=1370&amp;p=6316#p6316</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=1370&amp;p=6316#p6316"/>
<title type="html"><![CDATA[3D • Sobre el 3D, Un tutorial de panda3D]]></title>

<category term="3D" scheme="http://losersjuegos.com.ar/foro/viewforum.php?f=20" label="3D"/>
<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=1370&amp;p=6316#p6316"><![CDATA[
<span style="font-style: italic"><span style="text-decoration: underline"><span style="font-weight: bold">Mi primer juego en 3D.</span></span></span><br /><br /><span style="font-weight: bold">Antes de empezar.</span><br /><br />Este tutorial-articulo esta destinado a ser una pequeña y fácil guía para hacer un pequeño juego 3D.<br />Antes que nada, unas consideraciones básicas.<br /><br />Lo que necesitas tener:<br /><br />Panda3D, saber tanto Python y programación estructurada. (en teoría si sabes la primera, se supone que sabes la segunda <img src="http://losersjuegos.com.ar/foro/images/smilies/icon_wink.gif" alt=";)" title="Wink" /> )<br /><br />Lo que (mas aparte) deberías tener:<br /><br />Conocimientos de programación orientada a objetos y saber manejar un programa 3D (aun que no se vera en este tutorial eso, ayuda mucho al momento de hacer juegos 3D).<br /><br />Sobre los modelos...<br /><br /><span style="text-decoration: underline">Puedes encontrarlos adjuntos al articulo</span>. Para este caso los modelos están hechos utilizando Blender. No se habla de herramientas que exportan directamente a .egg (el formato por defecto de panda3D), ya que, me parece mucho más simple exportar desde blender a .x (el formato de DirectX) y, después trasformar a .egg usando los transformadores que vienen junto con panda3D. Si bien, es posible exportar a .egg usando blender, esta característica de exportación esta activada en Blender 2.4x no en superiores como 2.5 y 2.6, eso lo pondré en otro hilo en este foro.<br /><br />Sobre el 3D (algo muy, muy, obvio)...<br /><br />Una cosa que resulta obvia, al hablar de 3D es que trabajamos en un espacio tridimensional (sí, capitán obvio). Esto significa que, se agrega un nuevo eje al espacio. En otras palabras, para representar la posición en el espacio de un elemento, en lugar de ser la típica representación cartesiana de toda la vida (X,Y); pasa a ser: (X,Y,Z).<br /><br />La instalación de panda 3D.<br /><br />No se toca ese tema. Si se tienen problemas instalando, para eso esta el foro <img src="http://losersjuegos.com.ar/foro/images/smilies/icon_wink.gif" alt=";)" title="Wink" />.<br /><br />Ahora sí.<br /><br /><span style="font-weight: bold">Mi primera ventana.</span><br /><br /><br /><pre class="prettyprint">import direct.directbase.DirectStart<br />run&#40;&#41;</pre><br /><br />Con esas dos simples lineas, creamos una ventana. Lo que sucede, en la primera linea, importamos todo lo mínimo necesario para que panda funcione (en realidad, es mas parecido eso a una plantilla), y en la segunda, la función &quot;run&quot; es la encargada de echar a andar los componentes, incluyendo el bucle principal del programa.<br /><br /><span style="font-weight: bold">Creando un mundo.</span><br /><br /><pre class="prettyprint">import direct.directbase.DirectStart<br />class Mundo&#40;&#41;:<br />    def __init__&#40;self&#41;:<br />        base.setBackgroundColor&#40;0,0,0&#41;<br />mundo = Mundo&#40;&#41;<br />run&#40;&#41;</pre><br /><br />Esta vez, el código es mucho mas largo. ¿Que hemos hecho?<br />/*si sabes que es orientado a objetos pasa de aquí...<br /><br />si no:<br />    lee esto primero: <a href="http://mundogeek.net/archivos/2008/03/05/python-orientacion-a-objetos/" class="postlink">http://mundogeek.net/archivos/2008/03/05/python-orientacion-a-objetos/</a><br /><br />*/hasta aquí...<br /><br />Se creo en el ejemplo de arriba una clase llamada Mundo (podría tener cualquier otro nombre). En esa clase, introducimos todo lo que hagamos, para nuestro juego. Y para que lo escrito en la clase suceda en la ventana, es necesario, instanciar con &quot;mundo = Mundo()&quot;. En este caso, la función de la linea  &quot;base.setBackgroundColor(0,0,0)&quot; sera cambiar el color de fondo de gris a negro.<br /><br /><span style="font-weight: bold">Un escenario.</span><br /><br />Ahora cargaremos un modelo a nuestro programa, para eso se agregan las siguientes lineas:<br /><br /><pre class="prettyprint">import direct.directbase.DirectStart<br />class Mundo&#40;&#41;:<br />    def __init__&#40;self&#41;:<br />        base.setBackgroundColor&#40;0,0,0&#41;<br />        self.mundo = loader.loadModel&#40;&quot;cilindro.egg&quot;&#41;<br />        self.mundo.reparentTo&#40;render&#41;<br />mundo = Mundo&#40;&#41;<br />run&#40;&#41;</pre><br /><br />En la linea:<br /><blockquote class="uncited"><div><br />self.mundo = loader.loadModel(&quot;cilindro.egg&quot;)<br /></div></blockquote><br />Creamos una variable donde almacenamos nuestro modelo, y lo cargamos, en este caso, el modelo esta en la misma carpeta que nuestro programa. De no ser así, para cargar el archivo, se toma como referencia la ruta CON RESPECTO A NUESTRO PROGRAMA.<br />La variable es ahora, un tipo de dato llamado nodePath<br /><br />En la siguiente linea:<br /><blockquote class="uncited"><div><br />self.mundo.reparentTo(render)<br /></div></blockquote><br />Es lo que &quot;dibuja&quot; al modelo en la pantalla.<br /><br />podemos modificar su posición usando los métodos setPos(x,y,z) -general-, o setX(x), setY(y), setZ(z) :<br /><br /><br /><pre class="prettyprint">import direct.directbase.DirectStart<br />class Mundo&#40;&#41;:<br />    def __init__&#40;self&#41;:<br />        base.setBackgroundColor&#40;0,0,0&#41;<br />        self.mundo = loader.loadModel&#40;&quot;cilindro.egg&quot;&#41;<br />        self.mundo.setPos&#40;0, 0, 0&#41; #recuerden &#40;x,y,z&#41;<br />        self.mundo.reparentTo&#40;render&#41;<br />mundo = Mundo&#40;&#41;<br />run&#40;&#41;</pre><br /><br />...o su tamaño con setScale(x,y,z) -general-, setSx(x), setSy(y), setSx(z)...<br /><br /><pre class="prettyprint">import direct.directbase.DirectStart<br />class Mundo&#40;&#41;:<br />    def __init__&#40;self&#41;:<br />        base.setBackgroundColor&#40;0,0,0&#41;<br />        <br />        self.mundo0 = loader.loadModel&#40;&quot;cilindro.egg&quot;&#41;<br />        self.mundo0.setPos&#40;0, -5, 0&#41;<br />        self.mundo0.setSz&#40;10&#41; #crece en el eje Z<br />        self.mundo0.reparentTo&#40;render&#41;<br />        <br />        self.mundo1 = loader.loadModel&#40;&quot;cilindro.egg&quot;&#41;<br />        self.mundo1.setPos&#40;0, 0, 0&#41;<br />        self.mundo1.setSy&#40;10&#41;#crece en el eje Y<br />        self.mundo1.reparentTo&#40;render&#41;<br />        <br />        self.mundo2 = loader.loadModel&#40;&quot;cilindro.egg&quot;&#41;<br />        self.mundo2.setPos&#40;0, 5, 0&#41; <br />        self.mundo2.setSx&#40;10&#41;#crece en el eje X<br />        self.mundo2.reparentTo&#40;render&#41;<br />mundo = Mundo&#40;&#41;<br />run&#40;&#41;</pre><br /><br />Un tip es que escalen a la misma relación los modelos al cargarlos <img src="http://losersjuegos.com.ar/foro/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />...también, podemos girar los modelos de forma simple con los métodos<br /><br />setH(h) -gira con respecto al eje z un ángulo h (la h viene de Heading rotates)-<br />setP(p) -gira con respecto al eje x un ángulo p (la p es de   Pitch rotates)-<br />setR(r) -gira con respecto al eje y un ángulo r (y la r es por Roll rotates)-<br />setHpr(h,p,r) -una combinación de los anteriores-<br /><br />en acción:<br /><br /><pre class="prettyprint">import direct.directbase.DirectStart<br />class Mundo&#40;&#41;:<br />    def __init__&#40;self&#41;:<br />        base.setBackgroundColor&#40;0,0,0&#41;<br />        <br />        self.mundo0 = loader.loadModel&#40;&quot;cilindro.egg&quot;&#41;<br />        self.mundo0.setPos&#40;0, -5, 0&#41;<br />        self.mundo0.setSz&#40;10&#41;<br />        self.mundo0.setH&#40;45&#41; #gira con respecto al eje Z<br />        self.mundo0.reparentTo&#40;render&#41;<br />        <br />        self.mundo1 = loader.loadModel&#40;&quot;cilindro.egg&quot;&#41;<br />        self.mundo1.setPos&#40;0, 0, 0&#41;<br />        self.mundo1.setSy&#40;10&#41;<br />        self.mundo1.setR&#40;45&#41; #gira con respecto al eje Y<br />        self.mundo1.reparentTo&#40;render&#41;<br />        <br />        self.mundo2 = loader.loadModel&#40;&quot;cilindro.egg&quot;&#41;<br />        self.mundo2.setPos&#40;0, 5, 0&#41; <br />        self.mundo2.setSx&#40;10&#41;<br />        self.mundo2.setP&#40;45&#41; #gira con respecto al eje X<br />        self.mundo2.reparentTo&#40;render&#41;<br />mundo = Mundo&#40;&#41;<br />run&#40;&#41;</pre><br /><br />Sabiendo esto, podemos acomodar nuestro modelo en la pantalla:<br /><br /><pre class="prettyprint">import direct.directbase.DirectStart<br />class Mundo&#40;&#41;:<br />    def __init__&#40;self&#41;:<br />        base.setBackgroundColor&#40;0,0,0&#41;<br />        self.mundo0 = loader.loadModel&#40;&quot;cilindro.egg&quot;&#41;<br />        self.mundo0.setScale&#40;2,2,2&#41;<br />        self.mundo0.setPos&#40;0, 15, -5&#41;<br />        self.mundo0.setH&#40;90&#41;<br />        self.mundo0.reparentTo&#40;render&#41;<br />mundo = Mundo&#40;&#41;<br />run&#40;&#41;</pre><br /><br /><span style="font-weight: bold">Funciones internas para mover los objetos con código....<br />El gestor de tareas (en ingles, task Manager)</span><br /><br />El gestor de tareas, como dice su nombre, se encarga de gestionar las &quot;tareas&quot;, las tareas son cosas a realizar por panda mientras se ejecuta el programa. El gestor de tareas ejecuta las tareas como si una cola se tratara, y siempre en orden.<br /><br /><br /><pre class="prettyprint">import direct.directbase.DirectStart<br />class Mundo&#40;&#41;:<br />    def __init__&#40;self&#41;:<br />        base.setBackgroundColor&#40;0,0,0&#41;<br />        self.mundo0 = loader.loadModel&#40;&quot;cilindro.egg&quot;&#41;<br />        self.mundo0.setScale&#40;2,2,2&#41;<br />        self.mundo0.setPos&#40;0, 15, -5&#41;<br />        self.mundo0.setH&#40;90&#41;<br />        self.mundo0.reparentTo&#40;render&#41;<br />        print taskMgr #esta linea, imprime las tareas en el gestor<br />mundo = Mundo&#40;&#41;<br />run&#40;&#41;</pre><br /><br />Como se habrán dado cuenta, no utilizamos un bucle, de eso se encarga la función run(), así que, ¿Como aplicamos una función sobre nuestro modelo?, facíl, creamos una nueva tarea.<br /><br /><pre class="prettyprint">import direct.directbase.DirectStart<br />class Mundo&#40;&#41;:<br />    def __init__&#40;self&#41;:<br />        base.setBackgroundColor&#40;0,0,0&#41;<br />        self.mundo0 = loader.loadModel&#40;&quot;cilindro.egg&quot;&#41;<br />        self.mundo0.setScale&#40;2,2,2&#41;<br />        self.mundo0.setPos&#40;0, 15, -5&#41;<br />        self.mundo0.setH&#40;90&#41;<br />        self.mundo0.reparentTo&#40;render&#41;<br />        taskMgr.add&#40;self.gira_cilindro, &quot;gira_cilindro&quot;&#41;<br />    def gira_cilindro&#40;self, task&#41;:<br />        self.mundo0.setR&#40;self.mundo0,-1&#41;<br />        return task.cont<br /><br />mundo = Mundo&#40;&#41;<br />run&#40;&#41;</pre><br /><br />En la linea:<br /><blockquote class="uncited"><div><br />taskMrg.add(self.gira_cilindro, &quot;gira_cilindro&quot;)<br /></div></blockquote><br />Agregamos la tarea a nuestro gestor de tareas (taskMrg) con su método add(función_que queremos_agregar, nombre_que_queramos).<br /><br />creamos el método con:<br /><blockquote class="uncited"><div><br />def gira_cilindro(self, task):<br /></div></blockquote><br /><br />Es importante notar, que el primer argumento después de self, el siguiente argumento debe ser task, para que sea agregado al gestor. Todo lo que esta dentro del metodo es lo que realizara el gestor de tareas<br /><br />Aquí, aparece la linea:<br /><blockquote class="uncited"><div><br />self.mundo0.setR(self.mundo0,-1)<br /></div></blockquote><br /><br />La razón por la cual lo pasamos como propio argumento a su metodo, es para que sea &quot;consiente&quot; de que el giro es relativo a si mismo.<br /><br />Y al final:<br /><br /><blockquote class="uncited"><div><br />return task.cont<br /></div></blockquote><br /><br />Esta linea, su trabajo es, hacer que la tarea se ejecute una vez más (cont de continue).<br /><br />Ahora, veremos al cilindro rodando.<br /><br />Una demostración de como funciona, (y un repaso por lo anterior)<br /><br /><pre class="prettyprint">import direct.directbase.DirectStart<br />class Mundo&#40;&#41;:<br />    def __init__&#40;self&#41;:<br />        base.setBackgroundColor&#40;0,0,0&#41;<br />        <br />        self.mundo0 = loader.loadModel&#40;&quot;cilindro.egg&quot;&#41;<br />        self.mundo0.setPos&#40;0, -15, 0&#41;<br />        self.mundo0.setSz&#40;5&#41;<br />        self.mundo0.setH&#40;45&#41; #gira con respecto al eje Z<br />        self.mundo0.reparentTo&#40;render&#41;<br />        <br />        self.mundo1 = loader.loadModel&#40;&quot;cilindro.egg&quot;&#41;<br />        self.mundo1.setPos&#40;0, 0, 0&#41;<br />        self.mundo1.setSy&#40;5&#41;<br />        self.mundo1.setR&#40;45&#41; #gira con respecto al eje Y<br />        self.mundo1.reparentTo&#40;render&#41;<br />        <br />        self.mundo2 = loader.loadModel&#40;&quot;cilindro.egg&quot;&#41;<br />        self.mundo2.setPos&#40;0, 15, 0&#41; <br />        self.mundo2.setSx&#40;5&#41;<br />        self.mundo2.setP&#40;45&#41; #gira con respecto al eje X<br />        self.mundo2.reparentTo&#40;render&#41;<br />        taskMgr.add&#40;self.gira_cilindros, &quot;gira_cilindros&quot;&#41;<br />    def gira_cilindros&#40;self, task&#41;:<br />        self.mundo0.setH&#40;self.mundo0,-1&#41;<br />        self.mundo1.setR&#40;self.mundo1,-1&#41;<br />        self.mundo2.setP&#40;self.mundo2,-1&#41;<br />        return task.cont<br />mundo = Mundo&#40;&#41;<br />run&#40;&#41;</pre><br /><br /><br />Modificándolo un poco nuestro programa, podemos agregar un delay, es decir, que tarde un tiempo antes de iniciar la acción.<br /><br /><pre class="prettyprint">import direct.directbase.DirectStart<br />class Mundo&#40;&#41;:<br />    def __init__&#40;self&#41;:<br />        base.setBackgroundColor&#40;0,0,0&#41;<br />        self.mundo0 = loader.loadModel&#40;&quot;cilindro.egg&quot;&#41;<br />        self.mundo0.setScale&#40;2,2,2&#41;<br />        self.mundo0.setPos&#40;0, 15, -5&#41;<br />        self.mundo0.setH&#40;90&#41;<br />        self.mundo0.reparentTo&#40;render&#41;<br />        taskMgr.doMethodLater&#40;5,self.gira_cilindro, &quot;gira_cilindro&quot;&#41;<br />    def gira_cilindro&#40;self, task&#41;:<br />        self.mundo0.setR&#40;self.mundo0,-1&#41;<br />        return task.cont<br /><br />mundo = Mundo&#40;&#41;<br />run&#40;&#41;</pre><br /><br />La linea:<br /><br /><blockquote class="uncited"><div><br />taskMrg.add(self.gira_cilindro, &quot;gira_cilindro&quot;)<br /></div></blockquote><br /><br />se a remplazado por:<br /><br /><blockquote class="uncited"><div><br />taskMgr.doMethodLater(5,self.gira_cilindro, &quot;gira_cilindro&quot;)<br /></div></blockquote><br /><br />doMethodLater, realiza la misma función que add, solo que, recibe como argumento, cuantos segundos esperar antes de comenzar a ejecutar la acción, en este caso, esperara 5 segundos antes de ponerlo a rodar. Si fuese ha hacerse una vez, y esperara nuevamente, 5 segundos antes de ejecutarse, nosotros tendríamos que cambiar return task.cont por return task.again (again = de nuevo, si no se te da mucho el ingles <img src="http://losersjuegos.com.ar/foro/images/smilies/icon_wink.gif" alt=";)" title="Wink" /> )<br /><br /><br /><pre class="prettyprint">import direct.directbase.DirectStart<br />class Mundo&#40;&#41;:<br />    def __init__&#40;self&#41;:<br />        base.setBackgroundColor&#40;0,0,0&#41;<br />        self.mundo0 = loader.loadModel&#40;&quot;cilindro.egg&quot;&#41;<br />        self.mundo0.setScale&#40;2,2,2&#41;<br />        self.mundo0.setPos&#40;0, 15, -5&#41;<br />        self.mundo0.setH&#40;90&#41;<br />        self.mundo0.reparentTo&#40;render&#41;<br />        taskMgr.add&#40;5,self.gira_cilindro, &quot;gira_cilindro&quot;&#41;<br />    def gira_cilindro&#40;self, task&#41;:<br />        self.mundo0.setR&#40;self.mundo0, -1&#41;<br />        return task.cont<br /><br />mundo = Mundo&#40;&#41;<br />run&#40;&#41;</pre><br /><br /><span style="font-weight: bold">Utilizando diferencia de tiempo (delta t).</span><br /><br />Nuestro cilindro rueda, pero, si la cantidad de FPS (Frames por segundo <img src="http://losersjuegos.com.ar/foro/images/smilies/icon_smile.gif" alt=":)" title="Smile" /> )del juego es grande, se vera mucho mas rápido. Imaginemos que por cada frame de nuestro juego, el tiempo es de 0.1 unidades, es decir, si corre a 60 FPS, el tiempo de un segundo seria 6 unidades, si va a 30 FSP, son 3 unidades. Ahora, imaginemos que esas unidades son el numero de veces que se realizan las tareas de nuestro gestor.<br /><br />Para lograr velocidad constante, se utiliza la técnica de la diferencia de tiempo (delta t).<br /><br />en nuestra función que mueve el cilindro (girar_cilindro) creamos una variable donde almacenaremos la diferencia de tiempo.<br /><br /><blockquote class="uncited"><div><br />dt = globalClock.getDt()<br /></div></blockquote><br /><br />El secreto es, ahora, poner cuanto queremos que se mueva en un segundo y multiplicarlo por dt, en el programa seria:<br /><br /><blockquote class="uncited"><div><br />self.mundo0.setR(self.mundo0, -20*dt)<br /></div></blockquote><br /><br />es decir, que girara 20 grados cada segundo. Esto se aplica también para los métodos de cambio de posición.<br /><br />El programa quedaría así:<br /><br /><pre class="prettyprint">import direct.directbase.DirectStart<br />class Mundo&#40;&#41;:<br />    def __init__&#40;self&#41;:<br />        base.setBackgroundColor&#40;0,0,0&#41;<br />        self.mundo0 = loader.loadModel&#40;&quot;cilindro.egg&quot;&#41;<br />        self.mundo0.setScale&#40;2,2,2&#41;<br />        self.mundo0.setPos&#40;0, 15, -5&#41;<br />        self.mundo0.setH&#40;90&#41;<br />        self.mundo0.reparentTo&#40;render&#41;<br />        taskMgr.add&#40;self.gira_cilindro, &quot;gira_cilindro&quot;&#41;<br />    def gira_cilindro&#40;self, task&#41;:<br />        dt = globalClock.getDt&#40;&#41;<br />        self.mundo0.setR&#40;self.mundo0, -20*dt&#41;<br />        return task.cont<br /><br />mundo = Mundo&#40;&#41;<br />run&#40;&#41;</pre><br /><br />Pero, surge un problema. ¿Que sucede si la cantidad de FPS cambia?, si en un momento son muchos y al siguiente baja.<br /><br />Esto se soluciona con dos lineas más de código:<br /><br /><pre class="prettyprint">if  dt &gt; 0.20:<br />    return task.cont</pre><br /><br />En el if, se revisa si esta comenzando a aumentar el numero de FPS, de pasar eso, hace que la tarea se agrege al gesto una vez más. Agregando estas lineas, queda así el programa.<br /><br /><pre class="prettyprint">import direct.directbase.DirectStart<br />class Mundo&#40;&#41;:<br />    def __init__&#40;self&#41;:<br />        base.setBackgroundColor&#40;0,0,0&#41;<br />        self.mundo0 = loader.loadModel&#40;&quot;cilindro.egg&quot;&#41;<br />        self.mundo0.setScale&#40;2,2,2&#41;<br />        self.mundo0.setPos&#40;0, 15, -5&#41;<br />        self.mundo0.setH&#40;90&#41;<br />        self.mundo0.reparentTo&#40;render&#41;<br />        taskMgr.add&#40;self.gira_cilindro, &quot;gira_cilindro&quot;&#41;<br />    def gira_cilindro&#40;self, task&#41;:<br />        dt = globalClock.getDt&#40;&#41;<br />        if  dt &gt; 0.20:<br />            return task.cont<br />        self.mundo0.setR&#40;self.mundo0, -20*dt&#41;<br />        return task.cont<br /><br />mundo = Mundo&#40;&#41;<br />run&#40;&#41;</pre><br /><br /><br />Agrego una nave al programa:<br /><br /><pre class="prettyprint">import direct.directbase.DirectStart<br />class Mundo&#40;&#41;:<br />    def __init__&#40;self&#41;:<br />        base.setBackgroundColor&#40;0,0,0&#41;<br />        self.mundo0 = loader.loadModel&#40;&quot;cilindro.egg&quot;&#41;<br />        self.nave = loader.loadModel&#40;&quot;nave_01.egg&quot;&#41;<br />        <br />        self.nave.setScale&#40;1,1,1&#41;<br />        self.mundo0.setScale&#40;2,2,2&#41;<br />        <br />        self.nave.setPos&#40;0,15,0&#41;<br />        self.mundo0.setPos&#40;0, 15, -5&#41;<br />        <br />        self.nave.setH&#40;180&#41;<br />        self.mundo0.setH&#40;90&#41;<br />        <br />        self.nave.reparentTo&#40;render&#41;<br />        self.mundo0.reparentTo&#40;render&#41;<br />        <br />        taskMgr.add&#40;self.gira_cilindro, &quot;gira_cilindro&quot;&#41;<br /><br />    def gira_cilindro&#40;self, task&#41;:<br />        dt = globalClock.getDt&#40;&#41;<br />        if  dt &gt; 0.20:<br />            return task.cont<br />        self.mundo0.setR&#40;self.mundo0, -20*dt&#41;<br />        return task.cont<br /><br />mundo = Mundo&#40;&#41;<br />run&#40;&#41;</pre><br /><br /><span style="font-weight: bold">Eventos y entradas de usuario.</span><br /><br />Nuestro programa se ve -considerando lo poco trabajado que esta- bastante bien. Pero no sirve de mucho si no podemos hacer nada mas que ver. Ahora, vamos a trabajar en lo necesario para que la nave añadida se mueva cuando presionemos una tecla. Para eso, agregamos al principio de nuestro archivo la siguiente linea:<br /><br /><blockquote class="uncited"><div><br />from direct.showbase.DirectObject import DirectObject<br /></div></blockquote><br /><br />DirectObject es una clase interna de panda3D que contiene utilidades para manejar los objetos y el mundo. Entre sus utilidades, se encuentra el método accept().<br /><br />ahora, justo donde comienza nuestra clase Mundo(), heredamos los métodos de DirectObject para que ahora, sean nuestros:<br /><br /><blockquote class="uncited"><div><br />class Mundo():<br /></div></blockquote><br /><br />pasa a ser <br /><blockquote class="uncited"><div><br />class Mundo(DirectObject)<br /></div></blockquote><br /><br />La sintaxis del método accept es accept(&quot;nombre_del_evento&quot;, función_a_hacer).<br /><br /><br /><pre class="prettyprint">import direct.directbase.DirectStart<br />from direct.showbase.DirectObject import DirectObject #importamos DirectObject<br /><br />class Mundo&#40;DirectObject&#41;: #lo heredamos<br />    def __init__&#40;self&#41;:<br />        base.setBackgroundColor&#40;0,0,0&#41;<br />        self.mundo0 = loader.loadModel&#40;&quot;cilindro.egg&quot;&#41;<br />        self.nave = loader.loadModel&#40;&quot;nave_01.egg&quot;&#41;<br />        <br />        self.nave.setScale&#40;1,1,1&#41;<br />        self.mundo0.setScale&#40;2,2,2&#41;<br />        <br />        self.nave.setPos&#40;0,15,0&#41;<br />        self.mundo0.setPos&#40;0, 15, -5&#41;<br />        <br />        self.nave.setH&#40;180&#41;<br />        self.mundo0.setH&#40;90&#41;<br />        <br />        self.nave.reparentTo&#40;render&#41;<br />        self.mundo0.reparentTo&#40;render&#41;<br />        <br />        self.accept&#40;&quot;h&quot;, self.di_hola&#41; <br />        # en esta parte usamos accept<br />        # el nombre del evento es &quot;h&quot;<br />        # la función es di_hola<br />        <br />        taskMgr.add&#40;self.gira_cilindro, &quot;gira_cilindro&quot;&#41;<br /><br />    def gira_cilindro&#40;self, task&#41;:<br />        dt = globalClock.getDt&#40;&#41;<br />        if  dt &gt; 0.20:<br />            return task.cont<br />        self.mundo0.setR&#40;self.mundo0, -20*dt&#41;<br />        return task.cont<br />    <br />    def di_hola&#40;self&#41;:<br />        print &quot;Hola a todos&quot;<br /><br />mundo = Mundo&#40;&#41;<br />run&#40;&#41;</pre><br /><br />El programa de arriba contiene la implementación del método accept, en particular, al apretar la letra h, mandara a llamar a la función &quot;di_hola&quot; y realizara su contenido, en este caso, imprimir un &quot;Hola a todos&quot;.<br /><br />La pregunta que debes estar haciendo (o deberías ) es ¿cuales son los nombres de eventos del teclado?.<br /><br />Panda3D contiene un nombre de evento para casi todas las teclas, por ejemplo:<br /><br /><pre class="prettyprint">&quot;a&quot;, &quot;d&quot;, &quot;2&quot;, &quot;{&quot;</pre> ... etc.<br /><br />todos esos, son nombres validos.<br /><br />Los que no lo son:<br /><br /><pre class="prettyprint">&quot;A&quot;, &quot;B&quot;, &quot;*&quot;, &quot;#&quot;</pre><br /><br />De los que no funcionan, lo que tienen en común, es que son en mayúsculas, o el segundo carácter de una tecla. Esto puede parecer bueno en principio, pero en forma personal, es molesto, ya que, en un teclado ingles, el primer carácter es &quot;[&quot;, pero el segundo &quot;{&quot; Así que hay que tener cuidado con eso.<br /><br />El evento para que al dejar de presionar una tecla se llame a la función es agregando un &quot;-up&quot; al nombre:<br /><br /><pre class="prettyprint">&quot;a-up&quot;, &quot;2-up&quot;, &quot;{-up&quot;</pre><br /><br />Y si queremos que el evento ocurra mientras mantenemos presionada la tecla es agregando &quot;-repeat&quot; al nombre:<br /><br /><pre class="prettyprint">&quot;a-repeat&quot;, &quot;2-repeat&quot;, &quot;{-repeat&quot;</pre><br /><br />Los nombres de eventos para teclas que no tienen un carácter imprimible, están por su nombre en ingles:<br /><br /><pre class="prettyprint">&quot;escape&quot;, &quot;f1&quot;, &quot;f2&quot;, &quot;f12&quot;, &quot;print_screen&quot;, &quot;scroll_lock&quot;, &quot;num_lock&quot;, &quot;backspace&quot;, &quot;insert&quot;, &quot;home&quot;, &quot;page_up&quot;, &quot;delete&quot;, &quot;end&quot;, &quot;page_down&quot;, &quot;caps_lock&quot;, &quot;enter&quot;, &quot;space&quot;, &quot;tab&quot;, &quot;pause&quot;, &quot;arrow_left&quot;, &quot;arrow_up&quot;, &quot;arrow_down&quot;, &quot;arrow_right&quot;, &quot;shift&quot;, &quot;lshift&quot;, &quot;rshift&quot;, &quot;control&quot;, &quot;alt&quot;, &quot;lcontrol&quot;, &quot;lalt&quot;, &quot;ralt&quot;, &quot;rcontrol&quot;</pre><br /><br />Algunas teclas especiales (shift, control, alt), pueden llamarse en combinaciones:<br /><br /><pre class="prettyprint">&quot;shift-a&quot;, &quot;control-a&quot;, &quot;shift-control-a&quot;, &quot;shift-control-alt-a&quot;</pre><br /><br />También se pueden gestionar las entradas del ratón con este método. Los nombres de los eventos para el ratón son:<br /><br /><pre class="prettyprint">&quot;mouse1&quot;: clic izquierdo<br />&quot;mouse2&quot;: botón medio <br />&quot;mouse3&quot;: clic derecho</pre><br /><br /><span style="font-weight: bold"><br />Creando un keyMap (mapa de teclas) y extendiendo la funcionalidad de accept()</span><br /><br />Un keyMap (usare el nombre en ingles) es solo un diccionario en el que meteremos las teclas y su valor binario,<br />en este caso:<br /><br /><blockquote class="uncited"><div><br />self.keyMap = {&quot;a&quot;:False, &quot;s&quot;:False, &quot;d&quot;:False, &quot;w&quot;:False}<br /></div></blockquote><br /><br />Comente que extenderíamos la funcionalidad de accept. Bien, accept no solo recibe como argumentos el nombre del evento y la función a llamar, también, puede tomar y en su momento pasar los argumentos de la función a llamar. ¿Como?.<br /><br />accept(&quot;nombre_evento&quot;, función, [lista,de,argumentos,a,función])<br /><br />Esto nos servirá para hacer que nuestro modelo se mueva.<br /><br />En donde llamábamos a accept, lo remplazamos por lo siguiente:<br /><br /><pre class="prettyprint">self.keyMap = {&quot;a&quot;:False, &quot;s&quot;:False, &quot;d&quot;:False, &quot;w&quot;:False}<br />self.accept&#40;&quot;a&quot;, self.di_tecla, [&quot;a&quot;,True]&#41;<br />self.accept&#40;&quot;s&quot;, self.di_tecla, [&quot;s&quot;,True]&#41;<br />self.accept&#40;&quot;d&quot;, self.di_tecla, [&quot;d&quot;,True]&#41;<br />self.accept&#40;&quot;w&quot;, self.di_tecla, [&quot;w&quot;,True]&#41;<br />self.accept&#40;&quot;a-up&quot;, self.di_tecla, [&quot;a&quot;,False]&#41;<br />self.accept&#40;&quot;s-up&quot;, self.di_tecla, [&quot;s&quot;,False]&#41;<br />self.accept&#40;&quot;d-up&quot;, self.di_tecla, [&quot;d&quot;,False]&#41;<br />self.accept&#40;&quot;w-up&quot;, self.di_tecla, [&quot;w&quot;,False]&#41;</pre><br /><br />También cambiamos la función di_hola por di_tecla:<br /><br /><br /><pre class="prettyprint">def di_tecla&#40;self, tecla, valor&#41;:<br />    self.keyMap[tecla] = valor</pre><br /><br />Ahora, esas partes del código sirve como un interruptor, y no solo eso, renombramos &quot;gira_cilindro&quot; a &quot;actualiza&quot; y le agregamos las siguientes lineas:<br /><br /><pre class="prettyprint">if&#40;self.keyMap[&quot;w&quot;] == True&#41;:<br />    self.nave.setY&#40;self.nave, -10 * dt&#41;<br />if&#40;self.keyMap[&quot;d&quot;] == True&#41;:<br />    self.nave.setX&#40;self.nave, -5 * dt&#41;<br />if&#40;self.keyMap[&quot;a&quot;] == True&#41;:<br />    self.nave.setX&#40;self.nave, 5 * dt&#41;<br />if&#40;self.keyMap[&quot;s&quot;] == True&#41;:<br />    self.nave.setY&#40;self.nave, 10 * dt&#41;</pre><br /><br />Estas ultimas lineas realizan la magia de mover la nave.<br /><br />Nuestro programa queda así:<br /><br /><pre class="prettyprint">import direct.directbase.DirectStart<br />from direct.showbase.DirectObject import DirectObject #importamos DirectObject<br /><br />class Mundo&#40;DirectObject&#41;:<br />    def __init__&#40;self&#41;:<br />    <br />        base.setBackgroundColor&#40;0,0,0&#41;<br />        self.mundo0 = loader.loadModel&#40;&quot;cilindro.egg&quot;&#41;<br />        self.nave = loader.loadModel&#40;&quot;nave_01.egg&quot;&#41;<br />        <br />        self.nave.setScale&#40;1,1,1&#41;<br />        self.mundo0.setScale&#40;2,2,2&#41;<br />        <br />        self.nave.setPos&#40;0,15,0&#41;<br />        self.mundo0.setPos&#40;0, 15, -5&#41;<br />        <br />        self.nave.setH&#40;180&#41;<br />        self.mundo0.setH&#40;90&#41;<br />        <br />        self.nave.reparentTo&#40;render&#41;<br />        self.mundo0.reparentTo&#40;render&#41;<br />        <br />        base.camera.reparentTo&#40;self.nave&#41;<br />        base.camera.setY&#40;base.camera, -5&#41;<br /><br />        <br />        self.keyMap = {&quot;a&quot;:False, &quot;s&quot;:False, &quot;d&quot;:False, &quot;w&quot;:False}<br />        self.accept&#40;&quot;a&quot;, self.di_tecla, [&quot;a&quot;,True]&#41;<br />        self.accept&#40;&quot;s&quot;, self.di_tecla, [&quot;s&quot;,True]&#41;<br />        self.accept&#40;&quot;d&quot;, self.di_tecla, [&quot;d&quot;,True]&#41;<br />        self.accept&#40;&quot;w&quot;, self.di_tecla, [&quot;w&quot;,True]&#41;<br />        self.accept&#40;&quot;a-up&quot;, self.di_tecla, [&quot;a&quot;,False]&#41;<br />        self.accept&#40;&quot;s-up&quot;, self.di_tecla, [&quot;s&quot;,False]&#41;<br />        self.accept&#40;&quot;d-up&quot;, self.di_tecla, [&quot;d&quot;,False]&#41;<br />        self.accept&#40;&quot;w-up&quot;, self.di_tecla, [&quot;w&quot;,False]&#41;<br />        <br />        #no olviden cambiar el nombre del gestor de tareas<br />        taskMgr.add&#40;self.actualiza, &quot;actualiza&quot;&#41; <br /><br />    def actualiza&#40;self, task&#41;:<br />        dt = globalClock.getDt&#40;&#41;<br />        if  dt &gt; 0.20:<br />            return task.cont<br />        self.mundo0.setR&#40;self.mundo0, -20*dt&#41;<br />        base.camera.reparentTo&#40;self.nave&#41;<br />        base.camera.setY&#40;base.camera, -5&#41;<br />        if&#40;self.keyMap[&quot;w&quot;] == True&#41;:<br />            self.nave.setY&#40;self.nave, -10 * dt&#41;<br />        if&#40;self.keyMap[&quot;d&quot;] == True&#41;:<br />            self.nave.setX&#40;self.nave, -5 * dt&#41;<br />        if&#40;self.keyMap[&quot;a&quot;] == True&#41;:<br />            self.nave.setX&#40;self.nave, 5 * dt&#41;<br />        if&#40;self.keyMap[&quot;s&quot;] == True&#41;:<br />            self.nave.setY&#40;self.nave, 10 * dt&#41;<br />        return task.cont<br />    <br />    def di_tecla&#40;self, tecla, valor&#41;:<br />        self.keyMap[tecla] = valor<br /><br />mundo = Mundo&#40;&#41;<br />run&#40;&#41;</pre><br /><br />Haciendo que la cámara nos siga:<br /><br /><br />Para esto, hay que desactivar todos los métodos relacionados por default con el ratón. para eso, agregamos en __init__ la siguiente linea:<br /><br /><blockquote class="uncited"><div><br />base.disableMouse()<br /></div></blockquote><br /><br />ahora, en nuestro método actualiza, debajo de donde se revisa el estado de las teclas, ponemos esto:<br /><br /><br /><pre class="prettyprint">if&#40;base.mouseWatcherNode.hasMouse&#40;&#41; == True&#41;:<br />    mpos = base.mouseWatcherNode.getMouse&#40;&#41;<br />    base.camera.setP&#40;mpos.getY&#40;&#41; * 30&#41;<br />    base.camera.setH&#40;mpos.getX&#40;&#41; * -30&#41;</pre><br /><br />Si, se ve un poco extraño, lo que hace el programa es que la cámara gira basada en la posición del ratón en la ventana. Para ser específicos, la cantidad que gira, es un porcentaje de 30° de acuerdo con que tan lejos este el ratón del centro de la ventana.<br /><br />El código luce así:<br /><br /><br /><pre class="prettyprint">import direct.directbase.DirectStart<br />from direct.showbase.DirectObject import DirectObject #importamos DirectObject<br /><br />class Mundo&#40;DirectObject&#41;:<br />    def __init__&#40;self&#41;:<br />        base.disableMouse&#40;&#41; #desactivamos las acciones por defecto del raton <br />        base.setBackgroundColor&#40;0,0,0&#41;<br />        self.mundo0 = loader.loadModel&#40;&quot;cilindro.egg&quot;&#41;<br />        self.nave = loader.loadModel&#40;&quot;nave_01.egg&quot;&#41;<br />        <br />        self.nave.setScale&#40;1,1,1&#41;<br />        self.mundo0.setScale&#40;2,2,2&#41;<br />        <br />        self.nave.setPos&#40;0,15,0&#41;<br />        self.mundo0.setPos&#40;0, 15, -5&#41;<br />        <br />        self.nave.setH&#40;180&#41;<br />        self.mundo0.setH&#40;90&#41;<br />        <br />        self.nave.reparentTo&#40;render&#41;<br />        self.mundo0.reparentTo&#40;render&#41;<br />        <br />        self.keyMap = {&quot;a&quot;:False, &quot;s&quot;:False, &quot;d&quot;:False, &quot;w&quot;:False}<br />        self.accept&#40;&quot;a&quot;, self.di_tecla, [&quot;a&quot;,True]&#41;<br />        self.accept&#40;&quot;s&quot;, self.di_tecla, [&quot;s&quot;,True]&#41;<br />        self.accept&#40;&quot;d&quot;, self.di_tecla, [&quot;d&quot;,True]&#41;<br />        self.accept&#40;&quot;w&quot;, self.di_tecla, [&quot;w&quot;,True]&#41;<br />        self.accept&#40;&quot;a-up&quot;, self.di_tecla, [&quot;a&quot;,False]&#41;<br />        self.accept&#40;&quot;s-up&quot;, self.di_tecla, [&quot;s&quot;,False]&#41;<br />        self.accept&#40;&quot;d-up&quot;, self.di_tecla, [&quot;d&quot;,False]&#41;<br />        self.accept&#40;&quot;w-up&quot;, self.di_tecla, [&quot;w&quot;,False]&#41;<br />        <br />        #no olviden cambiar el nombre del gestor de tareas<br />        taskMgr.add&#40;self.actualiza, &quot;actualiza&quot;&#41; <br /><br />    def actualiza&#40;self, task&#41;:<br />        dt = globalClock.getDt&#40;&#41;<br />        if  dt &gt; 0.20:<br />            return task.cont<br />        self.mundo0.setR&#40;self.mundo0, -20*dt&#41;<br />        if&#40;self.keyMap[&quot;w&quot;] == True&#41;:<br />            self.nave.setY&#40;self.nave, -10 * dt&#41;<br />        if&#40;self.keyMap[&quot;d&quot;] == True&#41;:<br />            self.nave.setX&#40;self.nave, -20 * dt&#41;<br />            self.nave.setH&#40;self.nave, -10 * dt&#41;<br />        if&#40;self.keyMap[&quot;a&quot;] == True&#41;:<br />            self.nave.setX&#40;self.nave, 20 * dt&#41;<br />            self.nave.setH&#40;self.nave, 10 * dt&#41;<br />        if&#40;self.keyMap[&quot;s&quot;] == True&#41;:<br />            self.nave.setY&#40;self.nave, 20 * dt&#41;<br />        <br />        #aqui hacemos que la camara siga al raton<br />        if&#40;base.mouseWatcherNode.hasMouse&#40;&#41; == True&#41;:<br />            mpos = base.mouseWatcherNode.getMouse&#40;&#41;<br />            base.camera.setP&#40;mpos.getY&#40;&#41; * 30&#41;<br />            base.camera.setH&#40;mpos.getX&#40;&#41; * -30&#41;<br />        return task.cont<br />    <br />    def di_tecla&#40;self, tecla, valor&#41;:<br />        self.keyMap[tecla] = valor<br /><br />mundo = Mundo&#40;&#41;<br />run&#40;&#41;</pre><br /><br />Para seguirlo, hay que pensar en que tiene que ir atrás de el (para este ejemplo), en ese caso, su posición es menor. En el siguiente ejemplo, se modifica el programa.<br /><br /><pre class="prettyprint">import direct.directbase.DirectStart<br />from direct.showbase.DirectObject import DirectObject<br /><br />class Mundo&#40;DirectObject&#41;:<br />    def __init__&#40;self&#41;:<br />        base.disableMouse&#40;&#41; #desactivamos las acciones por defecto del raton <br />        base.setBackgroundColor&#40;0,0,0&#41;<br />        self.mundo0 = loader.loadModel&#40;&quot;cilindro.egg&quot;&#41;<br />        self.nave = loader.loadModel&#40;&quot;nave_01.egg&quot;&#41;<br />        <br />        self.nave.setScale&#40;1,1,1&#41;<br />        self.mundo0.setScale&#40;2,2,2&#41;<br />        <br />        self.nave.setPos&#40;0,15,0&#41;<br />        self.mundo0.setPos&#40;0, 15, -5&#41;<br />        <br />        self.nave.setH&#40;180&#41;<br />        self.mundo0.setH&#40;90&#41;<br />        <br />        self.nave.reparentTo&#40;render&#41;<br />        self.mundo0.reparentTo&#40;render&#41;<br />        <br />        self.keyMap = {&quot;a&quot;:False, &quot;s&quot;:False, &quot;d&quot;:False, &quot;w&quot;:False}<br />        self.accept&#40;&quot;a&quot;, self.di_tecla, [&quot;a&quot;,True]&#41;<br />        self.accept&#40;&quot;s&quot;, self.di_tecla, [&quot;s&quot;,True]&#41;<br />        self.accept&#40;&quot;d&quot;, self.di_tecla, [&quot;d&quot;,True]&#41;<br />        self.accept&#40;&quot;w&quot;, self.di_tecla, [&quot;w&quot;,True]&#41;<br />        self.accept&#40;&quot;a-up&quot;, self.di_tecla, [&quot;a&quot;,False]&#41;<br />        self.accept&#40;&quot;s-up&quot;, self.di_tecla, [&quot;s&quot;,False]&#41;<br />        self.accept&#40;&quot;d-up&quot;, self.di_tecla, [&quot;d&quot;,False]&#41;<br />        self.accept&#40;&quot;w-up&quot;, self.di_tecla, [&quot;w&quot;,False]&#41;<br />        <br />        #no olviden cambiar el nombre del gestor de tareas<br />        taskMgr.add&#40;self.actualiza, &quot;actualiza&quot;&#41; <br /><br />    def actualiza&#40;self, task&#41;:<br />        dt = globalClock.getDt&#40;&#41;<br />        if  dt &gt; 0.20:<br />            return task.cont<br />        self.mundo0.setR&#40;self.mundo0, -20*dt&#41;<br />        if&#40;self.keyMap[&quot;w&quot;] == True&#41;:<br />            self.nave.setY&#40;self.nave, -30 * dt&#41;<br />        if&#40;self.keyMap[&quot;d&quot;] == True&#41;:<br />            self.nave.setH&#40;self.nave, -20 * dt&#41;<br />        if&#40;self.keyMap[&quot;a&quot;] == True&#41;:<br />            self.nave.setH&#40;self.nave, 45 * dt&#41;#ahora, nuestra nave gira<br />        if&#40;self.keyMap[&quot;s&quot;] == True&#41;:<br />            self.nave.setY&#40;self.nave, 45 * dt&#41;#tambien aqui...<br />        <br />        #tomamos la posicion de la nave<br />        pos =  self.nave.getPos&#40;&#41;<br />        #hacemos que la camara este detras de la nave...<br />        base.camera.setPos&#40;pos[0],pos[1]-15,pos[2]+2&#41;<br />        #aqui hacemos que la camara siga al raton<br />        if&#40;base.mouseWatcherNode.hasMouse&#40;&#41; == True&#41;:<br />            mpos = base.mouseWatcherNode.getMouse&#40;&#41;<br />            #y que cabie la altitud de nuestra nave conforme movemos el raton.<br />            self.nave.setP&#40;mpos.getY&#40;&#41; * -30&#41;<br /><br /><br />        return task.cont<br />    <br />    def di_tecla&#40;self, tecla, valor&#41;:<br />        self.keyMap[tecla] = valor<br /><br />mundo = Mundo&#40;&#41;<br />run&#40;&#41;</pre><br /><br />Bueno, eso a sido todo, aquí adjunto el programa final, con los modelos utilizados. Recuerden, dudas al final.<br /><br />(Este es el primer tutorial de otros que vienen <img src="http://losersjuegos.com.ar/foro/images/smilies/icon_wink.gif" alt=";)" title="Wink" />)<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=2345">Barajas</a> — Mar Dic 27, 2011 2:24 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Barajas]]></name></author>
<updated>2011-10-13T05:04:43+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=877&amp;p=6096#p6096</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=877&amp;p=6096#p6096"/>
<title type="html"><![CDATA[3D • Re: Uso de python en Blender]]></title>

<category term="3D" scheme="http://losersjuegos.com.ar/foro/viewforum.php?f=20" label="3D"/>
<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=877&amp;p=6096#p6096"><![CDATA[
Bueno, sobre la importación de la textura, si aun te causa problemas, fíjate en el principio del archivo egg, hay una parte que dice &quot;Texture&quot;, ejemplo:<br /><br /><pre class="prettyprint">&lt;Texture&gt; Material_00_Tex {<br />  &quot;http://losersjuegos.com.ar/foro/Untitled.tga&quot;<br />  &lt;Scalar&gt; saved-result { 1 }<br />  &lt;Scalar&gt; envtype { MODULATE }<br />  &lt;Scalar&gt; minfilter { LINEAR_MIPMAP_LINEAR }<br />  &lt;Scalar&gt; magfilter { LINEAR_MIPMAP_LINEAR }<br />  &lt;Scalar&gt; wrap { REPEAT }<br />}</pre> <br /><br />Podrías ver si el nombre del archivo de la textura esta bien... <img src="http://losersjuegos.com.ar/foro/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=2345">Barajas</a> — Jue Oct 13, 2011 5:04 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ookami]]></name></author>
<updated>2011-10-12T15:47:28+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=877&amp;p=6092#p6092</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=877&amp;p=6092#p6092"/>
<title type="html"><![CDATA[3D • Re: Uso de python en Blender]]></title>

<category term="3D" scheme="http://losersjuegos.com.ar/foro/viewforum.php?f=20" label="3D"/>
<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=877&amp;p=6092#p6092"><![CDATA[
Que texturas estas usando, de procesos o de mapa de bits?... Si son de procesos dudo mucho que la pueda mapear algo que no sea BGE o YafArray, además los juegos con texturas de procesos no aplica aun, serian demasiado lentos. Por otro lado y mas probable es que estés usando texturas de imágenes, en cuyo caso el problema puede ser que no has empaquetado la imagen en el archivo .blend, eos se hace fácil en 2.5x dadle a File -&gt; External Data -&gt; Make All Paths Relative y luego File -&gt; External Data -&gt; Pack into .blend file luego de eso si puedes exportarlo.<br /><br />Paz y suerte.<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=2521">ookami</a> — Mié Oct 12, 2011 3:47 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[hugoruscitti]]></name></author>
<updated>2011-10-02T02:50:08+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=1295&amp;p=6026#p6026</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=1295&amp;p=6026#p6026"/>
<title type="html"><![CDATA[3D • Re: ¿Por qué hay que estar registrado para ver el foro 3D?]]></title>

<category term="3D" scheme="http://losersjuegos.com.ar/foro/viewforum.php?f=20" label="3D"/>
<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=1295&amp;p=6026#p6026"><![CDATA[
efectivamente... es un error. Voy a tratar de corregirlo, el panel<br />de administracion de phpbb3 es un infierno, esta lleno de botoncitos...<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=3">hugoruscitti</a> — Dom Oct 02, 2011 2:50 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Barajas]]></name></author>
<updated>2011-10-01T21:25:17+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=1295&amp;p=6024#p6024</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=1295&amp;p=6024#p6024"/>
<title type="html"><![CDATA[3D • ¿Por qué hay que estar registrado para ver el foro 3D?]]></title>

<category term="3D" scheme="http://losersjuegos.com.ar/foro/viewforum.php?f=20" label="3D"/>
<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=1295&amp;p=6024#p6024"><![CDATA[
Es solo una duda... espero que sea error de administración <img src="http://losersjuegos.com.ar/foro/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=2345">Barajas</a> — Sab Oct 01, 2011 9:25 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[yasser_001200]]></name></author>
<updated>2010-11-26T20:30:10+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=939&amp;p=4489#p4489</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=939&amp;p=4489#p4489"/>
<title type="html"><![CDATA[3D • Re: models para panda3d]]></title>

<category term="3D" scheme="http://losersjuegos.com.ar/foro/viewforum.php?f=20" label="3D"/>
<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=939&amp;p=4489#p4489"><![CDATA[
Veras, ruscitti. Aquí dejo un compactado donde está mi modelo en .x, la imagen de mi mkodelo en jpg que es como debería verse y el archivo .py a compilar con panda3D para que vea como pierde la textura y se torna blanco brilloso. <br /><br /><a href="http://www.2shared.com/fadmin/17319193/13518574/pandatar.gz.html" class="postlink">http://www.2shared.com/fadmin/17319193/13518574/pandatar.gz.html</a><br /><br />el modelo hay que rotarlo hasta que logres verlo bien. Analiza y luego me dices en qué me estoy equivocando<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=1935">yasser_001200</a> — Vie Nov 26, 2010 8:30 pm</p><hr />
]]></content>
</entry>
</feed>