<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="es">
<link rel="self" type="application/atom+xml" href="http://losersjuegos.com.ar/foro/feed.php?f=8&amp;t=1068" />

<title>LosersJuegos</title>
<subtitle>Desarrollando videojuegos libres</subtitle>
<link href="http://losersjuegos.com.ar/foro/index.php" />
<updated>2011-03-07T11:10:59+00:00</updated>

<author><name><![CDATA[LosersJuegos]]></name></author>
<id>http://losersjuegos.com.ar/foro/feed.php?f=8&amp;t=1068</id>
<entry>
<author><name><![CDATA[.teri]]></name></author>
<updated>2011-03-07T11:10:59+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5186#p5186</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5186#p5186"/>
<title type="html"><![CDATA[Re: C++ y Lua para videojuegos]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5186#p5186"><![CDATA[
<blockquote class="uncited"><div><br />Hacer las declaraciones de lo que quieres exportar a lua es como hacer un makefile de un proyecto de 100 fuentes a mano, para eso existe swig, realiza las llamadas a la biblioteca de lua para poder ser llamadas desde el interprete.<br /></div></blockquote><br /><br />Depende qué estas exportando exactamente o si es lo más adecuado o no. Lua también lo uso para escribir código de alto nivel, no funciones o métodos individualizados, aparte de usarlo como lenguaje de descripción. Personalmente veo que si uno llega a decir eso (lo de <span style="font-weight: bold">escribió</span>), entonces deberías pensar seriamente el diseño o la solución porque seguramente estas haciendo algo mal.<br /><br /><blockquote class="uncited"><div><br />Por cierto, si tienes ejemplos de lo que hayas hecho con lua pasalos no?<br /></div></blockquote><br /><br />Bueno, jamás pensé que llegaría a escribir esto, y no sé si es lo más adecuado como para ejemplo. Estuve haciendo un proyecto, funcional, pero no terminado de algo parecido a LÖVE pero de muy alto nivel, gran ejemplo de lo que estaba haciendo, y en el que tan solo tienes que escribir qué es lo que vas a hacer.<br /><br /><!-- m --><a class="postlink" href="http://code.google.com/p/bangameengine/">http://code.google.com/p/bangameengine/</a><!-- m --><br /><br />Por ejemplo, si quieres escribir &quot;hola mundo&quot; por pantalla, nada más desde un archivo lua tienes que escribir<br /><br /><dl class="codebox"><dt>Code: </dt><dd><code>bange.SetBgColor(50, 50, 50)<br /><br />scene = bange.NewScene(1)<br />view = bange.NewView()<br /><br />view.scene = scene<br /><br />scene:SetLayer(1, LayerObject)<br />string = scene&#91;1&#93;:AddSimpleString(&quot;Hello world!&quot;)<br /><br />bange.Run = {views = {view}}<br /><br /></code></dd></dl><br /><br />No, lo de &quot;bange&quot; no es un objeto, es una tabla donde he almacenado todas las funciones, que son pocas y las justas, para comunicarse con el motor, algo así como un namespace de C++. Si ves las distintas clases como scene o layer, verás como se propaga los métodos NewIndex o Index por las clases padres o hermanas. Si te descargas el proyecto desde mercurial (que es de la única forma), verás el ejemplo en un archivo 7z, que puedes llamar escribiendo &quot;bange helloworld.7z&quot;. Dentro del paquete verás config.lua donde está la configuración de la ventana, y run.lua que es el código escrito aquí. Mira sobre todo el módulo <a href="http://code.google.com/p/bangameengine/source/browse/src/bange_base.cpp" class="postlink">base</a> del proyecto, porque ahí es donde está todo el meollo.<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=34">.teri</a> — Lun Mar 07, 2011 11:10 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[carlostex]]></name></author>
<updated>2011-03-07T00:30:20+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5185#p5185</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5185#p5185"/>
<title type="html"><![CDATA[Re: C++ y Lua para videojuegos]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5185#p5185"><![CDATA[
<blockquote><div><cite>.teri escribió:</cite><br />SWIG hace eso por tí, pero para mi gusto veo el problema del mantenimiento y la organización. Más que nada a mi parecer uno no tiene control de lo que estas haciendo. Además, ¿qué necesidad tiene uno de crear varias &quot;instancias&quot; de motor cuando solamente tiene sentido que haya un solo motor? No contando además se que puede iniciar el motor sin necesidad de módulo desde un iniciar() en vez de m:iniciar(), o mejor aún, de ninguna forma.<br /></div></blockquote><br /><br />Hacer las declaraciones de lo que quieres exportar a lua es como hacer un makefile de un proyecto de 100 fuentes a mano, para eso existe swig, realiza las llamadas a la biblioteca de lua para poder ser llamadas desde el interprete.<br />Lo que dices de llamar a funciones como iniciar(), ya sería mas propio del lenguaje. Por ejemplo pilas usa pysfml la cual no está escrita en python (que yo sepa) de cualquier forma muchas funciones en python son llamadas de bibliotecas dinámicas escritas en C/C++ es lo mismo que se hace con lua, solo que tu escribes esos módulos.<br />Que es mejor si iniciar() o m:iniciar(), es subjetivo, sobretodo si es un motor para un juego específico, aprendi esto de lua por que también escribí un motor la forma en la que se hacen las llamadas desde lua al motor asustaría a muchos, por que es ineficiente. Me gusta mas la forma es que lo hace pilas, que es trabajar con las instancias de objetos en el motor, lo cual se puede hacer con lua. Como dices es cuestión de organización y la forma de estructurar el interprete, en este caso y en el mio, usamos lua como un guion que indica como se desarrolla el juego, lo bueno de ser interpretado es que se puede cambiar el guión y hacer un juego diferente, ese es el principal principio que seguí, lo demás son cosas técnicas. <br />Por cierto, si tienes ejemplos de lo que hayas hecho con lua pasalos no?<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=2124">carlostex</a> — Lun Mar 07, 2011 12:30 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[.teri]]></name></author>
<updated>2011-03-06T23:30:39+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5184#p5184</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5184#p5184"/>
<title type="html"><![CDATA[Re: C++ y Lua para videojuegos]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5184#p5184"><![CDATA[
<blockquote class="uncited"><div><br />En el archivo lua que postee asi esta, al llamar a la función que inicializa la ventana le paso los parámetros que quiero y no tengo que recompilar, ya es cuestión de usar archivos aparte de lua para definir los parámetros del juego y cargarlos en un archivo principal.<br />En realidad no veo mucha diferencia con lo que dices a lo que pchack quiere hacer.<br /></div></blockquote><br /><br />Cuestión de organización. ¿Para qué crear y mantener un módulo? La misión del script es decirle al motor qué es lo que tiene que hacer, no el cómo.<br /><br />Personalmente veo mejor y más sencillo un archivo en lua, atendiendo al ejemplo de crear una ventana, que contenga estas líneas<br /><br /><dl class="codebox"><dt>Code: </dt><dd><code>Ancho = 640<br />Alto = 480<br /></code></dd></dl><br /><br />que uno que contenga esta línea<br /><br /><dl class="codebox"><dt>Code: </dt><dd><code>ventana = m:crearventana(640, 480)<br /></code></dd></dl><br /><br />El primer caso simplemente se lee el archivo, se mira si están definidas en Ancho y Alto en lua, se almacenan en dos enteros y se crean la ventana a partir de esos dos enteros, y todo esto se puede hacer desde la función principal sin muchos problemas y sin necesidad de crear un módulo, solamente el ejecutable.<br />El segundo caso, necesitas crear nada más que una función que se comunica con otra función encarga de crear una ventana y registrarlo en lua todo desde un módulo. Ok, SWIG hace eso por tí, pero para mi gusto veo el problema del mantenimiento y la organización. Más que nada a mi parecer uno no tiene control de lo que estas haciendo. Además, ¿qué necesidad tiene uno de crear varias &quot;instancias&quot; de motor cuando solamente tiene sentido que haya un solo motor? No contando además se que puede iniciar el motor sin necesidad de módulo desde un iniciar() en vez de m:iniciar(), o mejor aún, de ninguna forma.<br /><br /><blockquote class="uncited"><div><br />Pensé que te referías a instanciar objetos en lua pero todo se ejecuta en C, de esta forma no hay que compilar de nuevo para cambiar los atributos que se le dan a las clases, pero esto ya es un poco mas complicado, pues los archivos de intercambio son mas especiales y el programador es el que los tiene que crear.<br /></div></blockquote><br /><br />No sé si te refieres a lo que viene a continuación pero mira, me contruí un proxy de esta forma. La clase base lo uso de como &quot;base&quot; para aquellos objetos en C++ que me gustaría comunicarme desde lua. Se crea primero con lua_newuserdata el luaproxy y se le asigna el objeto. En un ejemplo asignas __newindex en una metatabla que será usada por el proxy. Y sabiendo que el primer indice es tu objeto (proxy), el 2º indice una clave (string) y el 3er indice un valor cualquiera puedes sobrecargar el método NewIndex (proxy.key = data) de tu objeto como te plaza y usarlo desde lua y tratarlo desde el método.<br /><br /><dl class="codebox"><dt>Code: </dt><dd><code><br />class base{<br />    public:<br />        virtual void NewIndex(lua_State *) = 0;<br />        virtual void Index(lua_State *) = 0;<br />};<br /><br />struct luaproxy{<br />    base *object;<br />};<br /><br />static int __newindex(lua_State *vm){<br />    //proxy, key, data<br />    luaproxy *theproxy = lua_touserdata(vm, 1);<br />    theproxy-&gt;object-&gt;NewIndex(vm);<br />    return 0;<br />}<br /><br />static int __index(lua_State *vm){<br />    //proxy, key<br />    luaproxy *theproxy = lua_touserdata(vm, 1);<br />    theproxy-&gt;object-&gt;Index(vm);<br />    return 1;<br />}<br /><br /></code></dd></dl><br /><br />Algo más avanzado, con esto y una función lua escrita en C/C++ puedes aprovechar el recolector de basura de lua para crear objetos de c++ desde lua y sobrecargando __gc puedes borrar la instancia de la clase cuando el recolector de basura lo vaya a borrar.<br /><br />Otra cosa, puedes sustituir esto<br /><dl class="codebox"><dt>Code: </dt><dd><code>extern &quot;C&quot; {<br />   #include &quot;lua5.1/lua.h&quot;<br />   #include &quot;lua5.1/lualib.h&quot;<br />   #include &quot;lua5.1/lauxlib.h&quot;<br />}<br /></code></dd></dl><br />por esto<br /><dl class="codebox"><dt>Code: </dt><dd><code>#include &lt;lua5.1/lua.hpp&gt;<br /></code></dd></dl><p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=34">.teri</a> — Dom Mar 06, 2011 11:30 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[carlostex]]></name></author>
<updated>2011-03-06T19:13:42+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5183#p5183</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5183#p5183"/>
<title type="html"><![CDATA[Re: C++ y Lua para videojuegos]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5183#p5183"><![CDATA[
<blockquote><div><cite>.teri escribió:</cite><br />Puedes hacer más cosas con lua. Por ejemplo puedes hacer un archivo de configuración situado al mismo nivel que el ejecutable que puede tener por ejemplo la anchura o la altura de la ventana a crear y cambiar a tu antojo la creación de una ventana sin tener que recompilar.<br /></div></blockquote><br />En el archivo lua que postee asi esta, al llamar a la función que inicializa la ventana le paso los parámetros que quiero y no tengo que recompilar, ya es cuestión de usar archivos aparte de lua para definir los parámetros del juego y cargarlos en un archivo principal.<br />En realidad no veo mucha diferencia con lo que dices a lo que pchack quiere hacer. <br /><br />Pensé que te referías a instanciar objetos en lua pero todo se ejecuta en C, de esta forma no hay que compilar de nuevo para cambiar los atributos que se le dan a las clases, pero esto ya es un poco mas complicado, pues los archivos de intercambio son mas especiales y el programador es el que los tiene que crear.<br /><br />Siguiendo con lo de pchack, me di cuenta con tu pregunta que te he llevado a un error. No es necesario incluir en main.cpp el archivo de tu juego, ese programa únicamente contiene al interprete y lo que hace es abrir un archivo para interpretar:<br /><br /><dl class="codebox"><dt>Code: </dt><dd><code>extern &quot;C&quot; {<br />   #include &quot;lua5.1/lua.h&quot;<br />   #include &quot;lua5.1/lualib.h&quot;<br />   #include &quot;lua5.1/lauxlib.h&quot;<br />}<br /><br /><br />#include&lt;iostream&gt;<br /><br />using namespace std;<br /><br />int main(int argc,char* argv&#91;&#93;)<br />{<br />   lua_State *L;<br /><br />if (argc&lt;2)<br />{<br />  printf(&quot;%s: &lt;main.lua&gt;\n&quot;,argv&#91;0&#93;);<br />  return 0;<br />}<br />L=lua_open();<br />luaL_openlibs(L);   // load basic libs (eg. print)<br /><br />if (luaL_loadfile(L,argv&#91;1&#93;)==0) // load and run the file<br />{<br />   cout&lt;&lt;&quot;Control sedido al interpreter&quot;&lt;&lt;endl;<br />   lua_pcall(L,0,0,0);<br />}<br />else<br />  printf(&quot;Error al cargar %s\n&quot;,argv&#91;1&#93;);<br />lua_close(L);<br />cout&lt;&lt;&quot;Programa terminado&quot;&lt;&lt;endl;<br />return 0;<br /><br />   <br />}</code></dd></dl><br /><br />Así debería quedar el archivo, por otro lado tienes a example.cpp example.h y example_wrap.cxx estos son lo que vas a compilar en una biblioteca dinámica.<br /><br />g++ -I/usr/include/lua5.1 -c example_wrap.cxx -o example_wrap.o<br />g++ -c example.cpp -o example.o<br />g++ -shared -I/usr/include/lua5.1 -L/usr/lib/lua example_wrap.o example.o -o example.so<br /><br />por cierto que IDE usas, supongo que lo usas por la linea de compilación que pusiste y se me hace como al geany, no me quedó claro en que SO estás desarrollando, pero si usas Linux es mejor que uses un programa que te haga la compilación de todos los archivos, por que cuando tu código crezca vas a tener que dividirlo en una jerarquía de archivos y se puede convertir un dolor de cabeza compilarlos<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=2124">carlostex</a> — Dom Mar 06, 2011 7:13 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[.teri]]></name></author>
<updated>2011-03-06T17:12:51+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5182#p5182</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5182#p5182"/>
<title type="html"><![CDATA[Re: C++ y Lua para videojuegos]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5182#p5182"><![CDATA[
Para integrar tu motor con lua tienes que hacer una aplicación, con su función main y todo, y enlazarlo con la biblioteca de lua, también si tienes tu motor como una biblioteca dinámica o estática pues igualmente lo enlazas. Haces lo mismo: creas un estado de lua al principio y lo cierras al final. En un archivo o archivos aparte creas funciones de lua escritas en C que se van a encargar de comunicarse con tu motor y luego registras esas funciones en el estado de lua que hiciste.<br /><br />Puedes hacer más cosas con lua. Por ejemplo puedes hacer un archivo de configuración situado al mismo nivel que el ejecutable que puede tener por ejemplo la anchura o la altura de la ventana a crear y cambiar a tu antojo la creación de una ventana sin tener que recompilar.<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=34">.teri</a> — Dom Mar 06, 2011 5:12 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[pchack]]></name></author>
<updated>2011-03-06T13:04:39+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5181#p5181</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5181#p5181"/>
<title type="html"><![CDATA[Re: C++ y Lua para videojuegos]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5181#p5181"><![CDATA[
Saludos, el comando de compilacion de main.cpp que use:<br />g++ &quot;%f&quot; &quot;example.cpp&quot; -o &quot;%e&quot; -llua5.1<br /><br />tengo una pregunta, ¿como crear esa libreria example.so?.<br /><br /><blockquote><div><cite>.teri escribió:</cite><br />Personalmente para lo que quieres hacer veo mejor que integres tu motor con lua, como hace LÖVE, y no construyas un módulo basado en tu motor para ser usado desde lua.<br /></div></blockquote><br /><br />hola .teri como se haria eso, integrar el motor con lua <br />si me orientaras seria genial.<br /><br /><br />Saludos y gracias por su ayuda.<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=2355">pchack</a> — Dom Mar 06, 2011 1:04 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[.teri]]></name></author>
<updated>2011-03-06T11:04:54+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5178#p5178</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5178#p5178"/>
<title type="html"><![CDATA[Re: C++ y Lua para videojuegos]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5178#p5178"><![CDATA[
Personalmente para lo que quieres hacer veo mejor que integres tu motor con lua, como hace LÖVE, y no construyas un módulo basado en tu motor para ser usado desde lua.<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=34">.teri</a> — Dom Mar 06, 2011 11:04 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[carlostex]]></name></author>
<updated>2011-03-06T08:45:05+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5177#p5177</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5177#p5177"/>
<title type="html"><![CDATA[Re: C++ y Lua para videojuegos]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5177#p5177"><![CDATA[
Asi como tienes escrito el .lua no va a funcionar, por que tienes que incluir la biblioteca dinámica, el require es para la versión 5.1, si tienes esa y no te funcionó muestra la linea que usas para compilar. El código en lua es correcto y asi como declaraste el módulo debe tener el mismo nombre la biblioteca dinámica, seria example.so<br />y nada, cualquier duda estamos para eso.<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=2124">carlostex</a> — Dom Mar 06, 2011 8:45 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[pchack]]></name></author>
<updated>2011-03-06T02:50:13+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5176#p5176</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5176#p5176"/>
<title type="html"><![CDATA[Re: C++ y Lua para videojuegos]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5176#p5176"><![CDATA[
Genial ya logre compilarlo, ahora tengo un problema que no sé porque ocurre.<br /><br />muestro los archivos para que vean:<br /><br />// main.cpp<br /><dl class="codebox"><dt>Code: </dt><dd><code>extern &quot;C&quot; {<br />   #include &quot;lua5.1/lua.h&quot;<br />   #include &quot;lua5.1/lualib.h&quot;<br />   #include &quot;lua5.1/lauxlib.h&quot;<br />}<br /><br />#include &quot;example_wrap.cxx&quot;<br /><br />#include&lt;iostream&gt;<br /><br /><br /><br /><br />using namespace std;<br /><br />extern int luaopen_example(lua_State* L); // declare the wrapped module<br /><br /><br />int main(int argc,char* argv&#91;&#93;)<br />{<br />   lua_State *L;<br /><br />if (argc&lt;2)<br />{<br />  printf(&quot;%s: &lt;main.lua&gt;\n&quot;,argv&#91;0&#93;);<br />  return 0;<br />}<br />L=lua_open();<br />luaL_openlibs(L);   // load basic libs (eg. print)<br />luaopen_example(L);   // load the wrappered module<br /><br />if (luaL_loadfile(L,argv&#91;1&#93;)==0) // load and run the file<br />{<br />   cout&lt;&lt;&quot;Control sedido al interpreter&quot;&lt;&lt;endl;<br />   lua_pcall(L,0,0,0);<br />}<br />else<br />  printf(&quot;Error al cargar %s\n&quot;,argv&#91;1&#93;);<br />lua_close(L);<br />cout&lt;&lt;&quot;Programa terminado&quot;&lt;&lt;endl;<br />return 0;<br /> <br />   <br />}<br /><br /></code></dd></dl><br /><br />// example.i<br /><dl class="codebox"><dt>Code: </dt><dd><code>#ifdef SWIG<br />%module example<br />%{<br />#include &quot;example.h&quot;<br />%}<br />#endif<br /><br /></code></dd></dl><br /><br />//example.h<br /><dl class="codebox"><dt>Code: </dt><dd><code>#ifndef EXAMPLE_H<br />#define EXAMPLE_H<br /><br /><br /><br />class motor{<br />public:<br />   void iniciar();<br /><br />};<br /><br />#endif<br /></code></dd></dl><br /><br />// example.cpp<br /><dl class="codebox"><dt>Code: </dt><dd><code>#include &lt;iostream&gt;<br />#include &quot;example.h&quot;<br /><br />using namespace std;<br /><br /><br />void motor::iniciar(){<br />    cout &lt;&lt; &quot;motor: Iniciando&quot; &lt;&lt; endl;<br />}<br /></code></dd></dl><br /><br />// main.lua (codigo a interpretar)<br /><dl class="codebox"><dt>Code: </dt><dd><code>// tambien he probado con<br />// require(&quot;example&quot;)<br />// y no interpreta<br />m=example.motor();<br /><br />m:iniciar();<br /><br /></code></dd></dl><br /><br /><br />ejecuto el comando: main main.lua<br />output: <br />Control sedido al interpreter<br />Programa terminado<br /><br /><br /><br />el problema es que al llamar a m:iniciar();<br />no ejecuta nada no se porque esto ocurre.<br /><br />bueno hasta ahora agradezco su ayuda, me han aclarado bastantes cosas, <br />así que gracias y espero que me puedan ayudar nuevamente en esto.<br /><br />Saludos  <img src="http://losersjuegos.com.ar/foro/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=2355">pchack</a> — Dom Mar 06, 2011 2:50 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[carlostex]]></name></author>
<updated>2011-03-05T22:25:43+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5175#p5175</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5175#p5175"/>
<title type="html"><![CDATA[Re: C++ y Lua para videojuegos]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5175#p5175"><![CDATA[
Si, lo que sucede es que la definición de esa función es la que creó swig, tienes que incluir es archivo *.cxx en el main, y prueba si funciona, con esto debería.<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=2124">carlostex</a> — Sab Mar 05, 2011 10:25 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[pchack]]></name></author>
<updated>2011-03-05T18:08:19+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5174#p5174</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5174#p5174"/>
<title type="html"><![CDATA[Re: C++ y Lua para videojuegos]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5174#p5174"><![CDATA[
Saludos Gracias por tu respuesta Carlos ha sido de mucha ayuda,<br />mira ya me resulto este código:<br /><dl class="codebox"><dt>Code: </dt><dd><code>extern &quot;C&quot; {<br />   #include &quot;lua5.1/lua.h&quot;<br />   #include &quot;lua5.1/lualib.h&quot;<br />   #include &quot;lua5.1/lauxlib.h&quot;<br />}<br />#include&lt;iostream&gt;<br />using namespace std;<br /><br /><br />int main(int argc,char* argv&#91;&#93;)<br />{<br />   lua_State *L;<br /><br />if (argc&lt;2)<br />{<br />  printf(&quot;%s: &lt;filename.lua&gt;\n&quot;,argv&#91;0&#93;);<br />  return 0;<br />}<br />L=lua_open();<br />luaL_openlibs(L);   // load basic libs (eg. print)<br /><br />if (luaL_loadfile(L,argv&#91;1&#93;)==0) // load and run the file<br />{<br />    cout&lt;&lt;&quot;Control sedido al interpreter&quot;&lt;&lt;endl;<br />  lua_pcall(L,0,0,0);<br />}<br />else<br />  printf(&quot;Error al cargar %s\n&quot;,argv&#91;1&#93;);<br />lua_close(L);<br />cout&lt;&lt;&quot;Programa terminado&quot;&lt;&lt;endl;<br />return 0;<br /> <br />   <br />}<br /></code></dd></dl><br /><br />ahora he estado intentanto crear un modulo he incorporarlo al programa cpp pero no me resulta,<br />te explico: <br />cree un archivo &quot;example.i&quot; con lo siguiente<br /><dl class="codebox"><dt>Code: </dt><dd><code>%module example<br />%{<br />#include &quot;example.h&quot;<br />%}<br />void imprimir();<br /><br /></code></dd></dl><br /><br />example.h puse esto:<br /><br /><dl class="codebox"><dt>Code: </dt><dd><code>#ifndef EXAMPLE_H<br />#define EXAMPLE_H<br /><br />void imprimir();<br /><br />#endif<br /><br /></code></dd></dl><br />example.cpp puse esto:<br /><dl class="codebox"><dt>Code: </dt><dd><code>#include &lt;iostream&gt;<br /><br />using namespace std;<br /><br />void imprimir(){<br /><br />cout &lt;&lt; &quot;Funciono Modulo&quot; &lt;&lt; endl;<br /><br />}<br /></code></dd></dl><br />y en el código donde esta main<br /><br /><dl class="codebox"><dt>Code: </dt><dd><code>extern &quot;C&quot; {<br />   #include &quot;lua5.1/lua.h&quot;<br />   #include &quot;lua5.1/lualib.h&quot;<br />   #include &quot;lua5.1/lauxlib.h&quot;<br />}<br /><br />#include&lt;iostream&gt;<br /><br /><br />using namespace std;<br /><br />extern int luaopen_example(lua_State* L); // declare the wrapped module<br /><br /><br />int main(int argc,char* argv&#91;&#93;)<br />{<br />   lua_State *L;<br /><br />if (argc&lt;2)<br />{<br />  printf(&quot;%s: &lt;main.lua&gt;\n&quot;,argv&#91;0&#93;);<br />  return 0;<br />}<br />L=lua_open();<br />luaL_openlibs(L);   // load basic libs (eg. print)<br />luaopen_example(L);   // load the wrappered module<br /><br />if (luaL_loadfile(L,argv&#91;1&#93;)==0) // load and run the file<br />{<br />    cout&lt;&lt;&quot;Control sedido al interpreter&quot;&lt;&lt;endl;<br />  lua_pcall(L,0,0,0);<br />}<br />else<br />  printf(&quot;Error al cargar %s\n&quot;,argv&#91;1&#93;);<br />lua_close(L);<br />cout&lt;&lt;&quot;Programa terminado&quot;&lt;&lt;endl;<br />return 0;<br /> <br />   <br />}<br /></code></dd></dl><br /><br />el problema es que no reconoce la función <br />    extern int luaopen_example(lua_State* L);<br />y no se como se traen el modulo example.h para que lo reconosca lua.<br /><br />PD: el comando g++ que estoy usando es<br />      g++ &quot;codigo.cpp&quot; &quot;example_wrap.cxx&quot; &quot;example.cpp&quot; -o &quot;codigo&quot; -llua5.1<br /><br />seria esa mi pregunta y muchas gracias por la ayuda.<br /><br />Saludos  <img src="http://losersjuegos.com.ar/foro/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=2355">pchack</a> — Sab Mar 05, 2011 6:08 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[.teri]]></name></author>
<updated>2011-03-05T17:58:05+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5173#p5173</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5173#p5173"/>
<title type="html"><![CDATA[Re: C++ y Lua para videojuegos]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5173#p5173"><![CDATA[
LÖVE es como un intérprete en el que están totalmente integradas las bibliotecas SDL, OpenGL, OpenAL y PHYSFS.<br /><br /><blockquote class="uncited"><div><br />¿como se puede desarrollar un ejecutable en c++ el cual sea capaz de interpretar codigo lua?.<br /></div></blockquote><br /><br />Primero necesitas un estado de lua, vamos una máquina virtual. Luego ejecutas el código desde archivos de texto o desde simple cadenas de texto de forma sencilla con funciones facilitadas por la biblioteca de lua.<br /><br /><blockquote class="uncited"><div><br />este ejecutable seria algo asi como un interprete de codigo lua que llame funciones c++ (podrian ser de SFML O SDL).<br /></div></blockquote><br /><br />Para eso tienes primero que crear funciones en un formato requerido para lua, por ejemplo &quot;LimpiarPantalla&quot; en SFML y sin entrar en detalles:<br /><br /><dl class="codebox"><dt>Code: </dt><dd><code>static int limpiarpantalla(lua_State *vm){<br />    miventana-&gt;Clear();<br />    return 0;}<br /></code></dd></dl><br /><br />Luego lo registras en lua bajo un nombre, sin más complicaciones &quot;LimpiarPantalla&quot;, y ya luego lo llamas cómodamente desde lua como LimpiarPantalla()<br /><br />@carlostex<br /><br />Personalmente paso de SWIG, para python quizá valga la pena, pero para una cosa tan sencilla como lua ya me hago sin complicaciones mis modulos y mi propios objetos a mano para ser usados en lua. Se arma una clase base abstracta llamada &quot;proxy&quot; para poder usar cómodamente objetos en C++ desde lua. Se crea en lua un puntero a puntero de proxy, almacenas el objeto que hereda la clase proxy ahí, y le asignas una metatabla con funciones escritas en C/C++ para acceder al objeto y listo.<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=34">.teri</a> — Sab Mar 05, 2011 5:58 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[carlostex]]></name></author>
<updated>2011-03-05T08:45:22+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5172#p5172</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5172#p5172"/>
<title type="html"><![CDATA[Re: C++ y Lua para videojuegos]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5172#p5172"><![CDATA[
Hola, este es un tutorial de como integrar Lua en C++ usando swig que es un programa que hace el port de C++ a código reconocible por Lua. <a href="http://www.swig.org/Doc1.3/Lua.html#Lua_nn7" class="postlink">http://www.swig.org/Doc1.3/Lua.html#Lua_nn7</a>.<br /><br />Al principio tiene el ejemplo de una aplicación que llama al interprete y sin embargo tiene cargado un módulo que es el código en C++ ya traducido en llamadas a la biblioteca de lua para realizar todo. por lo que si compilas ese ejemplo te va a decir que no se puede linkear esa función. Esto es por que existen dos formas de hacer lo que quieres, una es creando el módulo e incluirlo en un programa que va a ser el que incluya el módulo y el interprete. la otra es hacer como dice en la guia una biblioteca dinámica en los dos casos se tiene que usar swig para hacer el port todos los archivos se incluyen para ser compilados junto con el código que arroja el swig, con esto se crea un biblioteca dinámica que puede ser llamada desde un programa en C++, en este caso no se usa el interprete, pero la misma biblioteca puedes usarla abriendo el interprete de lua y llamando a la biblioteca dinámica, este es un ejemplo de un programa que hice:<br /><dl class="codebox"><dt>Code: </dt><dd><code>#!/usr/bin/lua<br />require(&quot;libtank_war&quot;)<br />g=libtank_war.game();<br />g:init_video(800,600,32);<br />--a=libtank_war.audio();<br />--a:add_chunk(&quot;.http://losersjuegos.com.ar/foro/sounds/disp.wav&quot;);<br />--a:add_chunk(&quot;.http://losersjuegos.com.ar/foro/sounds/disp_mis.wav&quot;);<br />--a:add_audio(&quot;.http://losersjuegos.com.ar/foro/sounds/intro.ogg&quot;);<br />--a:reproducir();<br /><br />g.scene:set_world(&quot;.http://losersjuegos.com.ar/foro/images/terreno/path&quot;);<br />g.scene:add_sprite(&quot;.http://losersjuegos.com.ar/foro/images/E-P8.854.png&quot;,1);<br />g.scene:add_sprite(&quot;.http://losersjuegos.com.ar/foro/images/anillo.png&quot;,1);<br />g.scene:add_sprite(&quot;.http://losersjuegos.com.ar/foro/images/explode1.png&quot;,7);<br />.<br />.<br />.<br /></code></dd></dl><br />Si te das cuenta la primera linea esta para que cuando le de doble clic se abra el interprete la función require es la forma en la que se llama a la biblioteca dinámica desde lua, la versión que uso es 5.1, la forma de llamar cambia en la 5.0<br /><br />pero modificando un poco el código que tiene de ejemplo el tutorial quedando así:<br /><dl class="codebox"><dt>Code: </dt><dd><code>extern &quot;C&quot; {<br />   #include &quot;lua5.1/lua.h&quot;<br />   #include &quot;lua5.1/lualib.h&quot;<br />   #include &quot;lua5.1/lauxlib.h&quot;<br />}<br />#include&lt;iostream&gt;<br />using namespace std;<br /><br /><br />int main(int argc,char* argv&#91;&#93;)<br />{<br />   lua_State *L;<br /> <br /> if (argc&lt;2)<br /> {<br />  printf(&quot;%s: &lt;filename.lua&gt;\n&quot;,argv&#91;0&#93;);<br />  return 0;<br /> }<br /> L=lua_open();<br /> luaL_openlibs(L);   // load basic libs (eg. print)<br /> <br /> if (luaL_loadfile(L,argv&#91;1&#93;)==0) // load and run the file <br /> {<br />    cout&lt;&lt;&quot;Control sedido al interpreter&quot;&lt;&lt;endl;<br />  lua_pcall(L,0,0,0);<br />}<br /> else<br />  printf(&quot;Error al cargar %s\n&quot;,argv&#91;1&#93;);<br /> lua_close(L);<br /> cout&lt;&lt;&quot;Programa terminado&quot;&lt;&lt;endl;<br /> return 0;<br />  <br />   <br />}<br /></code></dd></dl><br /><br />Queda el interprete compilado en un ejecutable, por lo que no tiene que estar presente el ejecutable del interprete pero si sus bibliotecas dinámicas. El código anterior carga un archivo lua y lo ejecuta. podrías pasarle un archivo que contenga:<br /><dl class="codebox"><dt>Code: </dt><dd><code>x=3+2*2<br />print(x)</code></dd></dl><br />y se va a ejecutar.<br /><br />De esta forma no está cargado ni un módulo es solo el interprete en sí, por lo que en teoría deberías poder cargar cualquier biblioteca dinámica preparada para ser interpretada y esta se debe ejecutar, de hecho hice la prueba y ejecuté el primer código en lua que mostré, y se ejecuto correctamente. Sobre la biblioteca libtank_war se tiene que encontrar en un directorio específico para que el interprete lo tome, o bien indicarle la ruta completa.<br /><br />En el tutorial vas a encontrar ejemplos y vas a ver todo lo que se puede hacer con Lua y C++, comienza por lo sencillo, has un pequeño programa en c++ de una función hace el port con swig e intenta llamarla con el interprete.<br />En el tutorial no explica una cosa importante, al hacer el port swig recibe un archivo con terminación .i que es la declaración de las funciones, clases, etc de lo que tiene que portar, se hace asi:<br /><dl class="codebox"><dt>Code: </dt><dd><code>%module libtank_war<br />%{<br />#include &quot;otras_declaraciones.h&quot;<br /><br />%}<br />%include &lt;typemaps.i&gt;<br />class top{ <br />       public:<br />       int x,y;<br />       int suma(x,y){return x+y;}<br /><br /><br />};<br /></code></dd></dl><br /><br />este archivo únicamente requiere los prototipos pues al compilar se llama a los .cpp aunque se pueden definir en el mismo código las funciones y también funciona.<br />Luego solo ejecutas: swig -c++ -lua example.i<br />y obtendrás un archivo para incluir en tu biblioteca dinámica. Al principio del tuto hay una así que sirve de ejemplo para desarrollar lo demás.<br />Para finalizar, en la página oficial de Lua puedes descargar las fuentes, me parece que hay para win, al igual que swig.<br />Saludos.<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=2124">carlostex</a> — Sab Mar 05, 2011 8:45 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[pchack]]></name></author>
<updated>2011-03-05T06:32:22+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5171#p5171</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5171#p5171"/>
<title type="html"><![CDATA[C++ y Lua para videojuegos]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=1068&amp;p=5171#p5171"><![CDATA[
Hola Gente,<br />he estado ocupado estos dias por eso he tenido poca actividad en el foro,<br />bueno estos dias investigando un poco sobre motores de juegos 2d, encontre uno llamado &quot;LÖVE&quot;<br />(<!-- m --><a class="postlink" href="http://love2d.org/">http://love2d.org/</a><!-- m -->) y me ha gustado mucho principalmente porque este programa es solo<br />un ejecutable, a este se le entrega un carpeta que contiene un archivo en lua (main.lua), en dicho<br />archivo se escribe el codigo del juego que luego se interpreta con el motor.<br /><br />me parece interesante dicho motor porque creo que facilita la distribucion de juegos, y ademas<br />porque tiene distintos modulos muy utiles, como poder controlar particulas, fisica, imagenes, en otros.<br /><br />mi pregunta es ¿como se puede desarrollar un ejecutable en c++ el cual sea capaz de interpretar codigo lua?.<br /><br />este ejecutable seria algo asi como un interprete de codigo lua que llame funciones c++ (podrian ser de SFML O SDL).<br /><br />Saludos y espero su colaboracion.<br /><br />Gracias de Antemano.<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=2355">pchack</a> — Sab Mar 05, 2011 6:32 am</p><hr />
]]></content>
</entry>
</feed>