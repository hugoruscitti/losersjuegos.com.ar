<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="es">
<link rel="self" type="application/atom+xml" href="http://losersjuegos.com.ar/foro/feed.php?f=9&amp;t=416" />

<title>LosersJuegos</title>
<subtitle>Desarrollando videojuegos libres</subtitle>
<link href="http://losersjuegos.com.ar/foro/index.php" />
<updated>2009-01-24T14:51:05+00:00</updated>

<author><name><![CDATA[LosersJuegos]]></name></author>
<id>http://losersjuegos.com.ar/foro/feed.php?f=9&amp;t=416</id>
<entry>
<author><name><![CDATA[hugoruscitti]]></name></author>
<updated>2009-01-24T14:51:05+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1951#p1951</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1951#p1951"/>
<title type="html"><![CDATA[como convertir .py a .deb]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1951#p1951"><![CDATA[
Interesante GsusKrist. ¿podrías citar la fuente de ese tutorial o<br />lo has desarrollado tu mismo?.<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=3">hugoruscitti</a> — Sab Ene 24, 2009 2:51 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[GsusKrist]]></name></author>
<updated>2009-01-24T06:11:41+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1937#p1937</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1937#p1937"/>
<title type="html"><![CDATA[como convertir .py a .deb]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1937#p1937"><![CDATA[
hola....<br />la verdad me descuidé un poco sobre este tema y sobre mi participacion en general en el foro y al parecer yo no soy el unico interesado en compilar y distribuir mis programas en forma de instaladores....<img src="http://losersjuegos.com.ar/foro/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br />la verdad fué de mucha ayuda los comentarios y las inkietudes ke los demás aportaron, y gracias a hugo kien contestó a todas las anteriores, pero me pregunté nuevamente si para compilar o empaketar un programa de scripts en python, &quot;.Py&quot; y pasarlo a .rpm o instalador de red hat tendré ke hacer lo mismo o debo usar algúna serie de indicaciones distintas?? y Googleando logré conseguir esta info que me resultó y por eso :<br /><br />Una vez terminemos con el desarrollo de nuestra nueva aplicación es conveniente empaquetarla de forma que sea sencillo para los usuarios instalarla, y para nosotros distribuirla.<br /><br />En Python existen dos módulos principales para este cometido: distutils, que es parte de la librería estándar y era el método más utilizado hasta hace poco, y setuptools, que extiende la funcionalidad de distutils y es cada vez más popular.<br /><br />En este capítulo veremos el funcionamiento de ambas herramientas, y terminaremos explicando cómo crear ejecutables .exe para Windows a partir de nuestro programa en Python.<br />distutils<br /><br />Todo programa distribuido con distutils contiene un script llamado por convención setup.py, que se encarga de instalar la aplicación llamando a la función setup de distutils.core. Esta función tiene montones de argumentos, que controlan, entre otras cosas, cómo instalar la aplicación.<br /><br />Destinados a describir la aplicación tenemos los siguientes argumentos:<br /><br />    * name: El nombre del paquete.<br />    * version: El número de versión.<br />    * description: Una línea describiendo el paquete.<br />    * long_description: Descripción completa del paquete.<br />    * author: Nombre del autor de la aplicación.<br />    * author_email: Correo electrónico del autor.<br />    * maintainer: Nombre de la persona encargada de mantener el paquete, si difiere del autor.<br />    * maintainer_email: Correo de la persona encargada de mantener el paquete, si difiere del autor.<br />    * url: Web de la aplicación.<br />    * download_url: Url de la que descargar la aplicación.<br />    * license: Licencia de la aplicación<br /><br />También tenemos argumentos que controlan los archivos y directorios que deben instalarse, como son packages, py_modules, scripts y ext_modules.<br /><br />El parámetro scripts, que es una lista de cadenas, indica el nombre del módulo o módulos principales, es decir, los que ejecuta el usuario. Si nuestra aplicación consistiera, por ejemplo, en un solo script ejemplo.py, el código de setup.py podría tener un aspecto similar al siguiente:<br />view plaincopy to clipboardprint?<br /><br />   1. from distutils.core import setup  <br />   2.   <br />   3. setup(name=&quot;Aplicacion de ejemplo&quot;,  <br />   4.       version=&quot;0.1&quot;,  <br />   5.       description=&quot;Ejemplo del funcionamiento de distutils&quot;,  <br />   6.       author=&quot;Cybertux&quot;,  <br />   7.       author_email=&quot;RedHack@linux.usr&quot;,  <br />   8.       url=&quot;http://www.pytutorial.info&quot;,  <br />   9.       license=&quot;GPL&quot;,  <br />  10.       scripts=[&quot;ejemplo.py&quot;]  <br />  11. )  <br /><br />from distutils.core import setup<br /><br />setup(name=&quot;Aplicacion de ejemplo&quot;,<br />      version=&quot;0.1&quot;,<br />      description=&quot;Ejemplo del funcionamiento de distutils&quot;,<br />      author=&quot;Cybertux&quot;,<br />      author_email=&quot;RedHack@linux.usr&quot;,<br />      url=&quot;http://www.pytutorial.info&quot;,<br />      license=&quot;GPL&quot;,<br />      scripts=[&quot;ejemplo.py&quot;]<br />)<br /><br />Si hemos escrito otros módulos para ser utilizados por el script principal, estos se indican mediante el parámetro py_modules. Por ejemplo, supongamos que la aplicación consiste en un script principal ejemplo.py, y un módulo de apoyo apoyo.py:<br />view plaincopy to clipboardprint?<br /><br />   1. from distutils.core import setup  <br />   2.   <br />   3. setup(name=&quot;Aplicacion de ejemplo&quot;,  <br />   4.       version=&quot;0.1&quot;,  <br />   5.       description=&quot;Ejemplo del funcionamiento de distutils&quot;,  <br />   6.       author=&quot;Cybertux&quot;,  <br />   7.       author_email=&quot;RedHack@linux.usr&quot;,  <br />   8.       url=&quot;http://www.pytutorial.info/&quot;,  <br />   9.       license=&quot;GPL&quot;,  <br />  10.       scripts=[&quot;ejemplo.py&quot;],  <br />  11.       py_modules=[&quot;apoyo&quot;]  <br />  12. )  <br /><br />from distutils.core import setup<br /><br />setup(name=&quot;Aplicacion de ejemplo&quot;,<br />      version=&quot;0.1&quot;,<br />      description=&quot;Ejemplo del funcionamiento de distutils&quot;,<br />      author=&quot;Cybertux&quot;,<br />      author_email=&quot;RedHack@linux.usr&quot;,<br />      url=&quot;http://www.pytutorial.info/&quot;,<br />      license=&quot;GPL&quot;,<br />      scripts=[&quot;ejemplo.py&quot;],<br />      py_modules=[&quot;apoyo&quot;]<br />)<br /><br />Para instalar paquetes Python (directorios que contienen varios módulos y un archivo __init__.py) usaríamos el parámetro packages. Si además del módulo ejemplo.py quisiéramos instalar los paquetes gui y bbdd, por ejemplo, haríamos algo así:<br />view plaincopy to clipboardprint?<br /><br />   1. from distutils.core import setup  <br />   2.   <br />   3. setup(name=&quot;Aplicacion de ejemplo&quot;,  <br />   4.       version=&quot;0.1&quot;,  <br />   5.       description=&quot;Ejemplo del funcionamiento de distutils&quot;,  <br />   6.       author=&quot;Cybertux&quot;,  <br />   7.       author_email=&quot;RedHack@linux.usr&quot;,  <br />   8.       url=&quot;http://www.pytutorial.info/&quot;,  <br />   9.       license=&quot;GPL&quot;,  <br />  10.       scripts=[&quot;ejemplo.py&quot;],  <br />  11.       packages=[&quot;gui&quot;, &quot;bbdd&quot;]  <br />  12. )  <br /><br />from distutils.core import setup<br /><br />setup(name=&quot;Aplicacion de ejemplo&quot;,<br />      version=&quot;0.1&quot;,<br />      description=&quot;Ejemplo del funcionamiento de distutils&quot;,<br />      author=&quot;Cybertux&quot;,<br />      author_email=&quot;RedHack@linux.usr&quot;,<br />      url=&quot;http://www.pytutorial.info/&quot;,<br />      license=&quot;GPL&quot;,<br />      scripts=[&quot;ejemplo.py&quot;],<br />      packages=[&quot;gui&quot;, &quot;bbdd&quot;]<br />)<br /><br />ext_modules, por último, sirve para incluir extensiones que utilice el programa, en C, C++, Fortran, …<br /><br />Veamos ahora cómo se utilizaría el archivo setup.py una vez creado.<br /><br />Al ejecutar el comando<br /><br />python setup.py install<br /><br />los módulos y paquetes especificados por py_modules y packages se instalan en el directorio Lib de Python. Los programas indicados en scripts, se copian al directorio Scripts de Python.<br /><br />Una vez hemos comprobado que la aplicación se instala correctamente, procedemos a crear archivos mediante los que distribuir la aplicación a los usuarios. Para crear archivos con el código fuente se utiliza la opción sdist de setup.py, que crea por defecto un archivo tar.gz en Unix y un zip en Windows.<br /><br />python setup.py sdist<br /><br />Sin embargo se puede utilizar --formats para especificar el formato o formatos que queramos generar<br />bztar .tar.bz2<br />gztar .tar.gz<br />tar .tar<br />zip .zip<br />ztar .tar.Z<br /><br />Para crear un archivo tar.bz2, un tar.gz y un zip, por ejemplo, se utilizaría la siguiente orden:<br /><br />python setup.py sdist --formats=bztar,gztar,zip<br /><br />Para generar un archivo de distribución binaria, se usa la opción bdist:<br /><br />python setup.py bdist<br /><br />Los formatos que soporta bdist son los siguientes:<br />rpm RPM<br />gztar .tar.gz<br />bztar .tar.bz2<br />ztar .tar.Z<br />tar .tar<br />wininst Instalador Windows<br />zip .zip<br /><br />Para crear un archivo rpm y un instalador de Windows, por ejemplo, escribiríamos:<br /><br />python setup.py bdist --formats=wininst,rpm<br /><br />También es posible crear otros tipos de archivos de distribución utilizando scripts que extienden distutils, como es el caso de los paquetes deb mediante el script stdeb (<!-- m --><a class="postlink" href="http://stdeb.python-hosting.com/">http://stdeb.python-hosting.com/</a><!-- m -->)<br />setuptools<br /><br />setuptools extediende distutils añadiendo una serie de funcionalidades muy interesantes: introduce un nuevo formato de archivo para distribución de aplicaciones Python llamado egg, se encarga de buscar todos los paquetes que deben instalarse y añadir las posibles dependencias, permite instalar paquetes de PyPI con un solo comando, etc.<br /><br />Además, como setuptools se basa en distutils, un script de instalación básico utilizando setuptools es prácticamente igual a su equivalente con distutils. Tan sólo cambiaría la sentencia de importación.<br />view plaincopy to clipboardprint?<br /><br />   1. from setuptools import setup  <br />   2.   <br />   3. setup(name=&quot;Aplicacion de ejemplo&quot;,  <br />   4.       version=&quot;0.1&quot;,  <br />   5.       description=&quot;Ejemplo del funcionamiento de distutils&quot;,  <br />   6.       author=&quot;Cybertux&quot;,  <br />   7.       author_email=&quot;RedHack@linux.usr&quot;,  <br />   8.       url=&quot;http://www.pytutorial.info/&quot;,  <br />   9.       license=&quot;GPL&quot;,  <br />  10.       scripts=[&quot;ejemplo.py&quot;],  <br />  11. )  <br /><br />from setuptools import setup<br /><br />setup(name=&quot;Aplicacion de ejemplo&quot;,<br />      version=&quot;0.1&quot;,<br />      description=&quot;Ejemplo del funcionamiento de distutils&quot;,<br />      author=&quot;Cybertux&quot;,<br />      author_email=&quot;RedHack@linux.usr&quot;,<br />      url=&quot;http://www.pytutorial.info/&quot;,<br />      license=&quot;GPL&quot;,<br />      scripts=[&quot;ejemplo.py&quot;],<br />)<br /><br />El único inconveniente que podríamos encontrar al uso de setuptools es que no está incluido por defecto en Python 2.5, aunque es probable que esto cambie en próximas versiones debido a su gran uso. Pero los desarrolladores de setuptools han pensado en todo, e incluso esto no debería suponer ningún problema, ya que con un mínimo esfuerzo por nuestra parte podemos hacer que setuptools se descargue e instale automáticamente en la máquina del usuario si este no se encuentra ya en el sistema. Basta distribuir con nuestro paquete un pequeño módulo extra ez_setup.py que viene incluido por defecto con setuptools (<!-- m --><a class="postlink" href="http://peak.telecommunity.com/dist/ez_setup.py">http://peak.telecommunity.com/dist/ez_setup.py</a><!-- m -->) y llamar a la función use_setuptools del módulo al inicio de setup.py:<br />view plaincopy to clipboardprint?<br /><br />   1. from ez_setup import use_setuptools  <br />   2. use_setuptools()  <br />   3.   <br />   4. from setuptools import setup  <br />   5.   <br />   6. setup(name=&quot;Aplicacion de ejemplo&quot;,  <br />   7.       version=&quot;0.1&quot;,  <br />   8.       description=&quot;Ejemplo del funcionamiento de distutils&quot;,  <br />   9.       author=&quot;Cybertux&quot;,  <br />  10.       author_email=&quot;RedHack@linux.usr&quot;,  <br />  11.       url=&quot;http://www.pytutorial.info/&quot;,  <br />  12.       license=&quot;GPL&quot;,  <br />  13.       scripts=[&quot;ejemplo.py&quot;],  <br />  14. )  <br /><br />from ez_setup import use_setuptools<br />use_setuptools()<br /><br />from setuptools import setup<br /><br />setup(name=&quot;Aplicacion de ejemplo&quot;,<br />      version=&quot;0.1&quot;,<br />      description=&quot;Ejemplo del funcionamiento de distutils&quot;,<br />      author=&quot;Cybertux&quot;,<br />      author_email=&quot;RedHack@linux.usr&quot;,<br />      url=&quot;http://www.pytutorial.info/&quot;,<br />      license=&quot;GPL&quot;,<br />      scripts=[&quot;ejemplo.py&quot;],<br />)<br /><br />Veamos ahora con más detenimiento algunos de los cambios y novedades que introduce setuptools.<br />Integración con PyPI<br /><br />Al estilo de CPAN en Perl setuptools permite instalar de forma fácil y sencilla los paquetes pertenecientes a PyPI, el Índice de Paquetes Python (<!-- m --><a class="postlink" href="http://pypi.python.org/pypi">http://pypi.python.org/pypi</a><!-- m -->), así como subir nuestros propios paquetes.<br /><br />PyPI cuenta en el momento de escribir estas líneas con 4782 paquetes, por lo que poder instalar los paquetes de este repositorio con un simple comando supone una ayuda muy a tener en cuenta.<br /><br />Instalar un paquete de PyPI es tan sencillo como pasar al comando easy_install el nombre del paquete a instalar<br /><br />easy_install docutils<br />Searching for docutils<br />Reading <!-- m --><a class="postlink" href="http://pypi.python.org/simple/docutils/">http://pypi.python.org/simple/docutils/</a><!-- m --><br />Reading <!-- m --><a class="postlink" href="http://docutils.sourceforge.net/">http://docutils.sourceforge.net/</a><!-- m --><br />Best match: docutils 0.5<br />Downloading <!-- m --><a class="postlink" href="http://prdownloads.sourceforge.net/docutils/docutils-0.5.tar.gz?download">http://prdownloads.sourceforge.net/docu ... z?download</a><!-- m --><br />Processing docutils-0.5.tar.gz<br />Running docutils-0.5/setup.py -q bdist_egg --dist-dir /tmp/easy_install-wUAyUZ/docutils-0.5/egg-dist-tmp-kWkkkv<br />&quot;optparse&quot; module already present; ignoring extras/optparse.py.<br />&quot;textwrap&quot; module already present; ignoring extras/textwrap.py.<br />zip_safe flag not set; analyzing archive contents…<br />docutils.writers.newlatex2e.__init__: module references __file__<br />docutils.writers.pep_html.__init__: module references __file__<br />docutils.writers.html4css1.__init__: module references __file__<br />docutils.writers.s5_html.__init__: module references __file__<br />docutils.parsers.rst.directives.misc: module references __file__<br />Adding docutils 0.5 to easy-install.pth file<br />Installing rst2pseudoxml.py script to /usr/bin<br />Installing rst2html.py script to /usr/bin<br />Installing rst2latex.py script to /usr/bin<br />Installing rst2s5.py script to /usr/bin<br />Installing rst2newlatex.py script to /usr/bin<br />Installing rstpep2html.py script to /usr/bin<br />Installing rst2xml.py script to /usr/bin<br />Installed /usr/lib/python2.5/site-packages/docutils-0.5-py2.5.egg<br />Processing dependencies for docutils<br />Finished processing dependencies for docutils<br /><br />Poder subir nuestros paquetes a PyPI requiere de un proceso un poco más laborioso. Primero registramos los detalles de nuestra aplicación en PyPI mediante la opción register del script setup.py, el cuál nos preguntará por nuestro nombre de usuario, contraseña y correo electrónico si no tenemos cuenta en PyPI, o nombre de usuario y contraseña si nos registramos anteriormente:<br /><br />python setup.py register<br />running register<br />running egg_info<br />creating Aplicacion_de_ejemplo.egg-info<br />writing Aplicacion_de_ejemplo.egg-info/PKG-INFO<br />writing top-level names to Aplicacion_de_ejemplo.egg-info/top_level.txt<br />writing dependency_links to Aplicacion_de_ejemplo.egg-info/dependency_links.txt<br />writing manifest file 'Aplicacion_de_ejemplo.egg-info/SOURCES.txt'<br />reading manifest file 'Aplicacion_de_ejemplo.egg-info/SOURCES.txt'<br />writing manifest file 'Aplicacion_de_ejemplo.egg-info/SOURCES.txt'<br />We need to know who you are, so please choose either:<br />1. use your existing login,<br />2. register as a new user,<br />3. have the server generate a new password for you (and email it to you), or<br />4. quit<br />Your selection [default 1]: 1<br />Username: zootropo<br />Password:<br />Server response (200): OK<br />I can store your PyPI login so future submissions will be faster.<br />(the login will be stored in /home/zootropo/.pypirc)<br />Save your login (y/N)?y<br /><br />Para crear y subir una distribución con el código fuente de nuestra aplicación se utiliza la opción sdist upload:<br /><br />python setup.py sdist upload<br /><br />También podríamos crear y subir un egg (un formato de archivo para distribuir aplicaciones Python que veremos en la próxima sección) utilizando la opción bdist_egg upload:<br /><br />python setup.py bdist_egg upload<br /><br />O combinar los tres pasos en un solo comando:<br /><br />python setup.py register sdist bdist_egg upload<br /><br />Una vez subido el paquete cualquier persona podría instalarlo en su sistema utilizando easy_install, de la misma forma que cualquier otro paquete de PyPI:<br /><br />easy_install mi-paquete<br />Eggs<br /><br />Los eggs (huevo en inglés) son archivos de extensión .egg mediante los que distribuir aplicaciones en Python. Serían algo así como el equivalente a los archivos .jar del mundo Java. Son multiplataforma, permiten manejar dependencias, y permiten instalar distintas versiones del mismo paquete.<br /><br />La forma más sencilla de instalar aplicaciones distribuidas como archivos egg es mediante el comando easy_install, el cuál comentamos brevemente en el punto anterior al hablar sobre su uso para instalar paquetes de PyPI. Para instalar un archivo egg no tenemos más que pasarle el nombre del archivo al comando easy_install:<br /><br />easy_install mi-aplicacion.egg<br /><br />o bien podemos pasarle la URL de la que descargar el egg:<br /><br />easy_install <!-- m --><a class="postlink" href="http://sourceforgenet/mi_programa.egg">http://sourceforgenet/mi_programa.egg</a><!-- m --><br /><br />Para construir nuestros propios eggs podemos utilizar el comando bdist_egg de setup.py, de forma similar a la manera en que construíamos paquetes RPM o instaladores para Windows con distutils:<br /><br />python setup.py bdist_egg<br />Otros cambios destacables<br /><br />Uno de los cambios más interesantes es la incorporación de un nuevo argumento para la función setup llamado install_requires, que consiste en una cadena o lista de cadenas que indica los paquetes de los que depende la aplicación. Si nuestra aplicación necesitara tener instalado el paquete apoyo para poder ejecutarse, por ejemplo, escribiríamos lo siguiente:<br />view plaincopy to clipboardprint?<br /><br />   1. install_requires = [&quot;apoyo&quot;]  <br /><br />install_requires = [&quot;apoyo&quot;]<br /><br />Y de esta forma, easy_install se encargaría de buscar e instalar el paquete si fuera necesario, bien en PyPI, o en cualquier otro repositorio indicado por el parámetro dependency_links.<br /><br />Además podemos especificar que se necesita una versión concreta del paquete requerido, que sea mayor o menor que una cierta versión, o que no se trate de una versión determinada utilizando operadores relacionales (==, !=, &lt;, &lt;=, &gt;, &gt;=):<br />view plaincopy to clipboardprint?<br /><br />   1. install_requires = [&quot;apoyo &gt;= 1.0 &lt; 2.0&quot;]  <br /><br />install_requires = [&quot;apoyo &gt;= 1.0 &lt; 2.0&quot;]<br /><br />También existen argumentos similares para declarar paquetes que deben instalarse para poder ejecutar el script de instalación (setup_requires), para poder ejecutar las posibles pruebas incluídas con el paquete (tests_require) y para conseguir funcionalidades adicionales (extras_require, que consiste en este caso en un diccionario).<br /><br />setuptools incluye también atajos útiles, como la función find_packages() que nos evita tener que listar todos y cada uno de los paquetes que utiliza nuestro script en el parámetro packages, como era el caso de distutils:<br />view plaincopy to clipboardprint?<br /><br />   1. from ez_setup import use_setuptools  <br />   2. use_setuptools()  <br />   3.   <br />   4. from setuptools import setup, find_packages  <br />   5.   <br />   6. setup(name=&quot;Aplicacion de ejemplo&quot;,  <br />   7.       version=&quot;0.1&quot;,  <br />   8.       description=&quot;Ejemplo del funcionamiento de distutils&quot;,  <br />   9.       author=&quot;Cybertux&quot;,  <br />  10.       author_email=&quot;RedHack@linux.usr&quot;,  <br />  11.       url=&quot;http://www.pytutorial.info/&quot;,  <br />  12.       license=&quot;GPL&quot;,  <br />  13.       scripts=[&quot;ejemplo.py&quot;],  <br />  14.       packages = find_packages()  <br />  15. )  <br /><br />from ez_setup import use_setuptools<br />use_setuptools()<br /><br />from setuptools import setup, find_packages<br /><br />setup(name=&quot;Aplicacion de ejemplo&quot;,<br />      version=&quot;0.1&quot;,<br />      description=&quot;Ejemplo del funcionamiento de distutils&quot;,<br />      author=&quot;Cybertux&quot;,<br />      author_email=&quot;RedHack@linux.usr&quot;,<br />      url=&quot;http://www.pytutorial.info/&quot;,<br />      license=&quot;GPL&quot;,<br />      scripts=[&quot;ejemplo.py&quot;],<br />      packages = find_packages()<br />)<br /><br />Crear ejecutables .exe<br /><br />Tanto en Mac OS como en la mayor parte de las distribuciones Linux el intérprete de Python está instalado por defecto, por lo que los usuarios de estos sistemas no tienen mayor complicación a la hora de instalar y ejecutar aplicaciones escritas en Python.<br /><br />En el caso de Windows, esto no es así, por lo que sería interesante que los usuarios de este sistema operativo no tuvieran que instalar el intérprete de Python. También sería interesante que nuestro programa consistiera en un archivo .exe en lugar de uno o varios archivos .py, para simplificar las cosas.<br /><br />Todo esto lo podemos lograr gracias a py2exe, una extensión para distutils que, como su nombre indica, permite crear ejecutables para Windows a partir de código Python, y que permite ejecutar estas aplicaciones sin necesidad de tener instalado el intérprete de Python en el sistema.<br /><br />Py2exe funciona examinando nuestro código fuente en busca de los módulos y paquetes que utilizamos, compilándolos y construyendo un nuevo archivo que incluye estos archivos y un pequeño intérprete de Python integrado.<br /><br />Para probar el funcionamiento de py2exe creemos un pequeño programa ejemplo.py<br />view plaincopy to clipboardprint?<br /><br />   1. print &quot;Soy un .exe&quot;  <br /><br />print &quot;Soy un .exe&quot;<br /><br />y el archivo setup.py correspondiente. Los cambios que tenemos que realizar a setup.py son sencillos: importar py2exe, y utilizar los argumentos console y windows para indicar el nombre del script o scripts que queramos convertir en ejecutables de consola o ejecutables de interfaz gráfica, respectivamente.<br />view plaincopy to clipboardprint?<br /><br />   1. from distutils.core import setup  <br />   2. import py2exe  <br />   3.   <br />   4. setup(name=&quot;Aplicacion de ejemplo&quot;,  <br />   5.       version=&quot;0.1&quot;,  <br />   6.       description=&quot;Ejemplo del funcionamiento de distutils&quot;,  <br />   7.       author=&quot;Cybertux&quot;,  <br />   8.       author_email=&quot;RedHack@linux.usr&quot;,  <br />   9.       url=&quot;http://www.pytutorial.info/&quot;,  <br />  10.       license=&quot;GPL&quot;,  <br />  11.       scripts=[&quot;ejemplo.py&quot;],  <br />  12.       console=[&quot;ejemplo.py&quot;]  <br />  13. )  <br /><br />from distutils.core import setup<br />import py2exe<br /><br />setup(name=&quot;Aplicacion de ejemplo&quot;,<br />      version=&quot;0.1&quot;,<br />      description=&quot;Ejemplo del funcionamiento de distutils&quot;,<br />      author=&quot;Cybertux&quot;,<br />      author_email=&quot;RedHack@linux.usr&quot;,<br />      url=&quot;http://www.pytutorial.info/&quot;,<br />      license=&quot;GPL&quot;,<br />      scripts=[&quot;ejemplo.py&quot;],<br />      console=[&quot;ejemplo.py&quot;]<br />)<br /><br />Para crear el ejecutable, utilizamos una nueva opción de línea de comandos para setup.py disponible tras importar el módulo y llamada, cómo no, py2exe:<br /><br />python setup.py py2exe<br /><br />Con esto py2exe generará un directorio build, con las librerías compiladas, y un directorio dist, con los archivos que conforman nuestra aplicación.<br /><br />Entre los archivos que podemos encontrar en dist tendremos uno o varios ejecutables con el mismo nombre que los scripts indicados en console y windows, un archivo python*.dll, que es el intérprete de Python, y un archivo library.zip, que contiene varios archivos pyc que son los módulos que utiliza la aplicación compilados.<br /><br />Si queremos reducir el número de archivos a distribuir, podemos utilizar la opción --bundle de py2exe para añadir a library.zip las dll y los pyd (--bundle 2) o las dll, los pyd y el intérprete (--bundle 1).<br /><br />python setup.py py2exe --bundle 1<br /><br />o bien podemos añadir un nuevo argumento options a la función setup que indique el valor a utilizar (opción bundle_files), de forma que no tengamos que añadir el flag --bundle cada vez que usemos el comando py2exe:<br />view plaincopy to clipboardprint?<br /><br />   1. from distutils.core import setup  <br />   2. import py2exe  <br />   3.   <br />   4. setup(name=&quot;Aplicacion de ejemplo&quot;,  <br />   5.       version=&quot;0.1&quot;,  <br />   6.       description=&quot;Ejemplo del funcionamiento de distutils&quot;,  <br />   7.       author=&quot;Cybertux&quot;,  <br />   8.       author_email=&quot;RedHack@linux.usr&quot;,  <br />   9.       url=&quot;http://RedHack@linux.usr&quot;,  <br />  10.       license=&quot;GPL&quot;,  <br />  11.       scripts=[&quot;ejemplo.py&quot;],  <br />  12.       console=[&quot;ejemplo.py&quot;],  <br />  13.       options={&quot;py2exe&quot;: {&quot;bundle_files&quot;: 1}}  <br />  14. )  <br /><br />from distutils.core import setup<br />import py2exe<br /><br />setup(name=&quot;Aplicacion de ejemplo&quot;,<br />      version=&quot;0.1&quot;,<br />      description=&quot;Ejemplo del funcionamiento de distutils&quot;,<br />      author=&quot;Cybertux&quot;,<br />      author_email=&quot;RedHack@linux.usr&quot;,<br />      url=&quot;http://www.pytutorial.info&quot;,<br />      license=&quot;GPL&quot;,<br />      scripts=[&quot;ejemplo.py&quot;],<br />      console=[&quot;ejemplo.py&quot;],<br />      options={&quot;py2exe&quot;: {&quot;bundle_files&quot;: 1}}<br />)<br /><br />Por último podemos incluso prescindir de library.zip e incrustarlo en el ejecutable utilizando el argumento zipfile=None<br />view plaincopy to clipboardprint?<br /><br />   1. from distutils.core import setup  <br />   2. import py2exe  <br />   3.   <br />   4. setup(name=&quot;Aplicacion de ejemplo&quot;,  <br />   5.       version=&quot;0.1&quot;,  <br />   6.       description=&quot;Ejemplo del funcionamiento de distutils&quot;,  <br />   7.       author=&quot;Cybertux&quot;,  <br />   8.       author_email=&quot;RedHack@linux.usr&quot;,  <br />   9.       url=&quot;http://www.pytutorial.info/&quot;,  <br />  10.       license=&quot;GPL&quot;,  <br />  11.       scripts=[&quot;ejemplo.py&quot;],  <br />  12.       console=[&quot;ejemplo.py&quot;],  <br />  13.       options={&quot;py2exe&quot;: {&quot;bundle_files&quot;: 1}},  <br />  14.       zipfile=None  <br />  15. )  <br /><br />from distutils.core import setup<br />import py2exe<br /><br />setup(name=&quot;Aplicacion de ejemplo&quot;,<br />      version=&quot;0.1&quot;,<br />      description=&quot;Ejemplo del funcionamiento de distutils&quot;,<br />      author=&quot;Cybertux&quot;,<br />      author_email=&quot;RedHack@linux.usr&quot;,<br />      url=&quot;http://mundogeek.net/tutorial-python/&quot;,<br />      license=&quot;GPL&quot;,<br />      scripts=[&quot;ejemplo.py&quot;],<br />      console=[&quot;ejemplo.py&quot;],<br />      options={&quot;py2exe&quot;: {&quot;bundle_files&quot;: 1}},<br />      zipfile=None<br />espero ke les sirva a los compañeros interesados en distribuir sus aplicacioes.... <img src="http://losersjuegos.com.ar/foro/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=1973">GsusKrist</a> — Sab Ene 24, 2009 6:11 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lacabra25]]></name></author>
<updated>2009-01-09T16:27:53+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1854#p1854</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1854#p1854"/>
<title type="html"><![CDATA[como convertir .py a .deb]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1854#p1854"><![CDATA[
hola, ya que esta este tema iniciado voi a aprovechar a hacer una pregunta sobre los .deb, ¿como se hace para que al instalarse ademaas de poderse ejecutar en la terminal aparezca en el menu del sistema?<br /><br />Y una cosa mas, el comando que hay que usar para crear el .deb ¿es un programa, un comando del sistema o que es?, si es un programa ¿que hace exactamente el programa?<br /><br />Si el programa necesita de archivos para poder ejecutarse como imagenes, archivos que pueda modificar para guardar datos y configuraciones y cosas asi (como suelen necesitar los juegos) ¿como habria que ponerlos en el .deb para que una vez instalados el programa los pueda encontrar y los que necesite modificar pueda modificarlos?<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=1912">lacabra25</a> — Vie Ene 09, 2009 4:27 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[algarafa]]></name></author>
<updated>2008-12-15T17:23:05+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1806#p1806</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1806#p1806"/>
<title type="html"><![CDATA[Gracias por la aclaración.]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1806#p1806"><![CDATA[
<img src="http://losersjuegos.com.ar/foro/images/smilies/icon_razz.gif" alt=":P" title="Razz" /> Gracias por la aclaración, sin duda me será útil.<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=2006">algarafa</a> — Lun Dic 15, 2008 5:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[endaramiz]]></name></author>
<updated>2008-12-12T16:19:57+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1804#p1804</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1804#p1804"/>
<title type="html"><![CDATA[como convertir .py a .deb]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1804#p1804"><![CDATA[
Una gran explicación (con ejemplos y todo... ). Ya se algo más para cuando programe algo en condiciones <img src="http://losersjuegos.com.ar/foro/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br />Muchas gracias!<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=1809">endaramiz</a> — Vie Dic 12, 2008 4:19 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[hugoruscitti]]></name></author>
<updated>2008-12-12T12:32:50+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1803#p1803</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1803#p1803"/>
<title type="html"><![CDATA[Re: Mi primer paquete]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1803#p1803"><![CDATA[
<blockquote><div><cite>RAGPacho escribió:</cite><br />Mi pregunta ahora es la siguiente: ¿Como hacer para que con poner calculadora-geometrica en la terminal se abra?<br /></div></blockquote><br /><br />Cuando escribes un nombre de comando en una terminal, el interprete<br />de ordenes busca entre los programas que tiene dentro de los directorio &quot;/usr/bin&quot; y<br />&quot;/usr/local/bin&quot; (entre otros) a ver si coincide con algún nombre.<br /><br />Por ejemplo, si escribo un archivo llamado &quot;calculadora&quot;, le doy permisos<br />de ejecución con &quot;chmod a+x archivo&quot; y lo grabo en &quot;/usr/local/bin&quot;, ese<br />programa se podrá ejecutar desde cualquier sitio escribiendo &quot;calculadora&quot;.<br /><br />Así que para generar un paquete .deb que genere un comando o programa<br />nuevo, solo tienes que crear un directorio &quot;usr/local/bin&quot; o &quot;usr/bin&quot;<br />en tu directorio principal y colocar un archivo ejecutable ahí.<br /><br />Ah, y recuerda que luego de instalar el paquete puedes ejecutar<br />&quot;dpkg -L nombre_del_paquete&quot; para ver dónde se instalaron todos los archivos.<br /><br />Saludos.<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=3">hugoruscitti</a> — Vie Dic 12, 2008 12:32 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[algarafa]]></name></author>
<updated>2008-12-11T19:37:28+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1802#p1802</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1802#p1802"/>
<title type="html"><![CDATA[Mi primer paquete]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1802#p1802"><![CDATA[
Bueno, pues ya he hecho mi primer paquete, del programa aquel que había desarrolado en otro topic. Lo podeis descargar desde:<br /><!-- m --><a class="postlink" href="http://informaticafacil.atwebpages.com/descargas/Calculadora_geometrica.deb">http://informaticafacil.atwebpages.com/ ... etrica.deb</a><!-- m --><br />Mi pregunta ahora es la siguiente: ¿Como hacer para que con poner calculadora-geometrica en la terminal se abra?<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=2006">algarafa</a> — Jue Dic 11, 2008 7:37 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[algarafa]]></name></author>
<updated>2008-12-11T18:56:04+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1800#p1800</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1800#p1800"/>
<title type="html"><![CDATA[Gracias]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1800#p1800"><![CDATA[
¡Muchas gracias por las aclaraciones! <img src="http://losersjuegos.com.ar/foro/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=2006">algarafa</a> — Jue Dic 11, 2008 6:56 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[hugoruscitti]]></name></author>
<updated>2008-12-11T13:25:09+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1798#p1798</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1798#p1798"/>
<title type="html"><![CDATA[Re: ¿?]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1798#p1798"><![CDATA[
<blockquote><div><cite>RAGPacho escribió:</cite><br />Hola Hugo. Pues bien, este tema me ha interesado a mi también y la verdad es que no lo he entendido muy bien. Descomprimo el archivo, y me sale lo siguiente: un directorio llamado hola, que contiene el programa, y un archivo llamado Makefile. Mi primera pregunta es: ¿Para que sirve dicho archivo?<br /></div></blockquote><br /><br />Saludos, en realidad el archivo Makefile es opcional, se puede<br />borrar.<br /><br />El unico motivo por el que está es para facilitar la generación<br />del paquete, evitando tipear el comando &quot;dpkg --build ....&quot; cada<br />vez que quieres crear el archivo .deb. Por ejemplo, si estás<br />dentro el directorio donde esta el archivo Makefile y ejecutas<br />el comando &quot;make&quot;, entonces se ejecuta automáticamente<br />el archivo .deb... esto se utiliza generalmente para compilar<br />programas, aunque si quieres se puede borrar el archivo<br />y escribir manualmente el comando &quot;dpkg --build ...&quot; y listo.<br /><br /><blockquote><div><cite>RAGPacho escribió:</cite><br />Una vez abierto el directorio hola aparecen el directorio DEBIAN y el directorio usr.<br />El directorio usr se subdivide de la siguiente manera: /usr/local/bin/hola.py que simboliza la ruta donde se instalara el programa, el directorio DEBIAN no entiendo muy bien para que se acaba de utilizar. Gracias por su atención.<br /></div></blockquote><br /><br />El directorio DEBIAN solo sirve para especificar detalles del<br />paquete, no se instalará en el sistema. Uno de los archivos<br />que puedes colocar ahí es &quot;control&quot;, que comenté con<br />anterioridad. Otro archivo que puedes ver en otros paquetes es<br />&quot;postint&quot;, un script que se ejecutará en el equipo destino junto<br />después de terminada la instalación.<br /><br /><blockquote><div><cite>RAGPacho escribió:</cite><br />P.D.: ¿Como haces para que al hacer doble clic y darle a ejecutar se abra el programa? Aunque añado la linea #!/usr/local/python pero no ocurre.<br />Gracias de nuevo.<br /></div></blockquote><br /><br />Tendrías que dar atributo de ejecución al programa, por ejemplo<br />desde la interfaz gráfica usando la ventana de propiedades<br />de archivo, o ejecutando &quot;chmod a+x nombre_archivo&quot;.<br /><br />Saludos.<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=3">hugoruscitti</a> — Jue Dic 11, 2008 1:25 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[algarafa]]></name></author>
<updated>2008-12-09T19:46:18+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1793#p1793</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1793#p1793"/>
<title type="html"><![CDATA[¿?]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1793#p1793"><![CDATA[
Hola Hugo. Pues bien, este tema me ha interesado a mi también y la verdad es que no lo he entendido muy bien. Descomprimo el archivo, y me sale lo siguiente: un directorio llamado hola, que contiene el programa, y un archivo llamado Makefile. Mi primera pregunta es: ¿Para que sirve dicho archivo? Una vez abierto el directorio hola aparecen el directorio DEBIAN y el directorio usr.<br />El directorio usr se subdivide de la siguiente manera: /usr/local/bin/hola.py que simboliza la ruta donde se instalara el programa, el directorio DEBIAN no entiendo muy bien para que se acaba de utilizar. Gracias por su atención.<br /><br />P.D.: ¿Como haces para que al hacer doble clic y darle a ejecutar se abra el programa? Aunque añado la linea #!/usr/local/python pero no ocurre.<br />Gracias de nuevo.<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=2006">algarafa</a> — Mar Dic 09, 2008 7:46 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[hugoruscitti]]></name></author>
<updated>2008-12-09T13:13:53+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1792#p1792</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1792#p1792"/>
<title type="html"><![CDATA[como convertir .py a .deb]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1792#p1792"><![CDATA[
Saludos, disculpa por mi demora al contestar pero quería contestar<br />tu mensaje con un ejemplo (y eso me llevó algo de tiempo).<br /><br />Lo primero que debes tener en cuenta es crear la estructura de directorios de<br />tu aplicación; generalmente esto incluye pensar dónde quedarán tus archivos<br />dentro del equipo que los instale. Por ejemplo, para el ejemplo que escribí<br />me resulta conveniente que el programa se instale en &quot;/usr/local/bin&quot;, de<br />forma que el usuario ejecute el nuevo comando &quot;hola&quot; y este inicie la <br />aplicación.<br /><br />Luego tienes que crear un directorio que simbolice el directorio &quot;raiz&quot;<br />del sistema donde se instalará (observa mas abajo para un ejemplo) y un<br />directorio llamado &quot;DEBIAN&quot; donde se especifica información sobre el<br />paquete.<br /><br />Veamos el ejemplo:<br /><br />   <!-- m --><a class="postlink" href="http://www.losersjuegos.com.ar/incoming/descargas/20081209/ejemplo_deb.tar.gz">http://www.losersjuegos.com.ar/incoming ... deb.tar.gz</a><!-- m --><br /><br />El directorio que muestro a continuación forma parte del programa que <br />construí para ejemplificar la creación del archivo .deb:<br /><br /><img src="http://www.losersjuegos.com.ar/incoming/descargas/20081209/raiz.png" alt="Imagen" /><br /><br />El directorio de la aplicación tiene dos directorios, uno llamado &quot;DEBIAN&quot;<br />donde se almacena <br /><br />Por lo tanto, tu tienes que construir el esquema de directorios para<br />tu aplicación; hay varias reglas para seguir, aunque seguramente puedas<br />aprender mucho de inspeccionar otros archivos DEB.<br /><br />Ah, por cierto, utilizando el navegador de archivos &quot;mc&quot;, puedes<br />ingresar en el interior de un archivo .deb y ver cómo es por dentro. Eso<br />te puede ayudar a aprender de otros paquetes.<br /><br /><br />Por último, una vez que tienes tu directorio listo, para crear el<br />paquete .deb debes ejecutar el comando:<br /><br /><dl class="codebox"><dt>Code: </dt><dd><code>dpkg --build DIRECTORIO_DEL_PROGRAMA<br /></code></dd></dl><br /><br />donde DIRECTORIO_DEL_PROGRAMA sería el directorio que representa el sistema<br />raiz y donde está almacenado el directorio DEBIAN. En el caso del ejemplo este<br />directorio sería &quot;hola&quot;.<br /><br />Para probar si el programa realmente se instala puedes ejecutar el comando:<br /><br /><dl class="codebox"><dt>Code: </dt><dd><code>sudo dpkg -i ARCHIVO.deb<br /></code></dd></dl><br /><br />y para verificar qué se instaló ya puedes utilizar &quot;apt&quot; y su base de<br />datos. Por ejemplo, para ver la descripción del programa y luego desinstalarlo<br />ejecuta los siguientes dos comandos:<br /><br /><dl class="codebox"><dt>Code: </dt><dd><code>apt-cache show hola<br />sudo apt-get remove hola<br /></code></dd></dl><br /><br />Bueno, espero haber sido de utilidad. Cualquier duda o comentario avísanos.<br />Buena suerte.<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=3">hugoruscitti</a> — Mar Dic 09, 2008 1:13 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[GsusKrist]]></name></author>
<updated>2008-12-07T00:11:23+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1790#p1790</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1790#p1790"/>
<title type="html"><![CDATA[como convertir .py a .deb]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=416&amp;p=1790#p1790"><![CDATA[
Hola a todos ya tenia rato sin aparecer en el foro.<br />como el titulo de mi pregunta lo dice bienclaro, la idea es como podré convertir el codigo fuente de un juego en pyton a un instalador .deb para ahorrarle el tiempo en instalar python, pygame y cualkier otra biblioteca a los usuarios ke kieran jugar mi juego en ubuntu o en cualkier gnu/linux hijo del debian???<br />  <img src="http://losersjuegos.com.ar/foro/images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" /> <br />les agradezco su respuesta <img src="http://losersjuegos.com.ar/foro/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=1973">GsusKrist</a> — Dom Dic 07, 2008 12:11 am</p><hr />
]]></content>
</entry>
</feed>