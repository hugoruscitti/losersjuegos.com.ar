<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="es">
<link rel="self" type="application/atom+xml" href="http://losersjuegos.com.ar/foro/feed.php?f=9&amp;t=555" />

<title>LosersJuegos</title>
<subtitle>Desarrollando videojuegos libres</subtitle>
<link href="http://losersjuegos.com.ar/foro/index.php" />
<updated>2009-05-04T14:49:49+00:00</updated>

<author><name><![CDATA[LosersJuegos]]></name></author>
<id>http://losersjuegos.com.ar/foro/feed.php?f=9&amp;t=555</id>
<entry>
<author><name><![CDATA[Juanxo]]></name></author>
<updated>2009-05-04T14:49:49+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=555&amp;p=2510#p2510</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=555&amp;p=2510#p2510"/>
<title type="html"><![CDATA[Redes neuronales, el perceptrón]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=555&amp;p=2510#p2510"><![CDATA[
Pues ya será mas inteligente que alguno.... jajajaja.<br />Un placer, para eso estamos<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=2057">Juanxo</a> — Lun May 04, 2009 2:49 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lacabra25]]></name></author>
<updated>2009-05-03T22:44:39+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=555&amp;p=2507#p2507</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=555&amp;p=2507#p2507"/>
<title type="html"><![CDATA[Redes neuronales, el perceptrón]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=555&amp;p=2507#p2507"><![CDATA[
Gracias Juanxo, acabo de descargarlo pero dejo lo de comenzar a mirarlo para mañana que ya es tarde. A ver si despues de leerlo consigo proramar algo lo suficiente inteligente para al menos que sepa jugar al tres en raya, jeje. <img src="http://losersjuegos.com.ar/foro/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=1912">lacabra25</a> — Dom May 03, 2009 10:44 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Juanxo]]></name></author>
<updated>2009-05-03T21:54:43+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=555&amp;p=2506#p2506</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=555&amp;p=2506#p2506"/>
<title type="html"><![CDATA[Redes neuronales, el perceptrón]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=555&amp;p=2506#p2506"><![CDATA[
Buenas lacabra:<br />Yo la verdad es que no estoy mu puesto en el tema de AI, pero estuve leyendo un <a href="http://knowfree.net/2008/01/06/programming-game-ai-by-example-2.kf" class="postlink">libro</a>que creo que cumple tus requisitos.<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=2057">Juanxo</a> — Dom May 03, 2009 9:54 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lacabra25]]></name></author>
<updated>2009-05-02T23:24:54+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=555&amp;p=2500#p2500</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=555&amp;p=2500#p2500"/>
<title type="html"><![CDATA[Redes neuronales, el perceptrón]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=555&amp;p=2500#p2500"><![CDATA[
Hola, estoi tratando un poco las redes neuronales, quisiera saber si sabeis de buenos manuales y tutoriales que además de dar un enfoque teorico (esos que dicen que son, que tratan...) que den un enfoque practico (con informacion sobre algun tipo de red neuronal, codigo en C para crearlas...); yo por ahora del que más informacion he podido encontrar gracias a wikipedia a sido del perceptron y he comenzado a programar un pequeño programa con el que intentar enseñar a un percepton solo a hacer un AND de 2 bit y un OR que segun wikipedia es algo que puede aprender un solo percepton sin necesidad de tener varios conectados formando una red, el problema esta cuando recive como entrada un bit a 1 y el otro a 0 en cuyo caso devuelve un resultado incorrecto, si por el contrario recive como entrada o los dos bits a 1 o los dos a 0 devuelve 1 o 0 respectivamente, este problema se nota sobretodo en el caso de OR.<br /><br />El perceptron que estoi intentando programar recive dos int como entrada (aunque esto es lo de menos ya que la salida es o 1 o 0 por lo que al conectarlos en una red a varios solo son de entrada recivirian un valor distinto de 0 o 1, los que estuviesen despues recivirian de estos o 0 o 1) y tiene dos salidas independientes (como si fuesen dos perceptones pero en uno) de forma que la entrada es tratada para obtener el resultado de una salida de forma independiente a la otra salida y los valores de entrada no se cambian para no interferir con la otra salida y cada salida tiene su variable de poderacion para no interferir una con la otra.<br /><br />El codigo que tengo por el momento es el siguiente:<br />.h<br /><dl class="codebox"><dt>Code: </dt><dd><code>typedef struct neurona_&#123;<br />int x, y, *za, *zb, wa, wb, da, db;<br />/*variable que indica si la neurona esta aprendiendo o no*/<br />char a, b;<br />&#125; neurona;<br /><br />int actualiza_neurona&#40;neurona *n&#41;;</code></dd></dl><br />Nota: x e y son las dos entradas, *za y *zb son punteros a las dos salidas (son punteros para poder apuntar a las entradas de otros perceptones individuales para poder formar una red neuronal), wa y wb son las ponderaciones respectivamente de cada salida, da y db es el valor esperado para que se pueda &quot;entrenar&quot; a la neurona y a y b son simplemente para que la funcion con la que actualizo los valores de la estructura diferencie de cuando solamente debe de actualizar la salida en funcion de la entrada y cuando ademas debera de cambiar los valores de ponderacion para que la neurona aprenda.<br /><br />El .c:<br /><dl class="codebox"><dt>Code: </dt><dd><code>#include &lt;stdio&gt;<br />#include &quot;main.h&quot;<br /><br />int main&#40;void&#41;&#123;<br />int a=0, b=0, i=0;<br />neurona n;<br />n.wa= 1;<br />n.wb= 1;<br />n.za= &amp;a;<br />n.zb= &amp;b;<br />for&#40;i=0; i&lt;20&gt;za&#41;&#41;= &#40;&#40;n-&gt;x + n-&gt;y&#41;*&#40;n-&gt;wa&#41;&#41;;<br />&#40;*&#40;n-&gt;zb&#41;&#41;= &#40;&#40;n-&gt;x + n-&gt;y&#41;*&#40;n-&gt;wb&#41;&#41;;<br />if&#40;*&#40;n-&gt;za&#41; &gt; 0&#41;&#123;<br />   *&#40;n-&gt;za&#41;=1;<br />&#125;else&#123;<br />   *&#40;n-&gt;za&#41;=0;<br />&#125;<br />if&#40;*&#40;n-&gt;zb&#41; &gt; 0&#41;&#123;<br />   *&#40;n-&gt;zb&#41;=1;<br />&#125;else&#123;<br />   *&#40;n-&gt;zb&#41;=0;<br />&#125;<br />/*comprobando si la neurona esta aprendiendo y corrigiendo la variable de la suma ponderada*/<br />if&#40;n-&gt;a != 0&#41;&#123;<br />   n-&gt;wa+= 0.5*&#40;n-&gt;da - &#40;&#40;n-&gt;x + n-&gt;y&#41;*&#40;n-&gt;wa&#41;&#41;&#41;*&#40;n-&gt;x + n-&gt;y&#41;;<br />&#125;<br />if&#40;n-&gt;b != 0&#41;&#123;<br />   n-&gt;wb+= 0.5*&#40;n-&gt;db - &#40;&#40;n-&gt;x + n-&gt;y&#41;*&#40;n-&gt;wb&#41;&#41;&#41;*&#40;n-&gt;x + n-&gt;y&#41;;<br />&#125;<br />return 0;<br />&#125;</code></dd></dl><br /><br />Aunque estoi programando un perceptrón, tambien estoy buscando sobre otras redes neuronales, por lo que si sabeis de otras tambien me interesaria.<br /><br />Gracias de antemano.<br /><br /><span style="font-weight: bold">EDITO:</span><br />He conseguido arreglar el problema del perceptrón, el problema estava en el umbral de activacion que llevaba a error en el redodneo del float cuando se pasa a un int.<br /><br />Para poder abordar el problema cambie tambien gran perte del codigo y tuve que quitar una salida para simpleficarlo y poderlo programar, ahora lo mismo le añado la otra salida duplicando el codigo que ya se que funciona en la primera.<br /><br />El .h:<br /><dl class="codebox"><dt>Code: </dt><dd><code>typedef struct neurona_&#123;<br />float x, y, wa, wb, da;<br />int *za;<br />/*variable que indica si la neurona esta aprendiendo o no*/<br />char a;<br />&#125; neurona;<br /><br />int actualiza_neurona&#40;neurona *n&#41;;</code></dd></dl><br /><br />En el codigo tambien uso un bucle para entrenar la neurona artificial y no tener que estar tecleando los valores para entrenarla a mano:<br /><dl class="codebox"><dt>Code: </dt><dd><code>#include &lt;stdio&gt;<br />#include &quot;main.h&quot;<br /><br />int main&#40;void&#41;&#123;<br />int a=0, i=0;<br />neurona n;<br />n.wa= 0;<br />n.wb= 0;<br />n.za= &amp;a;<br />n.a=1;<br />for&#40;i=0; i&lt;2000; i++&#41;&#123;<br />   n.x= 0;<br />   n.y= 1;<br />   n.da= 1;<br />   actualiza_neurona&#40;&amp;n&#41;;<br />   n.x= 1;<br />   n.y= 1;<br />   n.da= 1;<br />   actualiza_neurona&#40;&amp;n&#41;;<br />   n.x= 1;<br />   n.y= 0;<br />   n.da= 0;<br />   actualiza_neurona&#40;&amp;n&#41;;<br />   n.x= 0;<br />   n.y= 0;<br />   n.da= 0;<br />   actualiza_neurona&#40;&amp;n&#41;;<br />&#125;<br />for&#40;i=0; i&lt;20&gt;x*n-&gt;wa&#41;+&#40;n-&gt;y*n-&gt;wb&#41;&#41;-0.7 &gt; 0&#41;&#123;<br />   *&#40;n-&gt;za&#41;=1;<br />&#125;else&#123;<br />   *&#40;n-&gt;za&#41;=0;<br />&#125;<br />/*comprobando si la neurona esta aprendiendo y corrigiendo la variable de la suma ponderada*/<br />if&#40;n-&gt;a != 0&#41;&#123;<br />   if&#40;&#40;&#40;n-&gt;x*n-&gt;wa&#41;+&#40;n-&gt;y*n-&gt;wb&#41;&#41;-0.7 &lt;0&gt;da &gt; 0&#41;&#123;<br />      n-&gt;wa+=n-&gt;x*0.4;<br />   &#125;else&#123;<br />      if&#40;&#40;&#40;n-&gt;x + n-&gt;y&#41;*&#40;n-&gt;wa&#41;&#41;-0.7 &gt; 0 &amp;&amp; n-&gt;da &lt;0&gt;wa-=n-&gt;x*0.4;<br />      &#125;<br />   &#125;<br />   if&#40;&#40;&#40;n-&gt;x*n-&gt;wa&#41;+&#40;n-&gt;y*n-&gt;wb&#41;&#41;-0.7 &lt;0&gt;da &gt; 0&#41;&#123;<br />      n-&gt;wb+=n-&gt;y*0.4;<br />   &#125;else&#123;<br />      if&#40;&#40;&#40;n-&gt;x + n-&gt;y&#41;*&#40;n-&gt;wa&#41;&#41;-0.7 &gt; 0 &amp;&amp; n-&gt;da &lt;0&gt;wb-=n-&gt;y*0.4;<br />      &#125;<br />   &#125;<br />&#125;<br />return 0;<br />&#125;</code></dd></dl><br /><br />Solo unas cuestiones sobre el perceptron, para agrupar varios formando una red neuronal que sea capaz de aprender y resolver problemas (como por ejemplo que jueggue al tres en raya o algo asi) como seria la forma mas apropiada de conectarlos, cuantos y como entrenar a todos los perceptrones si solo se conoce la salida de los que esten como salida de la red neuronal, me refiero que como se entrenaria a los que estuviesen a la entrada y en medio de la red neuronal de los cuales se desconoceria la salida ya que estan conectados a la entrada de otro perceptrón, ¿como se deberia hacer?, ¿como se puede formar una red neuronal con los perceptrones?<br /><br />Otra cosa, el perceptrón tiene un entrenamiento supervisado off-line y aprende a base de darle la entrada y la salida esperada, ¿sabeis de algun otro tipo de red neuronal que se entrene de forma distinta, que el entrenamiento no sea offline sino online y que pueda aprender por si mismo además de darle los resultados que se esperan como salida y ese tipo de cosas, otra mas eficaz que el perceptrón?<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=1912">lacabra25</a> — Sab May 02, 2009 11:24 pm</p><hr />
]]></content>
</entry>
</feed>