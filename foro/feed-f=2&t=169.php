<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="es">
<link rel="self" type="application/atom+xml" href="http://losersjuegos.com.ar/foro/feed.php?f=2&amp;t=169" />

<title>LosersJuegos</title>
<subtitle>Desarrollando videojuegos libres</subtitle>
<link href="http://losersjuegos.com.ar/foro/index.php" />
<updated>2007-09-29T10:45:13+00:00</updated>

<author><name><![CDATA[LosersJuegos]]></name></author>
<id>http://losersjuegos.com.ar/foro/feed.php?f=2&amp;t=169</id>
<entry>
<author><name><![CDATA[julen26]]></name></author>
<updated>2007-09-29T10:45:13+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=169&amp;p=573#p573</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=169&amp;p=573#p573"/>
<title type="html"><![CDATA[[Apuntes C++] Clases]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=169&amp;p=573#p573"><![CDATA[
Hola, ahora traigo sobre las clases en C++. Con poca teoría iremos directos al grano. La declaración de las clases es muy parecida a la de las estructuras:<br /><br /><dl class="codebox"><dt>Code: </dt><dd><code>class Clase<br />           &#123;<br />               // Contenido de la clase<br />           &#125; ;</code></dd></dl><br /><br />Para ir aprendiendo iremos haciendo una clase, al igual que hicimos a la hora de aprender las estructuras. Crearemos una clase que será nuestro personaje:<br /><br /><dl class="codebox"><dt>Code: </dt><dd><code>class Personaje<br />           &#123;<br />               // Contenido de la clase<br />           &#125; ;</code></dd></dl><br /><br />Las clases tienen otra clasificación de las variables. Hay varias, pero usaremos las más usadas, las private y las public. En realidad las estructuras también las tienen, pero no importa.<br /><br />Las variables public son las que se pueden acceder desde cualquier lado. Son por ejemplo las que solíamos utilizar en las estructuras, por ejemplo bala.x. Podíamos acceder a la variable x desde la función main. <br /><br />En cambio, si las variables son privadas, serán accesibles mediante métodos de la clase. Los métodos no son más que funciones de las clases. Por defecto las variables serán privadas, así que deberemos indicar que usaremos variables públicas, así:<br /><br /><dl class="codebox"><dt>Code: </dt><dd><code>           class Personaje<br />           &#123;<br />           public:<br />              // Variables y métodos públicos<br />           <br />           &#125; ;</code></dd></dl><br /><br />Por ahora no vamos a usar nada privado. Las variables de las clases son denominadas como “miembros”. Y las funciones se llaman “métodos”.<br /><br />Las funciones de una clase son simples. Y para ejecutarlas hay que respetar lo siguiente; clase.metodo(argumento1,argument2).<br /><br />Un poco de notación. Las variables de las clases (miembros) se les suele identificar con la letra m antes del nombre. De modo que queda de esta manera:<br /><br /><dl class="codebox"><dt>Code: </dt><dd><code>   int mX, mY ;<br />   floar mVelocidad, mDireccion ;</code></dd></dl><br /><br />Es una notación que se fue adaptando entre los programadores. No es obligatorio, pero es altamente recomendable.<br /><br />Para hacer nuestra clase deberemos pensar que tipo de juego que querríamos hacer, nosotros imaginaremos que será para un juego de 4 direcciones. Algo simple, ya que no necesitaremos muchos datos.<br /><br /><br />Vamos a añadir constructores a nuestra clase, crearemos uno por defecto, y otro con el que podremos indicar la posición inicial:<br /><br /><dl class="codebox"><dt>Code: </dt><dd><code>class Personaje<br />           &#123;<br />               public:<br />                   int mX, mY ;<br />               Personaje&#40;&#41;<br />               &#123;<br />                   mX = 0 ;<br />                   mY = 0 ;<br />               &#125;<br />               Personaje&#40;int aX,int aY&#41;<br />               &#123;<br />                   mX = aX ;<br />                   mY = aY ;<br />               &#125;<br />           &#125; ;</code></dd></dl><br /><br />Esto ya deberíamos saber hacerlo teniendo en cuenta lo aprendido en el tema de las estructuras. Bien, ahora aprenderemos algo útil para evitar el uso de dos constructores cuando en este caso podemos hacerlo solamente en uno, para que así no tengamos que usar muchos constructores. <br /><br />A los argumentos de un constructor (en este caso método), podemos darle un valor por defecto por si no le hemos especificado nada en él. <br /><br /><dl class="codebox"><dt>Code: </dt><dd><code>Personaje&#40;int aX = 0, int aY = 0&#41;<br />              &#123;<br />                 mX = aX ;<br />                 mY = aY ;<br />              &#125;</code></dd></dl><br /><br />Si nos fijamos en los argumentos, los hemos declarado dándoles un valor. Entonces si no especificamos nada en los argumentos, el valor de aX y xY será 0. <br /><br />De todas formas hay un inconveniente de usar valores por defecto en los argumentos, y es que no podemos dar un valor al último argumento sin dar otro al anterior. Lo entenderemos mejor con ejemplos, crearemos un “personaje”:<br /><br /><dl class="codebox"><dt>Code: </dt><dd><code>Personaje humano ;</code></dd></dl><br /><br />En este caso, el constructor daría el valor por defecto a los dos argumentos, y la posición sería (0,0).<br /><br /><dl class="codebox"><dt>Code: </dt><dd><code>Personaje humano&#40;5,10&#41; ;</code></dd></dl><br /><br />En este segundo caso, hemos indicado los valores de los argumentos, de modo que la posición sería (5,10).<br /><br /><dl class="codebox"><dt>Code: </dt><dd><code>Personaje humano&#40;5&#41; ;</code></dd></dl><br /><br />También lo podemos hacer de esta manera, indicándole solamente el primer argumento y dejando el segundo por defecto. La posición sería (5,0).<br /><br />Y aquí lo que no se puede hacer:<br /><br /><dl class="codebox"><dt>Code: </dt><dd><code>Personaje humano&#40;,10&#41; ;</code></dd></dl><br /><br />No está permitido realizar esta acción esperando a que la posición sea (0,10). De todas formas este inconveniente no nos da ningún problema. <br /><br /><br />Ahora vamos a añadir unos cuantos métodos (constructores de las clases) para realizar el movimiento en las 4 direcciones. Y antes de eso cambiaremos el tipo de variables a flota, ya que necesitaremos que se muevan a más velocidades y no solo con números enteros.<br /><br />Vamos a crear el primer método, quedaría algo así:<br /><br /><dl class="codebox"><dt>Code: </dt><dd><code>           void MoverDerecha&#40;float aVelocidad&#41;<br />           &#123;<br />               x += aVelocidad ;<br />           &#125;</code></dd></dl><br /><br />Se supone que se entiende fácilmente, tenemos en cuenta de que como la función no nos devuelve valor lo declaramos como void. Por lo tanto sigamos a hacer los métodos de las demás direcciones, y al final nos quedaría así:<br /><br /><dl class="codebox"><dt>Code: </dt><dd><code>      void MoverDerecha&#40;float aVelocidad&#41;<br />               &#123;<br />                   mX += aVelocidad ;<br />               &#125;<br />               void MoverIzquierda&#40;float aVelocidad&#41;<br />               &#123;<br />                   mX -= aVelocidad ;<br />               &#125;<br />               void MoverArriba&#40;float aVelocidad&#41;<br />               &#123;<br />                   mY -= aVelocidad ;<br />               &#125;<br />               void MoverAbajo&#40;float aVelocidad&#41;<br />               &#123;<br />                   mY += aVelocidad ;<br />               &#125;</code></dd></dl><br /><br />Ahora continuamos dentro del main. Para empezar crearemos un “personaje” en la posición (400,400), por ejemplo. <br /><br /><dl class="codebox"><dt>Code: </dt><dd><code>    Personaje humano&#40;400,400&#41; ;</code></dd></dl><br /><br />Vamos a hacer un simple sistema para mover a ese personaje por sus coordenadas, y veremos como cambia su posición. Aquí el main completo:<br /><br /><dl class="codebox"><dt>Code: </dt><dd><code>int main&#40;&#41;<br />           &#123;<br />              Personaje humano&#40;400.0f, 400.0f&#41; ;<br />           <br />              bool loop = true ;<br />              float vel = 1.0f ; // Velocidad para mover al personaje<br />           <br />              printf&#40;&quot;1&#41; Mueve al personaje hacia la derecha\n&quot;&#41; ;<br />              printf&#40;&quot;2&#41; Mueve al personaje hacia la izquierda\n&quot;&#41; ;<br />              printf&#40;&quot;3&#41; Mueve al personaje hacia abajo\n&quot;&#41; ;<br />              printf&#40;&quot;4&#41; Mueve al personaje hacia arriba\n&quot;&#41; ;<br />              printf&#40;&quot;5&#41; Salir\n&quot;&#41; ;<br />           <br />              while &#40;loop&#41;<br />              &#123;<br />                 printf&#40;&quot;La posicion del humano es: &#40;%f; %f&#41;\n&quot;, humano.mX, humano.mY&#41; ;<br />           <br />                 char opcion ;<br />                 opcion = getchar&#40;&#41; ;<br />           <br />                 if &#40;opcion == '1'&#41;<br />                 &#123;<br />                    // Movemos al humano hacia la derecha<br />                    humano.MoverDerecha&#40;vel&#41; ;<br />                 &#125;<br />                 else if &#40;opcion == '2'&#41;<br />                 &#123;<br />                    // Movemos al humano hacia la izquierda<br />                    humano.MoverIzquierda&#40;vel&#41; ;<br />                 &#125;<br />                 else if &#40;opcion == '3'&#41;<br />                 &#123;<br />                    // Movemos al humano hacia abajo<br />                    humano.MoverAbajo&#40;vel&#41; ;<br />                 &#125;<br />                 else if &#40;opcion == '4'&#41;<br />                 &#123;<br />                    // Movemos al humano hacia arriba<br />                    humano.MoverArriba&#40;vel&#41; ;<br />                 &#125;<br />                 else if &#40;opcion == '5'&#41;<br />                 &#123;<br />                    // Terminar el programa<br />                    loop = false ;<br />                 &#125;<br />              &#125;<br />           <br />              return 0 ;<br />           &#125;</code></dd></dl><br /><br />Bueno, vamos a analizar el código. Se supone que entendemos bien lo que ocurre hasta llegar al bucle while. Nos fijamos en que hemos iniciado el personaje en la posición (400,400). <br /><br />Ahora entramos en el bucle while que no para de ejecutarse hasta que el valor de loop sea 0 (false). De modo que el programa no finalizará hasta que se pulse la tecla 5.<br /><br />Dentro del bucle obtenemos la tecla pulsada mediante la función getchar(), que se encuentra en stdio.h, y lo guardamos en una variable char. Luego dependiendo de la tecla pulsada accederemos a los métodos correspondientes indicando su único argumento. De modo que se ejecutará esa función cambiando las variables que representan la posición del personaje. <br /><br />Si se ha entendido bien llegamos al final. Eso es todo de momento sobre las clases, aunque hay mas cosas como herencia, polimorfismo etc., muy útil en los juegos. <br /><br />saludos<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=1416">julen26</a> — Sab Sep 29, 2007 10:45 am</p><hr />
]]></content>
</entry>
</feed>