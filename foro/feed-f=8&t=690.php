<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="es">
<link rel="self" type="application/atom+xml" href="http://losersjuegos.com.ar/foro/feed.php?f=8&amp;t=690" />

<title>LosersJuegos</title>
<subtitle>Desarrollando videojuegos libres</subtitle>
<link href="http://losersjuegos.com.ar/foro/index.php" />
<updated>2010-02-01T02:21:57+00:00</updated>

<author><name><![CDATA[LosersJuegos]]></name></author>
<id>http://losersjuegos.com.ar/foro/feed.php?f=8&amp;t=690</id>
<entry>
<author><name><![CDATA[Juanxo]]></name></author>
<updated>2010-02-01T02:21:57+00:00</updated>
<id>http://losersjuegos.com.ar/foro/viewtopic.php?t=690&amp;p=3241#p3241</id>
<link href="http://losersjuegos.com.ar/foro/viewtopic.php?t=690&amp;p=3241#p3241"/>
<title type="html"><![CDATA[Problema con sobrecarga de operadores new]]></title>

<content type="html" xml:base="http://losersjuegos.com.ar/foro/viewtopic.php?t=690&amp;p=3241#p3241"><![CDATA[
Buenas a todos:<br /><br />Estoy tratando de hacer un Memory Manager basandome en la info que te explican en el libro <span style="font-style: italic">&quot;C++ for Game Programmers&quot;</span>. El problema es que no tengo el cd con las soluciones propuestas, y no se solucionar un error.<br /><br />Posteo primero el código y ahora comento:<br /><br />Heap.h<br /><dl class="codebox"><dt>Code: </dt><dd><code>#ifndef Heap_H<br />#define Heap_H<br />#include &lt;string&gt;<br />#include &lt;stdlib&gt;<br /><br /><br />class Heap<br />&#123;<br />    public:<br />        Heap&#40;&#41;&#123;&#125;;<br />        Heap&#40;const std::string&amp; name&#41;:<br />                            mName&#40;name&#41;,<br />                            mAllocs&#40;0&#41;,<br />                            mAllocMem&#40;0&#41;&#123;&#125;;<br /><br />        ~Heap&#40;&#41;&#123;&#125;;<br /><br />        void addAllocation&#40;size_t size&#41;&#123; mAllocs++; mAllocMem += size; &#125;;<br />        void remAllocation&#40;size_t size&#41;&#123; mAllocs--; mAllocMem -= size; &#125;;<br /><br />        void* operator new&#40;size_t size&#41;<br />        &#123;<br />            return malloc&#40;size&#41;;<br />        &#125;;<br /><br />        void operator delete&#40;void* pMem&#41;<br />        &#123;<br />            free&#40;pMem&#41;;<br />        &#125;;<br /><br />    private:<br />        std::string mName;<br />        int mAllocs;<br />        long int mAllocMem;<br />&#125;;<br /><br />struct AllocHeader<br />&#123;<br />    int nSize;<br />    unsigned int nSignature;<br />    Heap* pHeap;<br />&#125;;<br /><br /><br />#endif<br /><br /><br /></code></dd></dl><br /><br /><br />HeapFactory.h<br /><dl class="codebox"><dt>Code: </dt><dd><code>#ifndef HEAPFACTORY_H_INCLUDED<br />#define HEAPFACTORY_H_INCLUDED<br /><br />#include &quot;Heap.h&quot;<br />#include &lt;assert&gt;<br /><br />class HeapFactory<br />&#123;<br />    public:<br />        HeapFactory&#40;&#41;&#123;&#125;;<br />        ~HeapFactory&#40;&#41; &#123;&#125;;<br /><br />        static Heap* getDefaultHeap&#40;&#41; &#123;return mDefaultHeap; &#125;;<br /><br />        static Heap* mDefaultHeap;<br />&#125;;<br /><br />Heap* HeapFactory::mDefaultHeap = new Heap&#40;&quot;Default&quot;&#41;;<br /><br />void* operator new&#40;size_t size, Heap* pHeap&#41;<br />&#123;<br />    int nRequested_bytes = size + sizeof&#40;AllocHeader&#41; + sizeof&#40;int&#41;;<br />    char* pMem =  &#40;char*&#41;malloc&#40;nRequested_bytes&#41;;<br />    AllocHeader* pHeader = &#40;AllocHeader*&#41;pMem;<br />    pHeader-&gt;pHeap = pHeap;<br />    pHeader-&gt;nSize = size;<br />    pHeader-&gt;nSignature = 0xDEADC0DE;<br />    pHeap-&gt;addAllocation&#40;size&#41;;<br /><br />    void* pStart_memblock = pMem + sizeof&#40;AllocHeader&#41;;<br />    int* pEnd_block = &#40;int*&#41;pStart_memblock + size;<br />    *pEnd_block = 0x1578E34D;<br />    return pStart_memblock;<br />&#125;;<br /><br />void* operator new&#40;size_t size&#41;<br />&#123;<br />    return ::operator new&#40;size, HeapFactory::getDefaultHeap&#40;&#41;&#41;;<br />&#125;;<br /><br />void operator delete&#40;void* pMem&#41;<br />&#123;<br />    AllocHeader* pHeader = &#40;AllocHeader*&#41;pMem - sizeof&#40;AllocHeader&#41;;<br />    assert&#40;pHeader-&gt;nSignature == 0xDEADC0DE&#41;;<br />    int* pEnd_memBlock = &#40;int*&#41;pMem + pHeader-&gt;nSize;<br />    assert&#40;*pEnd_memBlock == 0x1578E34D&#41;;<br />    pHeader-&gt;pHeap-&gt;remAllocation&#40;pHeader-&gt;nSize&#41;;<br /><br />    free &#40;pHeader&#41;;<br />&#125;;<br /><br />#endif // HEAPFACTORY_H_INCLUDED<br /><br /></code></dd></dl><br /><br /><br />El problema es el siguiente:<br /><br />Yo quiero crear &quot;Heaps&quot; dinamicamente, pero el problema es que para el nuevo new necesito un Heap.<br />Mi solución, ha sido sobrecargar el operador new y delete de la clase Heap, para de esa manera llamar directamente a malloc y free y no tener ningún problema con los new y delete globales.<br />Pero cuando testeo mi código, resulta que a pesar de tener sobrecargados los operadores  en la clase, me llama a los globales.<br /><br />Alguien sabe a que se debe. ¿No pueden convivir ambos operadores sobrecargados? ¿Me falta algún punto?<br /><br />Gracias a todos<p>Estadísticas: Publicado por <a href="http://losersjuegos.com.ar/foro/memberlist.php?mode=viewprofile&amp;u=2057">Juanxo</a> — Lun Feb 01, 2010 2:21 am</p><hr />
]]></content>
</entry>
</feed>